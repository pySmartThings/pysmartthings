# serializer version: 1
# name: test_fetching_devices[devices_10]
  list([
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.AUDIO_VOLUME: 'audioVolume'>,
            <Capability.AUDIO_MUTE: 'audioMute'>,
            <Capability.AUDIO_TRACK_DATA: 'audioTrackData'>,
            <Capability.MEDIA_INPUT_SOURCE: 'mediaInputSource'>,
            <Capability.SAMSUNG_VD_AUDIO_INPUT_SOURCE: 'samsungvd.audioInputSource'>,
            <Capability.MEDIA_PLAYBACK: 'mediaPlayback'>,
            <Capability.AUDIO_NOTIFICATION: 'audioNotification'>,
            <Capability.SAMSUNG_VD_SOUND_FROM: 'samsungvd.soundFrom'>,
            <Capability.SAMSUNG_VD_THING_STATUS: 'samsungvd.thingStatus'>,
            <Capability.SAMSUNG_VD_AUDIO_GROUP_INFO: 'samsungvd.audioGroupInfo'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.NETWORK_AUDIO: 'NetworkAudio'>,
          'user_category': None,
        }),
      ]),
      'device_id': '6a6954ee-5784-4cce-aac6-fbe010adca07',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Network Audio Player',
      'label': 'Samsung Soundbar S801B',
      'location_id': '6911ddf5-f0cb-4516-a06a-3a2a6ec22bca',
      'name': 'Samsung Soundbar S801B',
      'ocf': dict({
        'device_type': 'oic.d.networkaudio',
        'firmware_version': 'HW-S801BWWB-1010.0',
        'hardware_version': '',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'HW-S801B',
        'name': 'Samsung Soundbar S801B',
        'platform_os': 'Tizen',
        'platform_version': '6.5',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'VD-NetworkAudio-002S',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THREE_AXIS: 'threeAxis'>,
            <Capability.ACCELERATION_SENSOR: 'accelerationSensor'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.MULTI_FUNCTIONAL_SENSOR: 'MultiFunctionalSensor'>,
          'user_category': <Category.MULTI_FUNCTIONAL_SENSOR: 'MultiFunctionalSensor'>,
        }),
      ]),
      'device_id': '16d58af1-86a0-46cd-bf14-d3742119e27c',
      'device_manufacturer_code': 'Samjin',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Main Bedroom Window Sensor',
      'location_id': '6911ddf5-f0cb-4516-a06a-3a2a6ec22bca',
      'name': 'multi-sensor',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.MOTION_SENSOR: 'motionSensor'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.MOTION_SENSOR: 'MotionSensor'>,
          'user_category': None,
        }),
      ]),
      'device_id': '59513635-baa2-463f-bb6a-443f662f3f2a',
      'device_manufacturer_code': None,
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Garage Motion Sensor',
      'location_id': '6911ddf5-f0cb-4516-a06a-3a2a6ec22bca',
      'name': 'motion-battery',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THREE_AXIS: 'threeAxis'>,
            <Capability.ACCELERATION_SENSOR: 'accelerationSensor'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.MULTI_FUNCTIONAL_SENSOR: 'MultiFunctionalSensor'>,
          'user_category': <Category.MULTI_FUNCTIONAL_SENSOR: 'MultiFunctionalSensor'>,
        }),
      ]),
      'device_id': 'ab7557f0-281d-49e9-a0d7-d838229a49d8',
      'device_manufacturer_code': 'Samjin',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': "Charlie's Bedroom Window Sensor",
      'location_id': '6911ddf5-f0cb-4516-a06a-3a2a6ec22bca',
      'name': 'multi-sensor',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.BRIDGE: 'bridge'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.HUB: 'Hub'>,
          'user_category': None,
        }),
      ]),
      'device_id': '6a2d07a4-dd77-48bc-9acf-017029aaf099',
      'device_manufacturer_code': None,
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'SmartThings v3 Hub',
      'location_id': '6911ddf5-f0cb-4516-a06a-3a2a6ec22bca',
      'name': 'SmartThings v3 Hub',
      'ocf': None,
      'type': <DeviceType.HUB: 'HUB'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THREE_AXIS: 'threeAxis'>,
            <Capability.ACCELERATION_SENSOR: 'accelerationSensor'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Kitchen Door Sensor',
          'manufacturer_category': <Category.MULTI_FUNCTIONAL_SENSOR: 'MultiFunctionalSensor'>,
          'user_category': None,
        }),
      ]),
      'device_id': '994ad929-3308-45a1-9ed0-e1cc26021131',
      'device_manufacturer_code': 'Samjin',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Kitchen Door Sensor',
      'location_id': '6911ddf5-f0cb-4516-a06a-3a2a6ec22bca',
      'name': 'Multipurpose Sensor',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THREE_AXIS: 'threeAxis'>,
            <Capability.ACCELERATION_SENSOR: 'accelerationSensor'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Back Door Sensor',
          'manufacturer_category': <Category.MULTI_FUNCTIONAL_SENSOR: 'MultiFunctionalSensor'>,
          'user_category': None,
        }),
      ]),
      'device_id': '333b4955-5f0d-4a87-8ad8-9fe32607e1fb',
      'device_manufacturer_code': 'Samjin',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Back Door Sensor',
      'location_id': '6911ddf5-f0cb-4516-a06a-3a2a6ec22bca',
      'name': 'Multipurpose Sensor',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THREE_AXIS: 'threeAxis'>,
            <Capability.ACCELERATION_SENSOR: 'accelerationSensor'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Garage Back Door Sensor',
          'manufacturer_category': <Category.MULTI_FUNCTIONAL_SENSOR: 'MultiFunctionalSensor'>,
          'user_category': None,
        }),
      ]),
      'device_id': '7faaac2e-d889-4141-99f5-493c991ec508',
      'device_manufacturer_code': 'Samjin',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Garage Back Door Sensor',
      'location_id': '6911ddf5-f0cb-4516-a06a-3a2a6ec22bca',
      'name': 'Multipurpose Sensor',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THREE_AXIS: 'threeAxis'>,
            <Capability.ACCELERATION_SENSOR: 'accelerationSensor'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Front Door Sensor',
          'manufacturer_category': <Category.MULTI_FUNCTIONAL_SENSOR: 'MultiFunctionalSensor'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'c93373db-ffec-49ad-80b8-6880ecad5eb8',
      'device_manufacturer_code': 'Samjin',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Front Door Sensor',
      'location_id': '6911ddf5-f0cb-4516-a06a-3a2a6ec22bca',
      'name': 'Multipurpose Sensor',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THREE_AXIS: 'threeAxis'>,
            <Capability.ACCELERATION_SENSOR: 'accelerationSensor'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Front Left Window Sensor',
          'manufacturer_category': <Category.MULTI_FUNCTIONAL_SENSOR: 'MultiFunctionalSensor'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'eeaa8872-18b2-4626-8f45-cbf8396e7a8f',
      'device_manufacturer_code': 'Samjin',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Front Left Window Sensor',
      'location_id': '6911ddf5-f0cb-4516-a06a-3a2a6ec22bca',
      'name': 'Multipurpose Sensor',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THREE_AXIS: 'threeAxis'>,
            <Capability.ACCELERATION_SENSOR: 'accelerationSensor'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.MULTI_FUNCTIONAL_SENSOR: 'MultiFunctionalSensor'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'fec5fefc-187a-4b07-ac8d-244aa8c448df',
      'device_manufacturer_code': 'Samjin',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Landing Window Sensor',
      'location_id': '6911ddf5-f0cb-4516-a06a-3a2a6ec22bca',
      'name': 'multi-sensor',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.MOTION_SENSOR: 'motionSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.MOTION_SENSOR: 'MotionSensor'>,
          'user_category': None,
        }),
      ]),
      'device_id': '3358b4cc-4a35-49ad-8bf9-95803d044408',
      'device_manufacturer_code': 'Samjin',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Rabbit House Sensor',
      'location_id': '6911ddf5-f0cb-4516-a06a-3a2a6ec22bca',
      'name': 'motion-temp-battery',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THREE_AXIS: 'threeAxis'>,
            <Capability.ACCELERATION_SENSOR: 'accelerationSensor'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.MULTI_FUNCTIONAL_SENSOR: 'MultiFunctionalSensor'>,
          'user_category': <Category.MULTI_FUNCTIONAL_SENSOR: 'MultiFunctionalSensor'>,
        }),
      ]),
      'device_id': '25bd5c0e-23bf-402c-a2f3-a8c34bf656b1',
      'device_manufacturer_code': 'Samjin',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Kitchen Window Sensor',
      'location_id': '6911ddf5-f0cb-4516-a06a-3a2a6ec22bca',
      'name': 'multi-sensor',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THREE_AXIS: 'threeAxis'>,
            <Capability.ACCELERATION_SENSOR: 'accelerationSensor'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.MULTI_FUNCTIONAL_SENSOR: 'MultiFunctionalSensor'>,
          'user_category': <Category.MULTI_FUNCTIONAL_SENSOR: 'MultiFunctionalSensor'>,
        }),
      ]),
      'device_id': '493837dc-c9a0-4ab2-9610-1b46e3c668c3',
      'device_manufacturer_code': 'Samjin',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': "Girl's Bedroom Window Sensor",
      'location_id': '6911ddf5-f0cb-4516-a06a-3a2a6ec22bca',
      'name': 'multi-sensor',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.AUDIO_VOLUME: 'audioVolume'>,
            <Capability.AUDIO_MUTE: 'audioMute'>,
            <Capability.TV_CHANNEL: 'tvChannel'>,
            <Capability.MEDIA_INPUT_SOURCE: 'mediaInputSource'>,
            <Capability.MEDIA_PLAYBACK: 'mediaPlayback'>,
            <Capability.MEDIA_TRACK_CONTROL: 'mediaTrackControl'>,
            <Capability.CUSTOM_ERROR: 'custom.error'>,
            <Capability.CUSTOM_PICTURE_MODE: 'custom.picturemode'>,
            <Capability.CUSTOM_SOUND_MODE: 'custom.soundmode'>,
            <Capability.CUSTOM_ACCESSIBILITY: 'custom.accessibility'>,
            <Capability.CUSTOM_LAUNCH_APP: 'custom.launchapp'>,
            <Capability.CUSTOM_RECORDING: 'custom.recording'>,
            <Capability.CUSTOM_TV_SEARCH: 'custom.tvsearch'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.SAMSUNG_VD_REMOTE_CONTROL: 'samsungvd.remoteControl'>,
            <Capability.SAMSUNG_VD_AMBIENT: 'samsungvd.ambient'>,
            <Capability.SAMSUNG_VD_AMBIENT_CONTENT: 'samsungvd.ambientContent'>,
            <Capability.SAMSUNG_VD_MEDIA_INPUT_SOURCE: 'samsungvd.mediaInputSource'>,
            <Capability.SAMSUNG_VD_SUPPORTS_FEATURES: 'samsungvd.supportsFeatures'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.SAMSUNG_VD_FIRMWARE_VERSION: 'samsungvd.firmwareVersion'>,
            <Capability.SAMSUNG_VD_SUPPORTS_POWER_ON_BY_OCF: 'samsungvd.supportsPowerOnByOcf'>,
            <Capability.SAMSUNG_VD_DEVICE_CATEGORY: 'samsungvd.deviceCategory'>,
            <Capability.SAMSUNG_VD_THING_STATUS: 'samsungvd.thingStatus'>,
            <Capability.SEC_DEVICE_CONNECTION_STATE: 'sec.deviceConnectionState'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>,
            <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>,
            <Capability.SAMSUNG_IM_FIXED_FIND_NODE: 'samsungim.fixedFindNode'>,
            <Capability.SAMSUNG_VD_LIGHT_CONTROL: 'samsungvd.lightControl'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.TELEVISION: 'Television'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'b4d20b8f-ae23-8a6d-9db2-4c9d8db2c615',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF TV',
      'label': 'Samsung QN95CA 55',
      'location_id': '6911ddf5-f0cb-4516-a06a-3a2a6ec22bca',
      'name': 'Samsung QN95CA 55',
      'ocf': dict({
        'device_type': 'oic.d.tv',
        'firmware_version': 'T-PTMCDEUC-0080-2013.1|ST_ENERGY',
        'hardware_version': '',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'QE55QN95CATXXU',
        'name': 'Samsung QN95CA 55',
        'platform_os': 'Tizen',
        'platform_version': '8.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'VD-STV-2023',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.AUDIO_VOLUME: 'audioVolume'>,
            <Capability.AUDIO_MUTE: 'audioMute'>,
            <Capability.TV_CHANNEL: 'tvChannel'>,
            <Capability.MEDIA_INPUT_SOURCE: 'mediaInputSource'>,
            <Capability.MEDIA_PLAYBACK: 'mediaPlayback'>,
            <Capability.MEDIA_TRACK_CONTROL: 'mediaTrackControl'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.CUSTOM_ERROR: 'custom.error'>,
            <Capability.CUSTOM_PICTURE_MODE: 'custom.picturemode'>,
            <Capability.CUSTOM_SOUND_MODE: 'custom.soundmode'>,
            <Capability.CUSTOM_ACCESSIBILITY: 'custom.accessibility'>,
            <Capability.CUSTOM_LAUNCH_APP: 'custom.launchapp'>,
            <Capability.CUSTOM_RECORDING: 'custom.recording'>,
            <Capability.CUSTOM_TV_SEARCH: 'custom.tvsearch'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.SAMSUNG_VD_REMOTE_CONTROL: 'samsungvd.remoteControl'>,
            <Capability.SAMSUNG_VD_AMBIENT: 'samsungvd.ambient'>,
            <Capability.SAMSUNG_VD_AMBIENT_CONTENT: 'samsungvd.ambientContent'>,
            <Capability.SAMSUNG_VD_MEDIA_INPUT_SOURCE: 'samsungvd.mediaInputSource'>,
            <Capability.SAMSUNG_VD_SUPPORTS_FEATURES: 'samsungvd.supportsFeatures'>,
            <Capability.SAMSUNG_IM_FIXED_FIND_NODE: 'samsungim.fixedFindNode'>,
            <Capability.SAMSUNG_VD_THING_STATUS: 'samsungvd.thingStatus'>,
            <Capability.SEC_DEVICE_CONNECTION_STATE: 'sec.deviceConnectionState'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.SAMSUNG_VD_FIRMWARE_VERSION: 'samsungvd.firmwareVersion'>,
            <Capability.SAMSUNG_VD_SUPPORTS_POWER_ON_BY_OCF: 'samsungvd.supportsPowerOnByOcf'>,
            <Capability.SAMSUNG_VD_DEVICE_CATEGORY: 'samsungvd.deviceCategory'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.TELEVISION: 'Television'>,
          'user_category': None,
        }),
      ]),
      'device_id': '01751e21-3609-ec2f-41af-1c8bc8d96c15',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF TV',
      'label': 'Samsung The Frame 55',
      'location_id': '6911ddf5-f0cb-4516-a06a-3a2a6ec22bca',
      'name': 'Samsung The Frame 55',
      'ocf': dict({
        'device_type': 'oic.d.tv',
        'firmware_version': 'T-PTMDEUC-1651.7|ST_ENERGY',
        'hardware_version': '',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'QE55LS03BGUXXU',
        'name': 'Samsung The Frame 55',
        'platform_os': 'Tizen',
        'platform_version': '6.5',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'VD-STV-2022',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.POWER_METER: 'powerMeter'>,
            <Capability.ENERGY_METER: 'energyMeter'>,
            <Capability.VOLTAGE_MEASUREMENT: 'voltageMeasurement'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Meter',
          'manufacturer_category': <Category.CURB_POWER_METER: 'CurbPowerMeter'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'f0af21a2-d5a1-437c-b10a-b34a87394b71',
      'device_manufacturer_code': '0086-0002-005F',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Aeotec Energy Monitor',
      'location_id': '6911ddf5-f0cb-4516-a06a-3a2a6ec22bca',
      'name': 'aeotec-home-energy-meter-gen5',
      'ocf': None,
      'type': <DeviceType.ZWAVE: 'ZWAVE'>,
    }),
  ])
# ---
# name: test_fetching_devices[devices_11]
  list([
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>,
            <Capability.AIR_CONDITIONER_MODE: 'airConditionerMode'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.AIR_CONDITIONER: 'AirConditioner'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'bf4b1167-48a3-4af7-9186-0900a678ffa5',
      'device_manufacturer_code': 'Sensibo',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Office',
      'location_id': 'fe14085e-bacb-4997-bc0c-df08204eaea2',
      'name': 'sensibo-airconditioner-1',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.EXECUTE: 'execute'>,
            <Capability.OCF: 'ocf'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>,
            <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.WASHER_OPERATING_STATE: 'washerOperatingState'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_DRYER_DRY_LEVEL: 'custom.dryerDryLevel'>,
            <Capability.CUSTOM_DRYER_WRINKLE_PREVENT: 'custom.dryerWrinklePrevent'>,
            <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>,
            <Capability.CUSTOM_JOB_BEGINNING_STATUS: 'custom.jobBeginningStatus'>,
            <Capability.CUSTOM_SUPPORTED_OPTIONS: 'custom.supportedOptions'>,
            <Capability.CUSTOM_WASHER_AUTO_DETERGENT: 'custom.washerAutoDetergent'>,
            <Capability.CUSTOM_WASHER_AUTO_SOFTENER: 'custom.washerAutoSoftener'>,
            <Capability.CUSTOM_WASHER_RINSE_CYCLES: 'custom.washerRinseCycles'>,
            <Capability.CUSTOM_WASHER_SOIL_LEVEL: 'custom.washerSoilLevel'>,
            <Capability.CUSTOM_WASHER_SPIN_LEVEL: 'custom.washerSpinLevel'>,
            <Capability.CUSTOM_WASHER_WATER_TEMPERATURE: 'custom.washerWaterTemperature'>,
            <Capability.SAMSUNG_CE_AUTO_DISPENSE_DETERGENT: 'samsungce.autoDispenseDetergent'>,
            <Capability.SAMSUNG_CE_AUTO_DISPENSE_SOFTENER: 'samsungce.autoDispenseSoftener'>,
            <Capability.SAMSUNG_CE_DETERGENT_ORDER: 'samsungce.detergentOrder'>,
            <Capability.SAMSUNG_CE_DETERGENT_STATE: 'samsungce.detergentState'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
            <Capability.SAMSUNG_CE_DRYER_DRYING_TIME: 'samsungce.dryerDryingTime'>,
            <Capability.SAMSUNG_CE_DETERGENT_AUTO_REPLENISHMENT: 'samsungce.detergentAutoReplenishment'>,
            <Capability.SAMSUNG_CE_SOFTENER_AUTO_REPLENISHMENT: 'samsungce.softenerAutoReplenishment'>,
            <Capability.SAMSUNG_CE_FLEXIBLE_AUTO_DISPENSE_DETERGENT: 'samsungce.flexibleAutoDispenseDetergent'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.SAMSUNG_CE_KIDS_LOCK: 'samsungce.kidsLock'>,
            <Capability.SAMSUNG_CE_SOFTENER_ORDER: 'samsungce.softenerOrder'>,
            <Capability.SAMSUNG_CE_SOFTENER_STATE: 'samsungce.softenerState'>,
            <Capability.SAMSUNG_CE_WASHER_BUBBLE_SOAK: 'samsungce.washerBubbleSoak'>,
            <Capability.SAMSUNG_CE_WASHER_CYCLE: 'samsungce.washerCycle'>,
            <Capability.SAMSUNG_CE_WASHER_CYCLE_PRESET: 'samsungce.washerCyclePreset'>,
            <Capability.SAMSUNG_CE_WASHER_DELAY_END: 'samsungce.washerDelayEnd'>,
            <Capability.SAMSUNG_CE_WASHER_FREEZE_PREVENT: 'samsungce.washerFreezePrevent'>,
            <Capability.SAMSUNG_CE_WASHER_LABEL_SCAN_CYCLE_PRESET: 'samsungce.washerLabelScanCyclePreset'>,
            <Capability.SAMSUNG_CE_WASHER_OPERATING_STATE: 'samsungce.washerOperatingState'>,
            <Capability.SAMSUNG_CE_WASHER_WASHING_TIME: 'samsungce.washerWashingTime'>,
            <Capability.SAMSUNG_CE_WASHER_WATER_LEVEL: 'samsungce.washerWaterLevel'>,
            <Capability.SAMSUNG_CE_WASHER_WATER_VALVE: 'samsungce.washerWaterValve'>,
            <Capability.SAMSUNG_CE_WELCOME_MESSAGE: 'samsungce.welcomeMessage'>,
            <Capability.SAMSUNG_CE_WATER_CONSUMPTION_REPORT: 'samsungce.waterConsumptionReport'>,
            <Capability.SAMSUNG_CE_CLOTHING_EXTRA_CARE: 'samsungce.clothingExtraCare'>,
            <Capability.SAMSUNG_CE_QUICK_CONTROL: 'samsungce.quickControl'>,
            <Capability.SAMSUNG_CE_ENERGY_PLANNER: 'samsungce.energyPlanner'>,
            <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>,
            <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.WASHER: 'Washer'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.HCA_WASHER_MODE: 'hca.washerMode'>,
          ]),
          'id': 'hca.main',
          'label': 'hca.main',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'b905ade6-4f96-b00e-3292-0703f5866809',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Washer',
      'label': 'Washer',
      'location_id': 'fe14085e-bacb-4997-bc0c-df08204eaea2',
      'name': '[washer] Samsung',
      'ocf': dict({
        'device_type': 'oic.d.washer',
        'firmware_version': 'DA_WM_TP1_21_COMMON_30240927',
        'hardware_version': 'Realtek',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'DA_WM_TP1_21_COMMON|20334241|20010002001711664AA3025700000000',
        'name': '[washer] Samsung',
        'platform_os': 'TizenRT 3.1',
        'platform_version': 'DAWIT 2.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'DA-WM-WM-01011',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.BRIDGE: 'bridge'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.HUB: 'Hub'>,
          'user_category': None,
        }),
      ]),
      'device_id': '71526aa9-6457-417a-9bae-b83c87761e6a',
      'device_manufacturer_code': None,
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Garage Hub',
      'location_id': 'fe14085e-bacb-4997-bc0c-df08204eaea2',
      'name': 'SmartThings v3 Hub',
      'ocf': None,
      'type': <DeviceType.HUB: 'HUB'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.BRIDGE: 'bridge'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.HUB: 'Hub'>,
          'user_category': None,
        }),
      ]),
      'device_id': '148606b0-9c62-417c-8c0a-c6e4ef7ce269',
      'device_manufacturer_code': None,
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Upstairs Hub',
      'location_id': 'fe14085e-bacb-4997-bc0c-df08204eaea2',
      'name': 'SmartThings v3 Hub',
      'ocf': None,
      'type': <DeviceType.HUB: 'HUB'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.POWER_METER: 'powerMeter'>,
            <Capability.ENERGY_METER: 'energyMeter'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Geyser',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'dd7ab462-c277-4aed-a9fb-ec66f9c6cc59',
      'device_manufacturer_code': '0086-0003-004E',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Geyser',
      'location_id': 'fe14085e-bacb-4997-bc0c-df08204eaea2',
      'name': 'Aeotec Switch',
      'ocf': None,
      'type': <DeviceType.ZWAVE: 'ZWAVE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>,
            <Capability.AIR_CONDITIONER_MODE: 'airConditionerMode'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.AIR_CONDITIONER: 'AirConditioner'>,
          'user_category': None,
        }),
      ]),
      'device_id': '80d3956d-b94d-4a43-9bad-d3cdc8a9cb1d',
      'device_manufacturer_code': 'Sensibo',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Main Bedroom',
      'location_id': 'fe14085e-bacb-4997-bc0c-df08204eaea2',
      'name': 'sensibo-airconditioner-1',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.POWER_METER: 'powerMeter'>,
            <Capability.ENERGY_METER: 'energyMeter'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Geyser',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': None,
        }),
      ]),
      'device_id': '23a4c0a4-2dae-47d0-b987-cba764414672',
      'device_manufacturer_code': '0086-0003-004E',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Geyser',
      'location_id': 'fe14085e-bacb-4997-bc0c-df08204eaea2',
      'name': 'Aeotec Switch',
      'ocf': None,
      'type': <DeviceType.ZWAVE: 'ZWAVE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>,
            <Capability.AIR_CONDITIONER_MODE: 'airConditionerMode'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.AIR_CONDITIONER: 'AirConditioner'>,
          'user_category': None,
        }),
      ]),
      'device_id': '4c08fbf8-f77b-4236-a18b-0bbe7da61ea8',
      'device_manufacturer_code': 'Sensibo',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': "Harry's room",
      'location_id': 'fe14085e-bacb-4997-bc0c-df08204eaea2',
      'name': 'sensibo-airconditioner-1',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
  ])
# ---
# name: test_fetching_devices[devices_12]
  list([
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.EXECUTE: 'execute'>,
            <Capability.OCF: 'ocf'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>,
            <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.WASHER_OPERATING_STATE: 'washerOperatingState'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_DRYER_DRY_LEVEL: 'custom.dryerDryLevel'>,
            <Capability.CUSTOM_DRYER_WRINKLE_PREVENT: 'custom.dryerWrinklePrevent'>,
            <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>,
            <Capability.CUSTOM_JOB_BEGINNING_STATUS: 'custom.jobBeginningStatus'>,
            <Capability.CUSTOM_SUPPORTED_OPTIONS: 'custom.supportedOptions'>,
            <Capability.CUSTOM_WASHER_AUTO_DETERGENT: 'custom.washerAutoDetergent'>,
            <Capability.CUSTOM_WASHER_AUTO_SOFTENER: 'custom.washerAutoSoftener'>,
            <Capability.CUSTOM_WASHER_RINSE_CYCLES: 'custom.washerRinseCycles'>,
            <Capability.CUSTOM_WASHER_SOIL_LEVEL: 'custom.washerSoilLevel'>,
            <Capability.CUSTOM_WASHER_SPIN_LEVEL: 'custom.washerSpinLevel'>,
            <Capability.CUSTOM_WASHER_WATER_TEMPERATURE: 'custom.washerWaterTemperature'>,
            <Capability.SAMSUNG_CE_AUTO_DISPENSE_DETERGENT: 'samsungce.autoDispenseDetergent'>,
            <Capability.SAMSUNG_CE_AUTO_DISPENSE_SOFTENER: 'samsungce.autoDispenseSoftener'>,
            <Capability.SAMSUNG_CE_DETERGENT_ORDER: 'samsungce.detergentOrder'>,
            <Capability.SAMSUNG_CE_DETERGENT_STATE: 'samsungce.detergentState'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
            <Capability.SAMSUNG_CE_DRYER_DRYING_TIME: 'samsungce.dryerDryingTime'>,
            <Capability.SAMSUNG_CE_DETERGENT_AUTO_REPLENISHMENT: 'samsungce.detergentAutoReplenishment'>,
            <Capability.SAMSUNG_CE_SOFTENER_AUTO_REPLENISHMENT: 'samsungce.softenerAutoReplenishment'>,
            <Capability.SAMSUNG_CE_FLEXIBLE_AUTO_DISPENSE_DETERGENT: 'samsungce.flexibleAutoDispenseDetergent'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.SAMSUNG_CE_KIDS_LOCK: 'samsungce.kidsLock'>,
            <Capability.SAMSUNG_CE_SOFTENER_ORDER: 'samsungce.softenerOrder'>,
            <Capability.SAMSUNG_CE_SOFTENER_STATE: 'samsungce.softenerState'>,
            <Capability.SAMSUNG_CE_WASHER_BUBBLE_SOAK: 'samsungce.washerBubbleSoak'>,
            <Capability.SAMSUNG_CE_WASHER_CYCLE: 'samsungce.washerCycle'>,
            <Capability.SAMSUNG_CE_WASHER_CYCLE_PRESET: 'samsungce.washerCyclePreset'>,
            <Capability.SAMSUNG_CE_WASHER_DELAY_END: 'samsungce.washerDelayEnd'>,
            <Capability.SAMSUNG_CE_WASHER_FREEZE_PREVENT: 'samsungce.washerFreezePrevent'>,
            <Capability.SAMSUNG_CE_WASHER_LABEL_SCAN_CYCLE_PRESET: 'samsungce.washerLabelScanCyclePreset'>,
            <Capability.SAMSUNG_CE_WASHER_OPERATING_STATE: 'samsungce.washerOperatingState'>,
            <Capability.SAMSUNG_CE_WASHER_WASHING_TIME: 'samsungce.washerWashingTime'>,
            <Capability.SAMSUNG_CE_WASHER_WATER_LEVEL: 'samsungce.washerWaterLevel'>,
            <Capability.SAMSUNG_CE_WASHER_WATER_VALVE: 'samsungce.washerWaterValve'>,
            <Capability.SAMSUNG_CE_WELCOME_MESSAGE: 'samsungce.welcomeMessage'>,
            <Capability.SAMSUNG_CE_WATER_CONSUMPTION_REPORT: 'samsungce.waterConsumptionReport'>,
            <Capability.SAMSUNG_CE_CLOTHING_EXTRA_CARE: 'samsungce.clothingExtraCare'>,
            <Capability.SAMSUNG_CE_QUICK_CONTROL: 'samsungce.quickControl'>,
            <Capability.SAMSUNG_CE_ENERGY_PLANNER: 'samsungce.energyPlanner'>,
            <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>,
            <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.WASHER: 'Washer'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.HCA_WASHER_MODE: 'hca.washerMode'>,
          ]),
          'id': 'hca.main',
          'label': 'hca.main',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
      ]),
      'device_id': '62ad169f-f270-b219-a521-1608dea8bf76',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Washer',
      'label': 'Washing machine',
      'location_id': '6a446433-a83d-4ede-9c47-f22a0f80b574',
      'name': '[washer] Samsung',
      'ocf': dict({
        'device_type': 'oic.d.washer',
        'firmware_version': 'DA_WM_TP1_21_COMMON_30240927',
        'hardware_version': 'Realtek',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'DA_WM_TP1_21_COMMON|20314341|20010002001611664AA3025700000000',
        'name': '[washer] Samsung',
        'platform_os': 'TizenRT 3.1',
        'platform_version': 'DAWIT 2.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'DA-WM-WM-01011',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.AUDIO_VOLUME: 'audioVolume'>,
            <Capability.AUDIO_MUTE: 'audioMute'>,
            <Capability.TV_CHANNEL: 'tvChannel'>,
            <Capability.MEDIA_INPUT_SOURCE: 'mediaInputSource'>,
            <Capability.MEDIA_PLAYBACK: 'mediaPlayback'>,
            <Capability.MEDIA_TRACK_CONTROL: 'mediaTrackControl'>,
            <Capability.CUSTOM_ERROR: 'custom.error'>,
            <Capability.CUSTOM_PICTURE_MODE: 'custom.picturemode'>,
            <Capability.CUSTOM_SOUND_MODE: 'custom.soundmode'>,
            <Capability.CUSTOM_ACCESSIBILITY: 'custom.accessibility'>,
            <Capability.CUSTOM_LAUNCH_APP: 'custom.launchapp'>,
            <Capability.CUSTOM_RECORDING: 'custom.recording'>,
            <Capability.CUSTOM_TV_SEARCH: 'custom.tvsearch'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.SAMSUNG_VD_REMOTE_CONTROL: 'samsungvd.remoteControl'>,
            <Capability.SAMSUNG_VD_AMBIENT: 'samsungvd.ambient'>,
            <Capability.SAMSUNG_VD_AMBIENT_CONTENT: 'samsungvd.ambientContent'>,
            <Capability.SAMSUNG_VD_MEDIA_INPUT_SOURCE: 'samsungvd.mediaInputSource'>,
            <Capability.SAMSUNG_VD_SUPPORTS_FEATURES: 'samsungvd.supportsFeatures'>,
            <Capability.SAMSUNG_VD_SUPPORTS_POWER_ON_BY_OCF: 'samsungvd.supportsPowerOnByOcf'>,
            <Capability.SAMSUNG_VD_THING_STATUS: 'samsungvd.thingStatus'>,
            <Capability.SEC_DEVICE_CONNECTION_STATE: 'sec.deviceConnectionState'>,
            <Capability.SAMSUNG_VD_FIRMWARE_VERSION: 'samsungvd.firmwareVersion'>,
            <Capability.SAMSUNG_VD_DEVICE_CATEGORY: 'samsungvd.deviceCategory'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.SAMSUNG_VD_LIGHT_CONTROL: 'samsungvd.lightControl'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.SMART_MONITOR: 'SmartMonitor'>,
          'user_category': None,
        }),
      ]),
      'device_id': '035a8805-e552-ce47-cf04-411e4644eeb8',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'x.com.st.d.monitor',
      'label': '49" Odyssey OLED G9',
      'location_id': '6a446433-a83d-4ede-9c47-f22a0f80b574',
      'name': '49" Odyssey OLED G9',
      'ocf': dict({
        'device_type': 'x.com.st.d.monitor',
        'firmware_version': 'T-OSCSCWWC-2000.2',
        'hardware_version': '',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'LS49CG954SUXXU',
        'name': '49" Odyssey OLED G9',
        'platform_os': 'Tizen',
        'platform_version': '7.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'VD-SMONITOR-2023',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
  ])
# ---
# name: test_fetching_devices[devices_13]
  list([
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.BRIDGE: 'bridge'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.HUB: 'Hub'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'd7c54320-6d75-4543-ab1f-9bd105336aae',
      'device_manufacturer_code': None,
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Home',
      'location_id': 'c4904031-30e5-4920-9ea7-0a768e355b2a',
      'name': 'SmartThings v2 Hub',
      'ocf': None,
      'type': <DeviceType.HUB: 'HUB'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.LOCK: 'lock'>,
            <Capability.LOCK_CODES: 'lockCodes'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.SMART_LOCK: 'SmartLock'>,
          'user_category': None,
        }),
      ]),
      'device_id': '42410e99-63cb-49d0-8f2f-d036f1b3ce66',
      'device_manufacturer_code': '0129-6600-0002',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Front Door Lock',
      'location_id': 'c4904031-30e5-4920-9ea7-0a768e355b2a',
      'name': 'base-lock',
      'ocf': None,
      'type': <DeviceType.ZWAVE: 'ZWAVE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.EXECUTE: 'execute'>,
            <Capability.OCF: 'ocf'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>,
            <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.WASHER_OPERATING_STATE: 'washerOperatingState'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_DRYER_DRY_LEVEL: 'custom.dryerDryLevel'>,
            <Capability.CUSTOM_DRYER_WRINKLE_PREVENT: 'custom.dryerWrinklePrevent'>,
            <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>,
            <Capability.CUSTOM_JOB_BEGINNING_STATUS: 'custom.jobBeginningStatus'>,
            <Capability.CUSTOM_SUPPORTED_OPTIONS: 'custom.supportedOptions'>,
            <Capability.CUSTOM_WASHER_AUTO_DETERGENT: 'custom.washerAutoDetergent'>,
            <Capability.CUSTOM_WASHER_AUTO_SOFTENER: 'custom.washerAutoSoftener'>,
            <Capability.CUSTOM_WASHER_RINSE_CYCLES: 'custom.washerRinseCycles'>,
            <Capability.CUSTOM_WASHER_SOIL_LEVEL: 'custom.washerSoilLevel'>,
            <Capability.CUSTOM_WASHER_SPIN_LEVEL: 'custom.washerSpinLevel'>,
            <Capability.CUSTOM_WASHER_WATER_TEMPERATURE: 'custom.washerWaterTemperature'>,
            <Capability.SAMSUNG_CE_AUTO_DISPENSE_DETERGENT: 'samsungce.autoDispenseDetergent'>,
            <Capability.SAMSUNG_CE_AUTO_DISPENSE_SOFTENER: 'samsungce.autoDispenseSoftener'>,
            <Capability.SAMSUNG_CE_DETERGENT_ORDER: 'samsungce.detergentOrder'>,
            <Capability.SAMSUNG_CE_DETERGENT_STATE: 'samsungce.detergentState'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
            <Capability.SAMSUNG_CE_DRYER_DRYING_TIME: 'samsungce.dryerDryingTime'>,
            <Capability.SAMSUNG_CE_DETERGENT_AUTO_REPLENISHMENT: 'samsungce.detergentAutoReplenishment'>,
            <Capability.SAMSUNG_CE_SOFTENER_AUTO_REPLENISHMENT: 'samsungce.softenerAutoReplenishment'>,
            <Capability.SAMSUNG_CE_FLEXIBLE_AUTO_DISPENSE_DETERGENT: 'samsungce.flexibleAutoDispenseDetergent'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.SAMSUNG_CE_KIDS_LOCK: 'samsungce.kidsLock'>,
            <Capability.SAMSUNG_CE_SOFTENER_ORDER: 'samsungce.softenerOrder'>,
            <Capability.SAMSUNG_CE_SOFTENER_STATE: 'samsungce.softenerState'>,
            <Capability.SAMSUNG_CE_WASHER_BUBBLE_SOAK: 'samsungce.washerBubbleSoak'>,
            <Capability.SAMSUNG_CE_WASHER_CYCLE: 'samsungce.washerCycle'>,
            <Capability.SAMSUNG_CE_WASHER_CYCLE_PRESET: 'samsungce.washerCyclePreset'>,
            <Capability.SAMSUNG_CE_WASHER_DELAY_END: 'samsungce.washerDelayEnd'>,
            <Capability.SAMSUNG_CE_WASHER_FREEZE_PREVENT: 'samsungce.washerFreezePrevent'>,
            <Capability.SAMSUNG_CE_WASHER_LABEL_SCAN_CYCLE_PRESET: 'samsungce.washerLabelScanCyclePreset'>,
            <Capability.SAMSUNG_CE_WASHER_OPERATING_STATE: 'samsungce.washerOperatingState'>,
            <Capability.SAMSUNG_CE_WASHER_WASHING_TIME: 'samsungce.washerWashingTime'>,
            <Capability.SAMSUNG_CE_WASHER_WATER_LEVEL: 'samsungce.washerWaterLevel'>,
            <Capability.SAMSUNG_CE_WASHER_WATER_VALVE: 'samsungce.washerWaterValve'>,
            <Capability.SAMSUNG_CE_WELCOME_MESSAGE: 'samsungce.welcomeMessage'>,
            <Capability.SAMSUNG_CE_WATER_CONSUMPTION_REPORT: 'samsungce.waterConsumptionReport'>,
            <Capability.SAMSUNG_CE_CLOTHING_EXTRA_CARE: 'samsungce.clothingExtraCare'>,
            <Capability.SAMSUNG_CE_QUICK_CONTROL: 'samsungce.quickControl'>,
            <Capability.SAMSUNG_CE_ENERGY_PLANNER: 'samsungce.energyPlanner'>,
            <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>,
            <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.WASHER: 'Washer'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.HCA_WASHER_MODE: 'hca.washerMode'>,
          ]),
          'id': 'hca.main',
          'label': 'hca.main',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
      ]),
      'device_id': '6486e104-e046-f923-9645-5887ed4375dd',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Washer',
      'label': 'Washing machine',
      'location_id': 'c4904031-30e5-4920-9ea7-0a768e355b2a',
      'name': '[washer] Samsung',
      'ocf': dict({
        'device_type': 'oic.d.washer',
        'firmware_version': 'DA_WM_TP1_21_COMMON_30240927',
        'hardware_version': 'Realtek',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'DA_WM_TP1_21_COMMON|20348141|20010002001711024ACB020200080000',
        'name': '[washer] Samsung',
        'platform_os': 'TizenRT 3.1',
        'platform_version': 'DAWIT 2.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'DA-WM-WM-01011',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
  ])
# ---
# name: test_fetching_devices[devices_14]
  list([
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.EXECUTE: 'execute'>,
            <Capability.OCF: 'ocf'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>,
            <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.WASHER_OPERATING_STATE: 'washerOperatingState'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_DRYER_DRY_LEVEL: 'custom.dryerDryLevel'>,
            <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>,
            <Capability.CUSTOM_JOB_BEGINNING_STATUS: 'custom.jobBeginningStatus'>,
            <Capability.CUSTOM_SUPPORTED_OPTIONS: 'custom.supportedOptions'>,
            <Capability.CUSTOM_WASHER_AUTO_DETERGENT: 'custom.washerAutoDetergent'>,
            <Capability.CUSTOM_WASHER_AUTO_SOFTENER: 'custom.washerAutoSoftener'>,
            <Capability.CUSTOM_WASHER_RINSE_CYCLES: 'custom.washerRinseCycles'>,
            <Capability.CUSTOM_WASHER_SOIL_LEVEL: 'custom.washerSoilLevel'>,
            <Capability.CUSTOM_WASHER_SPIN_LEVEL: 'custom.washerSpinLevel'>,
            <Capability.CUSTOM_WASHER_WATER_TEMPERATURE: 'custom.washerWaterTemperature'>,
            <Capability.SAMSUNG_CE_AUTO_DISPENSE_DETERGENT: 'samsungce.autoDispenseDetergent'>,
            <Capability.SAMSUNG_CE_AUTO_DISPENSE_SOFTENER: 'samsungce.autoDispenseSoftener'>,
            <Capability.SAMSUNG_CE_DETERGENT_ORDER: 'samsungce.detergentOrder'>,
            <Capability.SAMSUNG_CE_DETERGENT_STATE: 'samsungce.detergentState'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_DONGLE_SOFTWARE_INSTALLATION: 'samsungce.dongleSoftwareInstallation'>,
            <Capability.SAMSUNG_CE_DETERGENT_AUTO_REPLENISHMENT: 'samsungce.detergentAutoReplenishment'>,
            <Capability.SAMSUNG_CE_SOFTENER_AUTO_REPLENISHMENT: 'samsungce.softenerAutoReplenishment'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.SAMSUNG_CE_KIDS_LOCK: 'samsungce.kidsLock'>,
            <Capability.SAMSUNG_CE_SOFTENER_ORDER: 'samsungce.softenerOrder'>,
            <Capability.SAMSUNG_CE_SOFTENER_STATE: 'samsungce.softenerState'>,
            <Capability.SAMSUNG_CE_WASHER_BUBBLE_SOAK: 'samsungce.washerBubbleSoak'>,
            <Capability.SAMSUNG_CE_WASHER_CYCLE: 'samsungce.washerCycle'>,
            <Capability.SAMSUNG_CE_WASHER_CYCLE_PRESET: 'samsungce.washerCyclePreset'>,
            <Capability.SAMSUNG_CE_WASHER_DELAY_END: 'samsungce.washerDelayEnd'>,
            <Capability.SAMSUNG_CE_WASHER_FREEZE_PREVENT: 'samsungce.washerFreezePrevent'>,
            <Capability.SAMSUNG_CE_WASHER_OPERATING_STATE: 'samsungce.washerOperatingState'>,
            <Capability.SAMSUNG_CE_WASHER_WASHING_TIME: 'samsungce.washerWashingTime'>,
            <Capability.SAMSUNG_CE_WASHER_WATER_LEVEL: 'samsungce.washerWaterLevel'>,
            <Capability.SAMSUNG_CE_WASHER_WATER_VALVE: 'samsungce.washerWaterValve'>,
            <Capability.SAMSUNG_CE_WELCOME_MESSAGE: 'samsungce.welcomeMessage'>,
            <Capability.SAMSUNG_CE_WATER_CONSUMPTION_REPORT: 'samsungce.waterConsumptionReport'>,
            <Capability.SAMSUNG_CE_QUICK_CONTROL: 'samsungce.quickControl'>,
            <Capability.SAMSUNG_CE_ENERGY_PLANNER: 'samsungce.energyPlanner'>,
            <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>,
            <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.WASHER: 'Washer'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.HCA_WASHER_MODE: 'hca.washerMode'>,
          ]),
          'id': 'hca.main',
          'label': 'hca.main',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'bc5c7ce0-b54d-2797-062b-b0da64c0ead5',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Washer',
      'label': 'Tvättmaskin',
      'location_id': 'eed0e167-e793-459b-80cb-a0b02e2b86c2',
      'name': '[washer] Samsung',
      'ocf': dict({
        'device_type': 'oic.d.washer',
        'firmware_version': 'DA_WM_TP2_20_COMMON_30230804',
        'hardware_version': 'MediaTek',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'DA_WM_TP2_20_COMMON|20260041|20010102001411F702A3020700000000',
        'name': '[washer] Samsung',
        'platform_os': 'TizenRT 2.0 + IPv6',
        'platform_version': 'DAWIT 2.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'DA-WM-WM-000001',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.AUDIO_VOLUME: 'audioVolume'>,
            <Capability.AUDIO_MUTE: 'audioMute'>,
            <Capability.TV_CHANNEL: 'tvChannel'>,
            <Capability.MEDIA_INPUT_SOURCE: 'mediaInputSource'>,
            <Capability.MEDIA_PLAYBACK: 'mediaPlayback'>,
            <Capability.MEDIA_TRACK_CONTROL: 'mediaTrackControl'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.CUSTOM_ERROR: 'custom.error'>,
            <Capability.CUSTOM_PICTURE_MODE: 'custom.picturemode'>,
            <Capability.CUSTOM_SOUND_MODE: 'custom.soundmode'>,
            <Capability.CUSTOM_ACCESSIBILITY: 'custom.accessibility'>,
            <Capability.CUSTOM_LAUNCH_APP: 'custom.launchapp'>,
            <Capability.CUSTOM_RECORDING: 'custom.recording'>,
            <Capability.CUSTOM_TV_SEARCH: 'custom.tvsearch'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.SAMSUNG_VD_REMOTE_CONTROL: 'samsungvd.remoteControl'>,
            <Capability.SAMSUNG_VD_AMBIENT: 'samsungvd.ambient'>,
            <Capability.SAMSUNG_VD_AMBIENT_CONTENT: 'samsungvd.ambientContent'>,
            <Capability.SAMSUNG_VD_MEDIA_INPUT_SOURCE: 'samsungvd.mediaInputSource'>,
            <Capability.SAMSUNG_VD_SUPPORTS_FEATURES: 'samsungvd.supportsFeatures'>,
            <Capability.SAMSUNG_IM_FIXED_FIND_NODE: 'samsungim.fixedFindNode'>,
            <Capability.SAMSUNG_VD_THING_STATUS: 'samsungvd.thingStatus'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.SAMSUNG_VD_FIRMWARE_VERSION: 'samsungvd.firmwareVersion'>,
            <Capability.SAMSUNG_VD_SUPPORTS_POWER_ON_BY_OCF: 'samsungvd.supportsPowerOnByOcf'>,
            <Capability.SAMSUNG_VD_DEVICE_CATEGORY: 'samsungvd.deviceCategory'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.TELEVISION: 'Television'>,
          'user_category': None,
        }),
      ]),
      'device_id': '70650a5c-3e57-c66b-8c43-d48d06852948',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF TV',
      'label': 'Samsung QN95AA 75 TV',
      'location_id': 'eed0e167-e793-459b-80cb-a0b02e2b86c2',
      'name': 'Samsung QN95AA 75 TV',
      'ocf': dict({
        'device_type': 'oic.d.tv',
        'firmware_version': 'T-NKM2DEUC-2220.9',
        'hardware_version': '',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'QE75QN95AATXXC',
        'name': 'Samsung QN95AA 75 TV',
        'platform_os': 'Tizen',
        'platform_version': '6.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'VD-STV-2021',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.AUDIO_VOLUME: 'audioVolume'>,
            <Capability.AUDIO_MUTE: 'audioMute'>,
            <Capability.AUDIO_TRACK_DATA: 'audioTrackData'>,
            <Capability.SAMSUNG_VD_AUDIO_INPUT_SOURCE: 'samsungvd.audioInputSource'>,
            <Capability.MEDIA_PLAYBACK: 'mediaPlayback'>,
            <Capability.AUDIO_NOTIFICATION: 'audioNotification'>,
            <Capability.SAMSUNG_VD_SOUND_FROM: 'samsungvd.soundFrom'>,
            <Capability.SAMSUNG_VD_THING_STATUS: 'samsungvd.thingStatus'>,
            <Capability.SAMSUNG_VD_AUDIO_GROUP_INFO: 'samsungvd.audioGroupInfo'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.NETWORK_AUDIO: 'NetworkAudio'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'afcecd0b-a633-baf2-c6b7-da74bf675a7d',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Network Audio Player',
      'label': 'Samsung Soundbar Q950T',
      'location_id': 'eed0e167-e793-459b-80cb-a0b02e2b86c2',
      'name': 'Samsung Soundbar Q950T',
      'ocf': dict({
        'device_type': 'oic.d.networkaudio',
        'firmware_version': 'HW-Q950TWWB-1022.0',
        'hardware_version': '',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'HW-Q950T',
        'name': 'Samsung Soundbar Q950T',
        'platform_os': 'Tizen',
        'platform_version': '5.5',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'VD-NetworkAudio-002S',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.AUDIO_VOLUME: 'audioVolume'>,
            <Capability.AUDIO_MUTE: 'audioMute'>,
            <Capability.TV_CHANNEL: 'tvChannel'>,
            <Capability.MEDIA_INPUT_SOURCE: 'mediaInputSource'>,
            <Capability.MEDIA_PLAYBACK: 'mediaPlayback'>,
            <Capability.MEDIA_TRACK_CONTROL: 'mediaTrackControl'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.CUSTOM_ERROR: 'custom.error'>,
            <Capability.CUSTOM_PICTURE_MODE: 'custom.picturemode'>,
            <Capability.CUSTOM_SOUND_MODE: 'custom.soundmode'>,
            <Capability.CUSTOM_ACCESSIBILITY: 'custom.accessibility'>,
            <Capability.CUSTOM_LAUNCH_APP: 'custom.launchapp'>,
            <Capability.CUSTOM_RECORDING: 'custom.recording'>,
            <Capability.CUSTOM_TV_SEARCH: 'custom.tvsearch'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.SAMSUNG_VD_REMOTE_CONTROL: 'samsungvd.remoteControl'>,
            <Capability.SAMSUNG_VD_AMBIENT: 'samsungvd.ambient'>,
            <Capability.SAMSUNG_VD_AMBIENT_CONTENT: 'samsungvd.ambientContent'>,
            <Capability.SAMSUNG_VD_MEDIA_INPUT_SOURCE: 'samsungvd.mediaInputSource'>,
            <Capability.SAMSUNG_VD_SUPPORTS_FEATURES: 'samsungvd.supportsFeatures'>,
            <Capability.SAMSUNG_IM_FIXED_FIND_NODE: 'samsungim.fixedFindNode'>,
            <Capability.SAMSUNG_VD_THING_STATUS: 'samsungvd.thingStatus'>,
            <Capability.SEC_DEVICE_CONNECTION_STATE: 'sec.deviceConnectionState'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.SAMSUNG_VD_FIRMWARE_VERSION: 'samsungvd.firmwareVersion'>,
            <Capability.SAMSUNG_VD_SUPPORTS_POWER_ON_BY_OCF: 'samsungvd.supportsPowerOnByOcf'>,
            <Capability.SAMSUNG_VD_DEVICE_CATEGORY: 'samsungvd.deviceCategory'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.TELEVISION: 'Television'>,
          'user_category': None,
        }),
      ]),
      'device_id': '5aeee631-b8f1-ba8d-5d11-58177181b32a',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF TV',
      'label': 'Samsung The Frame 55',
      'location_id': 'eed0e167-e793-459b-80cb-a0b02e2b86c2',
      'name': 'Samsung The Frame 55',
      'ocf': dict({
        'device_type': 'oic.d.tv',
        'firmware_version': 'T-PTMDEUC-1651.7|ST_ENERGY',
        'hardware_version': '',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'TQ55LS03BGUXXC',
        'name': 'Samsung The Frame 55',
        'platform_os': 'Tizen',
        'platform_version': '6.5',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'VD-STV-2022',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.BRIDGE: 'bridge'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.HUB: 'Hub'>,
          'user_category': None,
        }),
      ]),
      'device_id': '2f7f7d2b-e683-48ae-86f7-e57df6a0bce2',
      'device_manufacturer_code': None,
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Hubb',
      'location_id': 'eed0e167-e793-459b-80cb-a0b02e2b86c2',
      'name': 'SmartThings v3 Hub',
      'ocf': None,
      'type': <DeviceType.HUB: 'HUB'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.AUDIO_VOLUME: 'audioVolume'>,
            <Capability.AUDIO_MUTE: 'audioMute'>,
            <Capability.TV_CHANNEL: 'tvChannel'>,
            <Capability.MEDIA_INPUT_SOURCE: 'mediaInputSource'>,
            <Capability.MEDIA_PLAYBACK: 'mediaPlayback'>,
            <Capability.MEDIA_TRACK_CONTROL: 'mediaTrackControl'>,
            <Capability.CUSTOM_ERROR: 'custom.error'>,
            <Capability.CUSTOM_PICTURE_MODE: 'custom.picturemode'>,
            <Capability.CUSTOM_SOUND_MODE: 'custom.soundmode'>,
            <Capability.CUSTOM_ACCESSIBILITY: 'custom.accessibility'>,
            <Capability.CUSTOM_LAUNCH_APP: 'custom.launchapp'>,
            <Capability.CUSTOM_RECORDING: 'custom.recording'>,
            <Capability.CUSTOM_TV_SEARCH: 'custom.tvsearch'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.SAMSUNG_VD_REMOTE_CONTROL: 'samsungvd.remoteControl'>,
            <Capability.SAMSUNG_VD_AMBIENT: 'samsungvd.ambient'>,
            <Capability.SAMSUNG_VD_AMBIENT_CONTENT: 'samsungvd.ambientContent'>,
            <Capability.SAMSUNG_VD_AMBIENT18: 'samsungvd.ambient18'>,
            <Capability.SAMSUNG_VD_MEDIA_INPUT_SOURCE: 'samsungvd.mediaInputSource'>,
            <Capability.SAMSUNG_VD_DEVICE_CATEGORY: 'samsungvd.deviceCategory'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.SAMSUNG_VD_FIRMWARE_VERSION: 'samsungvd.firmwareVersion'>,
            <Capability.SAMSUNG_VD_SUPPORTS_POWER_ON_BY_OCF: 'samsungvd.supportsPowerOnByOcf'>,
            <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.TELEVISION: 'Television'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'a106da6d-2981-4c39-84c4-5d5b75b4784c',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF TV',
      'label': 'Samsung Q70 Series',
      'location_id': 'eed0e167-e793-459b-80cb-a0b02e2b86c2',
      'name': '[TV] Samsung Q70 Series (65)',
      'ocf': dict({
        'device_type': 'oic.d.tv',
        'firmware_version': 'T-MSMDEUC-1420.0',
        'hardware_version': '0-0',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'QE65Q70RATXXC',
        'name': '[TV] Samsung Q70 Series (65)',
        'platform_os': '4.1.10',
        'platform_version': 'Tizen 5.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'VD-STV_2018_K',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.OVEN_MODE: 'ovenMode'>,
            <Capability.OVEN_OPERATING_STATE: 'ovenOperatingState'>,
            <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>,
            <Capability.OVEN_SETPOINT: 'ovenSetpoint'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
            <Capability.SAMSUNG_CE_OVEN_MODE: 'samsungce.ovenMode'>,
            <Capability.SAMSUNG_CE_OVEN_OPERATING_STATE: 'samsungce.ovenOperatingState'>,
            <Capability.SAMSUNG_CE_DOOR_STATE: 'samsungce.doorState'>,
            <Capability.SAMSUNG_CE_MEAT_PROBE: 'samsungce.meatProbe'>,
            <Capability.SAMSUNG_CE_LAMP: 'samsungce.lamp'>,
            <Capability.SAMSUNG_CE_DEFINED_RECIPE: 'samsungce.definedRecipe'>,
            <Capability.SAMSUNG_CE_KITCHEN_DEVICE_IDENTIFICATION: 'samsungce.kitchenDeviceIdentification'>,
            <Capability.SAMSUNG_CE_KITCHEN_MODE_SPECIFICATION: 'samsungce.kitchenModeSpecification'>,
            <Capability.SAMSUNG_CE_KITCHEN_DEVICE_DEFAULTS: 'samsungce.kitchenDeviceDefaults'>,
            <Capability.SAMSUNG_CE_KIDS_LOCK: 'samsungce.kidsLock'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'main',
          'label': 'Oven',
          'manufacturer_category': <Category.OVEN: 'Oven'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.OVEN_MODE: 'ovenMode'>,
            <Capability.OVEN_OPERATING_STATE: 'ovenOperatingState'>,
            <Capability.OVEN_SETPOINT: 'ovenSetpoint'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.SAMSUNG_CE_OVEN_MODE: 'samsungce.ovenMode'>,
            <Capability.SAMSUNG_CE_DEFINED_RECIPE: 'samsungce.definedRecipe'>,
            <Capability.SAMSUNG_CE_OVEN_OPERATING_STATE: 'samsungce.ovenOperatingState'>,
            <Capability.SAMSUNG_CE_KITCHEN_DEVICE_DEFAULTS: 'samsungce.kitchenDeviceDefaults'>,
            <Capability.CUSTOM_OVEN_CAVITY_STATUS: 'custom.ovenCavityStatus'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'cavity-01',
          'label': '1',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'e3ffcb5a-294b-c68a-438d-9e27bb7660a0',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Oven',
      'label': 'Ugn',
      'location_id': 'eed0e167-e793-459b-80cb-a0b02e2b86c2',
      'name': '[oven] Samsung',
      'ocf': dict({
        'device_type': 'oic.d.oven',
        'firmware_version': 'ARTIK051_GB_WO_003_40200913',
        'hardware_version': '1.0',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'ARTIK051_GB_WO_003|40423141|50030018001211510200000000000000',
        'name': '[oven] Samsung',
        'platform_os': 'TizenRT2.0',
        'platform_version': '0.1.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'DA-KS-WALLOVEN-000003',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.MEDIA_PLAYBACK: 'mediaPlayback'>,
            <Capability.MEDIA_GROUP: 'mediaGroup'>,
            <Capability.MEDIA_PRESETS: 'mediaPresets'>,
            <Capability.MEDIA_TRACK_CONTROL: 'mediaTrackControl'>,
            <Capability.AUDIO_MUTE: 'audioMute'>,
            <Capability.AUDIO_NOTIFICATION: 'audioNotification'>,
            <Capability.AUDIO_TRACK_DATA: 'audioTrackData'>,
            <Capability.AUDIO_VOLUME: 'audioVolume'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.SPEAKER: 'Speaker'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'c85fced9-c474-4a47-93c2-037cc7829536',
      'device_manufacturer_code': 'Sonos',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Elliots Rum',
      'location_id': 'eed0e167-e793-459b-80cb-a0b02e2b86c2',
      'name': 'sonos-player',
      'ocf': None,
      'type': <DeviceType.LAN: 'LAN'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.OCF: 'ocf'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.REFRIGERATION: 'refrigeration'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>,
            <Capability.CUSTOM_DEODOR_FILTER: 'custom.deodorFilter'>,
            <Capability.CUSTOM_DUST_FILTER: 'custom.dustFilter'>,
            <Capability.CUSTOM_DEVICE_REPORT_STATE_CONFIGURATION: 'custom.deviceReportStateConfiguration'>,
            <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>,
            <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_DISABLED_COMPONENTS: 'custom.disabledComponents'>,
            <Capability.CUSTOM_WATER_FILTER: 'custom.waterFilter'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
            <Capability.SAMSUNG_CE_FRIDGE_VACATION_MODE: 'samsungce.fridgeVacationMode'>,
            <Capability.SAMSUNG_CE_POWER_COOL: 'samsungce.powerCool'>,
            <Capability.SAMSUNG_CE_POWER_FREEZE: 'samsungce.powerFreeze'>,
            <Capability.SAMSUNG_CE_SABBATH_MODE: 'samsungce.sabbathMode'>,
            <Capability.SAMSUNG_CE_SELF_CHECK: 'samsungce.selfCheck'>,
            <Capability.SAMSUNG_CE_VIEW_INSIDE: 'samsungce.viewInside'>,
            <Capability.SAMSUNG_CE_FRIDGE_WELCOME_LIGHTING: 'samsungce.fridgeWelcomeLighting'>,
            <Capability.SAMSUNG_CE_QUICK_CONTROL: 'samsungce.quickControl'>,
            <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>,
            <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.REFRIGERATOR: 'Refrigerator'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>,
            <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>,
            <Capability.SAMSUNG_CE_TEMPERATURE_SETTING: 'samsungce.temperatureSetting'>,
            <Capability.SAMSUNG_CE_FREEZER_CONVERT_MODE: 'samsungce.freezerConvertMode'>,
            <Capability.SAMSUNG_CE_UNAVAILABLE_CAPABILITIES: 'samsungce.unavailableCapabilities'>,
          ]),
          'id': 'freezer',
          'label': 'freezer',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>,
            <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>,
            <Capability.SAMSUNG_CE_TEMPERATURE_SETTING: 'samsungce.temperatureSetting'>,
            <Capability.SAMSUNG_CE_UNAVAILABLE_CAPABILITIES: 'samsungce.unavailableCapabilities'>,
          ]),
          'id': 'cooler',
          'label': 'cooler',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>,
          ]),
          'id': 'cvroom',
          'label': 'cvroom',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>,
            <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>,
            <Capability.SAMSUNG_CE_TEMPERATURE_SETTING: 'samsungce.temperatureSetting'>,
            <Capability.SAMSUNG_CE_FREEZER_CONVERT_MODE: 'samsungce.freezerConvertMode'>,
            <Capability.SAMSUNG_CE_UNAVAILABLE_CAPABILITIES: 'samsungce.unavailableCapabilities'>,
          ]),
          'id': 'onedoor',
          'label': 'onedoor',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'icemaker',
          'label': 'icemaker',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'icemaker-02',
          'label': 'icemaker-02',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'icemaker-03',
          'label': 'icemaker-03',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.SAMSUNG_CE_WEIGHT_MEASUREMENT: 'samsungce.weightMeasurement'>,
            <Capability.SAMSUNG_CE_WEIGHT_MEASUREMENT_CALIBRATION: 'samsungce.weightMeasurementCalibration'>,
            <Capability.SAMSUNG_CE_CONNECTION_STATE: 'samsungce.connectionState'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'scale-10',
          'label': 'scale-10',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.SAMSUNG_CE_WEIGHT_MEASUREMENT: 'samsungce.weightMeasurement'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'scale-11',
          'label': 'scale-11',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.SAMSUNG_CE_FRIDGE_PANTRY_INFO: 'samsungce.fridgePantryInfo'>,
            <Capability.SAMSUNG_CE_FRIDGE_PANTRY_MODE: 'samsungce.fridgePantryMode'>,
            <Capability.SAMSUNG_CE_MEAT_AGING: 'samsungce.meatAging'>,
            <Capability.SAMSUNG_CE_FOOD_DEFROST: 'samsungce.foodDefrost'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'pantry-01',
          'label': 'pantry-01',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.SAMSUNG_CE_FRIDGE_PANTRY_INFO: 'samsungce.fridgePantryInfo'>,
            <Capability.SAMSUNG_CE_FRIDGE_PANTRY_MODE: 'samsungce.fridgePantryMode'>,
            <Capability.SAMSUNG_CE_MEAT_AGING: 'samsungce.meatAging'>,
            <Capability.SAMSUNG_CE_FOOD_DEFROST: 'samsungce.foodDefrost'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'pantry-02',
          'label': 'pantry-02',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'aafdee8c-4ede-2ed7-9d29-d596b84d65aa',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Refrigerator',
      'label': 'Kylskåp',
      'location_id': 'eed0e167-e793-459b-80cb-a0b02e2b86c2',
      'name': 'Samsung-Refrigerator',
      'ocf': dict({
        'device_type': 'oic.d.refrigerator',
        'firmware_version': 'A-RFWW-TP1-24-T4-COM_20240908',
        'hardware_version': 'Realtek',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'TP1X_REF_21K|00175041|00040141041811304104000020010000',
        'name': 'Samsung-Refrigerator',
        'platform_os': 'TizenRT 4.0',
        'platform_version': 'SYSTEM 2.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'DA-REF-NORMAL-01011',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>,
            <Capability.DRYER_OPERATING_STATE: 'dryerOperatingState'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_DRYER_DRY_LEVEL: 'custom.dryerDryLevel'>,
            <Capability.CUSTOM_DRYER_WRINKLE_PREVENT: 'custom.dryerWrinklePrevent'>,
            <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>,
            <Capability.CUSTOM_JOB_BEGINNING_STATUS: 'custom.jobBeginningStatus'>,
            <Capability.CUSTOM_SUPPORTED_OPTIONS: 'custom.supportedOptions'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.SAMSUNG_CE_DETERGENT_ORDER: 'samsungce.detergentOrder'>,
            <Capability.SAMSUNG_CE_DETERGENT_STATE: 'samsungce.detergentState'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_DONGLE_SOFTWARE_INSTALLATION: 'samsungce.dongleSoftwareInstallation'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
            <Capability.SAMSUNG_CE_DRYER_AUTO_CYCLE_LINK: 'samsungce.dryerAutoCycleLink'>,
            <Capability.SAMSUNG_CE_DRYER_CYCLE: 'samsungce.dryerCycle'>,
            <Capability.SAMSUNG_CE_DRYER_CYCLE_PRESET: 'samsungce.dryerCyclePreset'>,
            <Capability.SAMSUNG_CE_DRYER_DELAY_END: 'samsungce.dryerDelayEnd'>,
            <Capability.SAMSUNG_CE_DRYER_DRYING_TEMPERATURE: 'samsungce.dryerDryingTemperature'>,
            <Capability.SAMSUNG_CE_DRYER_DRYING_TIME: 'samsungce.dryerDryingTime'>,
            <Capability.SAMSUNG_CE_DRYER_FREEZE_PREVENT: 'samsungce.dryerFreezePrevent'>,
            <Capability.SAMSUNG_CE_DRYER_OPERATING_STATE: 'samsungce.dryerOperatingState'>,
            <Capability.SAMSUNG_CE_KIDS_LOCK: 'samsungce.kidsLock'>,
            <Capability.SAMSUNG_CE_WELCOME_MESSAGE: 'samsungce.welcomeMessage'>,
            <Capability.SAMSUNG_CE_QUICK_CONTROL: 'samsungce.quickControl'>,
            <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>,
            <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.DRYER: 'Dryer'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.HCA_DRYER_MODE: 'hca.dryerMode'>,
          ]),
          'id': 'hca.main',
          'label': 'hca.main',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'eb6afef1-f59a-247f-95e2-7387a58632e1',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Dryer',
      'label': 'Torktumlare',
      'location_id': 'eed0e167-e793-459b-80cb-a0b02e2b86c2',
      'name': '[dryer] Samsung',
      'ocf': dict({
        'device_type': 'oic.d.dryer',
        'firmware_version': 'DA_WM_TP2_20_COMMON_30230804',
        'hardware_version': 'MediaTek',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'DA_WM_TP2_20_COMMON|20262941|300101020014110002A3030700000000',
        'name': '[dryer] Samsung',
        'platform_os': 'TizenRT 2.0 + IPv6',
        'platform_version': 'DAWIT 2.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'DA-WM-WD-000001',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
  ])
# ---
# name: test_fetching_devices[devices_15]
  list([
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.OCF: 'ocf'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.REFRIGERATION: 'refrigeration'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>,
            <Capability.CUSTOM_DEODOR_FILTER: 'custom.deodorFilter'>,
            <Capability.CUSTOM_DUST_FILTER: 'custom.dustFilter'>,
            <Capability.CUSTOM_DEVICE_REPORT_STATE_CONFIGURATION: 'custom.deviceReportStateConfiguration'>,
            <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>,
            <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_DISABLED_COMPONENTS: 'custom.disabledComponents'>,
            <Capability.CUSTOM_WATER_FILTER: 'custom.waterFilter'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
            <Capability.SAMSUNG_CE_FRIDGE_VACATION_MODE: 'samsungce.fridgeVacationMode'>,
            <Capability.SAMSUNG_CE_POWER_COOL: 'samsungce.powerCool'>,
            <Capability.SAMSUNG_CE_POWER_FREEZE: 'samsungce.powerFreeze'>,
            <Capability.SAMSUNG_CE_SABBATH_MODE: 'samsungce.sabbathMode'>,
            <Capability.SAMSUNG_CE_SELF_CHECK: 'samsungce.selfCheck'>,
            <Capability.SAMSUNG_CE_VIEW_INSIDE: 'samsungce.viewInside'>,
            <Capability.SAMSUNG_CE_FRIDGE_WELCOME_LIGHTING: 'samsungce.fridgeWelcomeLighting'>,
            <Capability.SAMSUNG_CE_QUICK_CONTROL: 'samsungce.quickControl'>,
            <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>,
            <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.REFRIGERATOR: 'Refrigerator'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>,
            <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>,
            <Capability.SAMSUNG_CE_TEMPERATURE_SETTING: 'samsungce.temperatureSetting'>,
            <Capability.SAMSUNG_CE_FREEZER_CONVERT_MODE: 'samsungce.freezerConvertMode'>,
            <Capability.SAMSUNG_CE_UNAVAILABLE_CAPABILITIES: 'samsungce.unavailableCapabilities'>,
          ]),
          'id': 'freezer',
          'label': 'freezer',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>,
            <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>,
            <Capability.SAMSUNG_CE_TEMPERATURE_SETTING: 'samsungce.temperatureSetting'>,
            <Capability.SAMSUNG_CE_UNAVAILABLE_CAPABILITIES: 'samsungce.unavailableCapabilities'>,
          ]),
          'id': 'cooler',
          'label': 'cooler',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>,
          ]),
          'id': 'cvroom',
          'label': 'cvroom',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>,
            <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>,
            <Capability.SAMSUNG_CE_TEMPERATURE_SETTING: 'samsungce.temperatureSetting'>,
            <Capability.SAMSUNG_CE_FREEZER_CONVERT_MODE: 'samsungce.freezerConvertMode'>,
            <Capability.SAMSUNG_CE_UNAVAILABLE_CAPABILITIES: 'samsungce.unavailableCapabilities'>,
          ]),
          'id': 'onedoor',
          'label': 'onedoor',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'icemaker',
          'label': 'icemaker',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'icemaker-02',
          'label': 'icemaker-02',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'icemaker-03',
          'label': 'icemaker-03',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.SAMSUNG_CE_WEIGHT_MEASUREMENT: 'samsungce.weightMeasurement'>,
            <Capability.SAMSUNG_CE_WEIGHT_MEASUREMENT_CALIBRATION: 'samsungce.weightMeasurementCalibration'>,
            <Capability.SAMSUNG_CE_CONNECTION_STATE: 'samsungce.connectionState'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'scale-10',
          'label': 'scale-10',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.SAMSUNG_CE_WEIGHT_MEASUREMENT: 'samsungce.weightMeasurement'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'scale-11',
          'label': 'scale-11',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.SAMSUNG_CE_FRIDGE_PANTRY_INFO: 'samsungce.fridgePantryInfo'>,
            <Capability.SAMSUNG_CE_FRIDGE_PANTRY_MODE: 'samsungce.fridgePantryMode'>,
            <Capability.SAMSUNG_CE_MEAT_AGING: 'samsungce.meatAging'>,
            <Capability.SAMSUNG_CE_FOOD_DEFROST: 'samsungce.foodDefrost'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'pantry-01',
          'label': 'pantry-01',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.SAMSUNG_CE_FRIDGE_PANTRY_INFO: 'samsungce.fridgePantryInfo'>,
            <Capability.SAMSUNG_CE_FRIDGE_PANTRY_MODE: 'samsungce.fridgePantryMode'>,
            <Capability.SAMSUNG_CE_MEAT_AGING: 'samsungce.meatAging'>,
            <Capability.SAMSUNG_CE_FOOD_DEFROST: 'samsungce.foodDefrost'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'pantry-02',
          'label': 'pantry-02',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
      ]),
      'device_id': '8d2d636b-8e36-e97b-5628-5f2fa27bc344',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Refrigerator',
      'label': 'Refrigerator',
      'location_id': 'df59873c-4e2c-43ba-bcd4-ade4efb0504a',
      'name': 'Samsung-Refrigerator',
      'ocf': dict({
        'device_type': 'oic.d.refrigerator',
        'firmware_version': 'A-RFWW-TP1-22-REV1_20240912',
        'hardware_version': 'Realtek',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'TP1X_REF_21K|00156941|00050126001611304100000030010000',
        'name': 'Samsung-Refrigerator',
        'platform_os': 'TizenRT 3.1',
        'platform_version': 'DAWIT 2.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'DA-REF-NORMAL-01011',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.EXECUTE: 'execute'>,
            <Capability.OCF: 'ocf'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>,
            <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.WASHER_OPERATING_STATE: 'washerOperatingState'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_DRYER_DRY_LEVEL: 'custom.dryerDryLevel'>,
            <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>,
            <Capability.CUSTOM_JOB_BEGINNING_STATUS: 'custom.jobBeginningStatus'>,
            <Capability.CUSTOM_SUPPORTED_OPTIONS: 'custom.supportedOptions'>,
            <Capability.CUSTOM_WASHER_AUTO_DETERGENT: 'custom.washerAutoDetergent'>,
            <Capability.CUSTOM_WASHER_AUTO_SOFTENER: 'custom.washerAutoSoftener'>,
            <Capability.CUSTOM_WASHER_RINSE_CYCLES: 'custom.washerRinseCycles'>,
            <Capability.CUSTOM_WASHER_SOIL_LEVEL: 'custom.washerSoilLevel'>,
            <Capability.CUSTOM_WASHER_SPIN_LEVEL: 'custom.washerSpinLevel'>,
            <Capability.CUSTOM_WASHER_WATER_TEMPERATURE: 'custom.washerWaterTemperature'>,
            <Capability.SAMSUNG_CE_AUTO_DISPENSE_DETERGENT: 'samsungce.autoDispenseDetergent'>,
            <Capability.SAMSUNG_CE_AUTO_DISPENSE_SOFTENER: 'samsungce.autoDispenseSoftener'>,
            <Capability.SAMSUNG_CE_DETERGENT_ORDER: 'samsungce.detergentOrder'>,
            <Capability.SAMSUNG_CE_DETERGENT_STATE: 'samsungce.detergentState'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_DONGLE_SOFTWARE_INSTALLATION: 'samsungce.dongleSoftwareInstallation'>,
            <Capability.SAMSUNG_CE_DETERGENT_AUTO_REPLENISHMENT: 'samsungce.detergentAutoReplenishment'>,
            <Capability.SAMSUNG_CE_SOFTENER_AUTO_REPLENISHMENT: 'samsungce.softenerAutoReplenishment'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.SAMSUNG_CE_KIDS_LOCK: 'samsungce.kidsLock'>,
            <Capability.SAMSUNG_CE_SOFTENER_ORDER: 'samsungce.softenerOrder'>,
            <Capability.SAMSUNG_CE_SOFTENER_STATE: 'samsungce.softenerState'>,
            <Capability.SAMSUNG_CE_WASHER_BUBBLE_SOAK: 'samsungce.washerBubbleSoak'>,
            <Capability.SAMSUNG_CE_WASHER_CYCLE: 'samsungce.washerCycle'>,
            <Capability.SAMSUNG_CE_WASHER_CYCLE_PRESET: 'samsungce.washerCyclePreset'>,
            <Capability.SAMSUNG_CE_WASHER_DELAY_END: 'samsungce.washerDelayEnd'>,
            <Capability.SAMSUNG_CE_WASHER_FREEZE_PREVENT: 'samsungce.washerFreezePrevent'>,
            <Capability.SAMSUNG_CE_WASHER_OPERATING_STATE: 'samsungce.washerOperatingState'>,
            <Capability.SAMSUNG_CE_WASHER_WASHING_TIME: 'samsungce.washerWashingTime'>,
            <Capability.SAMSUNG_CE_WASHER_WATER_LEVEL: 'samsungce.washerWaterLevel'>,
            <Capability.SAMSUNG_CE_WASHER_WATER_VALVE: 'samsungce.washerWaterValve'>,
            <Capability.SAMSUNG_CE_WELCOME_MESSAGE: 'samsungce.welcomeMessage'>,
            <Capability.SAMSUNG_CE_WATER_CONSUMPTION_REPORT: 'samsungce.waterConsumptionReport'>,
            <Capability.SAMSUNG_CE_QUICK_CONTROL: 'samsungce.quickControl'>,
            <Capability.SAMSUNG_CE_ENERGY_PLANNER: 'samsungce.energyPlanner'>,
            <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>,
            <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.WASHER: 'Washer'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.HCA_WASHER_MODE: 'hca.washerMode'>,
          ]),
          'id': 'hca.main',
          'label': 'hca.main',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
      ]),
      'device_id': '21718ac8-8a17-e7cf-2f7e-8aa439f203dd',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Washer',
      'label': 'Washer',
      'location_id': 'df59873c-4e2c-43ba-bcd4-ade4efb0504a',
      'name': '[washer] Samsung',
      'ocf': dict({
        'device_type': 'oic.d.washer',
        'firmware_version': 'DA_WM_TP2_20_COMMON_30230804',
        'hardware_version': 'MediaTek',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'DA_WM_TP2_20_COMMON|20260041|20010002011411A302A3020700000000',
        'name': '[washer] Samsung',
        'platform_os': 'TizenRT 2.0 + IPv6',
        'platform_version': 'DAWIT 2.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'DA-WM-WM-000001',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': None,
        }),
      ]),
      'device_id': '6838e637-4abf-4df2-85ad-67af96e549fb',
      'device_manufacturer_code': None,
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Sleeping State',
      'location_id': 'df59873c-4e2c-43ba-bcd4-ade4efb0504a',
      'name': 'Sleeping State',
      'ocf': None,
      'type': <DeviceType.VIRTUAL: 'VIRTUAL'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>,
            <Capability.DRYER_OPERATING_STATE: 'dryerOperatingState'>,
            <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.CUSTOM_STEAM_CLOSET_OPERATING_STATE: 'custom.steamClosetOperatingState'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>,
            <Capability.CUSTOM_STEAM_CLOSET_WRINKLE_PREVENT: 'custom.steamClosetWrinklePrevent'>,
            <Capability.CUSTOM_JOB_BEGINNING_STATUS: 'custom.jobBeginningStatus'>,
            <Capability.CUSTOM_SUPPORTED_OPTIONS: 'custom.supportedOptions'>,
            <Capability.CUSTOM_VERY_FINE_DUST_FILTER: 'custom.veryFineDustFilter'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.SAMSUNG_CE_STEAM_CLOSET_DELAY_END: 'samsungce.steamClosetDelayEnd'>,
            <Capability.SAMSUNG_CE_STEAM_CLOSET_KEEP_FRESH_MODE: 'samsungce.steamClosetKeepFreshMode'>,
            <Capability.SAMSUNG_CE_STEAM_CLOSET_SANITIZE_MODE: 'samsungce.steamClosetSanitizeMode'>,
            <Capability.SAMSUNG_CE_STEAM_CLOSET_AUTO_CYCLE_LINK: 'samsungce.steamClosetAutoCycleLink'>,
            <Capability.SAMSUNG_CE_STEAM_CLOSET_CYCLE: 'samsungce.steamClosetCycle'>,
            <Capability.SAMSUNG_CE_STEAM_CLOSET_CYCLE_PRESET: 'samsungce.steamClosetCyclePreset'>,
            <Capability.SAMSUNG_CE_KIDS_LOCK: 'samsungce.kidsLock'>,
            <Capability.SAMSUNG_CE_WELCOME_MESSAGE: 'samsungce.welcomeMessage'>,
            <Capability.SAMSUNG_CE_QUICK_CONTROL: 'samsungce.quickControl'>,
            <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>,
            <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.CLOTHING_CARE_MACHINE: 'ClothingCareMachine'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'b93211bf-9d96-bd21-3b2f-964fcc87f5cc',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Steam Closet',
      'label': 'AirDresser',
      'location_id': 'df59873c-4e2c-43ba-bcd4-ade4efb0504a',
      'name': '[airdresser] Samsung',
      'ocf': dict({
        'device_type': 'x.com.st.d.steamcloset',
        'firmware_version': 'DA_DF_TP2_20_COMMON_30230807',
        'hardware_version': 'MediaTek',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'DA_DF_TP2_20_COMMON|20299141|3801010200151107020100FF00000000',
        'name': '[airdresser] Samsung',
        'platform_os': 'TizenRT 2.0 + IPv6',
        'platform_version': 'DAWIT 2.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'DA-WM-SC-000001',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.SOUND_DETECTION: 'soundDetection'>,
            <Capability.SAMSUNG_VD_SOUND_DETECTION: 'samsungvd.soundDetection'>,
            <Capability.SAMSUNG_VD_DEVICE_CATEGORY: 'samsungvd.deviceCategory'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.SOUND_SENSOR: 'SoundSensor'>,
          'user_category': None,
        }),
      ]),
      'device_id': '930eced7-366d-4e6d-b2f2-e3a80f3d5a0c',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'x.com.st.d.sensor.sound',
      'label': 'Sound Sensor - 55" The Frame',
      'location_id': 'df59873c-4e2c-43ba-bcd4-ade4efb0504a',
      'name': 'VD-Sensor.Sound-2023',
      'ocf': dict({
        'device_type': 'x.com.st.d.sensor.sound',
        'firmware_version': 'latest',
        'hardware_version': '',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'QE55LS03DAUXXN',
        'name': 'Sound Sensor - 55 The Frame',
        'platform_os': 'Tizen',
        'platform_version': '8.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'VD-Sensor.Sound-2023',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.AUDIO_VOLUME: 'audioVolume'>,
            <Capability.AUDIO_MUTE: 'audioMute'>,
            <Capability.TV_CHANNEL: 'tvChannel'>,
            <Capability.MEDIA_INPUT_SOURCE: 'mediaInputSource'>,
            <Capability.MEDIA_PLAYBACK: 'mediaPlayback'>,
            <Capability.MEDIA_TRACK_CONTROL: 'mediaTrackControl'>,
            <Capability.CUSTOM_ERROR: 'custom.error'>,
            <Capability.SAMSUNG_VD_PICTURE_MODE: 'samsungvd.pictureMode'>,
            <Capability.SAMSUNG_VD_SOUND_MODE: 'samsungvd.soundMode'>,
            <Capability.CUSTOM_ACCESSIBILITY: 'custom.accessibility'>,
            <Capability.CUSTOM_LAUNCH_APP: 'custom.launchapp'>,
            <Capability.CUSTOM_RECORDING: 'custom.recording'>,
            <Capability.CUSTOM_TV_SEARCH: 'custom.tvsearch'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.SAMSUNG_VD_REMOTE_CONTROL: 'samsungvd.remoteControl'>,
            <Capability.SAMSUNG_VD_AMBIENT: 'samsungvd.ambient'>,
            <Capability.SAMSUNG_VD_AMBIENT_CONTENT: 'samsungvd.ambientContent'>,
            <Capability.SAMSUNG_VD_MEDIA_INPUT_SOURCE: 'samsungvd.mediaInputSource'>,
            <Capability.SAMSUNG_VD_SUPPORTS_FEATURES: 'samsungvd.supportsFeatures'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.SAMSUNG_VD_FIRMWARE_VERSION: 'samsungvd.firmwareVersion'>,
            <Capability.SAMSUNG_VD_SUPPORTS_POWER_ON_BY_OCF: 'samsungvd.supportsPowerOnByOcf'>,
            <Capability.SAMSUNG_VD_DEVICE_CATEGORY: 'samsungvd.deviceCategory'>,
            <Capability.SAMSUNG_VD_THING_STATUS: 'samsungvd.thingStatus'>,
            <Capability.SEC_DEVICE_CONNECTION_STATE: 'sec.deviceConnectionState'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>,
            <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>,
            <Capability.SAMSUNG_IM_FIXED_FIND_NODE: 'samsungim.fixedFindNode'>,
            <Capability.SAMSUNG_VD_LIGHT_CONTROL: 'samsungvd.lightControl'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.TELEVISION: 'Television'>,
          'user_category': None,
        }),
      ]),
      'device_id': '425ac77a-f7c9-a62d-ff12-cdad144952e3',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF TV',
      'label': '55 The Frame',
      'location_id': 'df59873c-4e2c-43ba-bcd4-ade4efb0504a',
      'name': '55" The Frame',
      'ocf': dict({
        'device_type': 'oic.d.tv',
        'firmware_version': 'T-PTMDDEUC-1201.8|ST_ENERGY',
        'hardware_version': '',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'QE55LS03DAUXXN',
        'name': '55 The Frame',
        'platform_os': 'Tizen',
        'platform_version': '8.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'VD-FRAME-2024',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.RELATIVE_BRIGHTNESS: 'relativeBrightness'>,
            <Capability.SAMSUNG_VD_DEVICE_CATEGORY: 'samsungvd.deviceCategory'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.LIGHT_SENSOR: 'LightSensor'>,
          'user_category': None,
        }),
      ]),
      'device_id': '5cc1c096-98b9-460c-8f1c-1045509ec605',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'x.com.st.d.sensor.light',
      'label': 'Light Sensor - 55" The Frame',
      'location_id': 'df59873c-4e2c-43ba-bcd4-ade4efb0504a',
      'name': 'VD-Sensor.Light-2023',
      'ocf': dict({
        'device_type': 'x.com.st.d.sensor.light',
        'firmware_version': 'latest',
        'hardware_version': '',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'QE55LS03DAUXXN',
        'name': 'Light Sensor - 55 The Frame',
        'platform_os': 'Tizen',
        'platform_version': '8.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'VD-Sensor.Light-2023',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.AUDIO_VOLUME: 'audioVolume'>,
            <Capability.AUDIO_MUTE: 'audioMute'>,
            <Capability.SAMSUNG_VD_AUDIO_INPUT_SOURCE: 'samsungvd.audioInputSource'>,
            <Capability.AUDIO_NOTIFICATION: 'audioNotification'>,
            <Capability.SAMSUNG_VD_SOUND_FROM: 'samsungvd.soundFrom'>,
            <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>,
            <Capability.SAMSUNG_VD_THING_STATUS: 'samsungvd.thingStatus'>,
            <Capability.SAMSUNG_VD_SUPPORTS_FEATURES: 'samsungvd.supportsFeatures'>,
            <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>,
            <Capability.SAMSUNG_VD_AUDIO_GROUP_INFO: 'samsungvd.audioGroupInfo'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.NETWORK_AUDIO: 'NetworkAudio'>,
          'user_category': None,
        }),
      ]),
      'device_id': '9985fbfa-777a-4fae-a637-6148f41b3c63',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Network Audio Player',
      'label': 'Ultra Slim Soundbar',
      'location_id': 'df59873c-4e2c-43ba-bcd4-ade4efb0504a',
      'name': 'Ultra Slim Soundbar',
      'ocf': dict({
        'device_type': 'oic.d.networkaudio',
        'firmware_version': 'SAT-MT8532D24WWC-1016.0',
        'hardware_version': '',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'HW-S701D',
        'name': 'Ultra Slim Soundbar',
        'platform_os': 'Tizen',
        'platform_version': '8.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'VD-NetworkAudio-003S',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
  ])
# ---
# name: test_fetching_devices[devices_2]
  list([
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.LIGHT: 'Light'>,
          'user_category': None,
        }),
      ]),
      'device_id': '440063de-a200-40b5-8a6b-f3399eaa0370',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Bathroom spot',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-color-temperature-bulb',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.COLOR_CONTROL: 'colorControl'>,
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SAMSUNG_IM_HUE_SYNC_MODE: 'samsungim.hueSyncMode'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.LIGHT: 'Light'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'cb958955-b015-498c-9e62-fc0c51abd054',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Standing light',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-rgbw-color-bulb',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.LIGHT: 'Light'>,
          'user_category': None,
        }),
      ]),
      'device_id': '0b2ed6c7-dc39-42fd-ab64-8f1c75c1fad0',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Hue ambiance spot 3',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-color-temperature-bulb',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.WINDOW_SHADE: 'windowShade'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.BLIND: 'Blind'>,
          'user_category': None,
        }),
      ]),
      'device_id': '571af102-15db-4030-b76b-245a691f74a5',
      'device_manufacturer_code': 'WonderLabs Company',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Curtain 1A',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'c2c-shade',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.WINDOW_SHADE: 'windowShade'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.BLIND: 'Blind'>,
          'user_category': None,
        }),
      ]),
      'device_id': '42efbc29-b283-4d01-a343-f0963ae7dba4',
      'device_manufacturer_code': 'WonderLabs Company',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Curtain 1E',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'c2c-shade',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.LIGHT: 'Light'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'a456cbd5-0503-46be-acc4-54e189dc6ff4',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Sink',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-color-temperature-bulb',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.MOTION_SENSOR: 'motionSensor'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.MOTION_SENSOR: 'MotionSensor'>,
          'user_category': None,
        }),
      ]),
      'device_id': '08da6244-b3ad-4c45-b005-d8572bd9138f',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Hue motion sensor 1',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'c2c-motion-2',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.LIGHT: 'Light'>,
          'user_category': None,
        }),
      ]),
      'device_id': '297b909c-ca9a-4517-ba42-7412269cd00e',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Hue ambiance spot 2',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-color-temperature-bulb',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.LIGHT: 'Light'>,
          'user_category': None,
        }),
      ]),
      'device_id': '4d4f5261-dc3a-4e31-b8f4-15699c934f62',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Hue ambiance spot 4',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-color-temperature-bulb',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.COLOR_CONTROL: 'colorControl'>,
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SAMSUNG_IM_HUE_SYNC_MODE: 'samsungim.hueSyncMode'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.LIGHT: 'Light'>,
          'user_category': None,
        }),
      ]),
      'device_id': '9eaad965-638d-48c2-8aab-e97aa031226e',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Night light',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-rgbw-color-bulb',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.THERMOSTAT_MODE: 'thermostatMode'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.THERMOSTAT: 'Thermostat'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'f1e182eb-1e21-43ed-a32d-f3c2796b9865',
      'device_manufacturer_code': 'Netatmo',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Netatmo NAPlug',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'c2c-thermostat-bridge-1',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.COLOR_CONTROL: 'colorControl'>,
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SAMSUNG_IM_HUE_SYNC_MODE: 'samsungim.hueSyncMode'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.LIGHT: 'Light'>,
          'user_category': None,
        }),
      ]),
      'device_id': '4f43eaf7-b3d1-4d26-be8e-807b37dfe8e0',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Kitchen',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-rgbw-color-bulb',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.RELATIVE_HUMIDITY_MEASUREMENT: 'relativeHumidityMeasurement'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.TEMP_HUMIDITY_SENSOR: 'TempHumiditySensor'>,
          'user_category': None,
        }),
      ]),
      'device_id': '5ca2281d-fb11-4835-8990-0ea287556fe5',
      'device_manufacturer_code': 'WonderLabs Company',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Hub 2 08',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'c2c-humidity',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.COLOR_CONTROL: 'colorControl'>,
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SAMSUNG_IM_HUE_SYNC_MODE: 'samsungim.hueSyncMode'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.LIGHT: 'Light'>,
          'user_category': None,
        }),
      ]),
      'device_id': '3cd2ce09-6e19-48a9-b296-558d8cc55726',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Tv',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-rgbw-color-bulb',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'e25e6818-efab-4f45-97f8-867ab2c1c33d',
      'device_manufacturer_code': 'WonderLabs Company',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'TV',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'c2c-switch',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.COLOR_CONTROL: 'colorControl'>,
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SAMSUNG_IM_HUE_SYNC_MODE: 'samsungim.hueSyncMode'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.LIGHT: 'Light'>,
          'user_category': None,
        }),
      ]),
      'device_id': '5ed8ef33-96dc-4d53-8ad1-4a15e6361c1e',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Bureau',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-rgbw-color-bulb',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.LIGHT: 'Light'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'f15b3d69-7452-4b21-a27c-d3db3c84e2d4',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Hue ambiance spot 5',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-color-temperature-bulb',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.COLOR_CONTROL: 'colorControl'>,
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SAMSUNG_IM_HUE_SYNC_MODE: 'samsungim.hueSyncMode'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.LIGHT: 'Light'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'be1152d6-cad0-4859-b4a6-5770e63dd0b5',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Bed',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-rgbw-color-bulb',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.LIGHT: 'Light'>,
          'user_category': None,
        }),
      ]),
      'device_id': '53fa938e-7586-41ca-84e7-ccc6bcba94df',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Hue ambiance spot 1',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-color-temperature-bulb',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.COLOR_CONTROL: 'colorControl'>,
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SAMSUNG_IM_HUE_SYNC_MODE: 'samsungim.hueSyncMode'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.LIGHT: 'Light'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'd472222b-0e19-4d33-8375-b2abf6c9df08',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Bed',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-rgbw-color-bulb',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
  ])
# ---
# name: test_fetching_devices[devices_3]
  list([
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>,
            <Capability.OVEN_SETPOINT: 'ovenSetpoint'>,
            <Capability.OVEN_MODE: 'ovenMode'>,
            <Capability.OVEN_OPERATING_STATE: 'ovenOperatingState'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
            <Capability.SAMSUNG_CE_KITCHEN_DEVICE_IDENTIFICATION: 'samsungce.kitchenDeviceIdentification'>,
            <Capability.SAMSUNG_CE_KITCHEN_DEVICE_DEFAULTS: 'samsungce.kitchenDeviceDefaults'>,
            <Capability.SAMSUNG_CE_DOOR_STATE: 'samsungce.doorState'>,
            <Capability.SAMSUNG_CE_CUSTOM_RECIPE: 'samsungce.customRecipe'>,
            <Capability.SAMSUNG_CE_OVEN_MODE: 'samsungce.ovenMode'>,
            <Capability.SAMSUNG_CE_OVEN_OPERATING_STATE: 'samsungce.ovenOperatingState'>,
            <Capability.SAMSUNG_CE_MEAT_PROBE: 'samsungce.meatProbe'>,
            <Capability.SAMSUNG_CE_LAMP: 'samsungce.lamp'>,
            <Capability.SAMSUNG_CE_KITCHEN_MODE_SPECIFICATION: 'samsungce.kitchenModeSpecification'>,
            <Capability.SAMSUNG_CE_KIDS_LOCK: 'samsungce.kidsLock'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.CUSTOM_COOKTOP_OPERATING_STATE: 'custom.cooktopOperatingState'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.RANGE: 'Range'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.OVEN_SETPOINT: 'ovenSetpoint'>,
            <Capability.OVEN_MODE: 'ovenMode'>,
            <Capability.OVEN_OPERATING_STATE: 'ovenOperatingState'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.SAMSUNG_CE_OVEN_MODE: 'samsungce.ovenMode'>,
            <Capability.SAMSUNG_CE_OVEN_OPERATING_STATE: 'samsungce.ovenOperatingState'>,
            <Capability.SAMSUNG_CE_KITCHEN_DEVICE_DEFAULTS: 'samsungce.kitchenDeviceDefaults'>,
            <Capability.CUSTOM_OVEN_CAVITY_STATUS: 'custom.ovenCavityStatus'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'cavity-01',
          'label': 'cavity-01',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
      ]),
      'device_id': '2c3cbaa0-1899-5ddc-7b58-9d657bd53d18',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Range',
      'label': 'Vulcan',
      'location_id': '597a4912-13c9-47ab-5916-3cbe28b61abd',
      'name': 'Samsung Range',
      'ocf': dict({
        'device_type': 'oic.d.range',
        'firmware_version': 'AKS-WW-TP1-20-OVEN-3-CR_40240205',
        'hardware_version': 'Realtek',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'TP1X_DA-KS-RANGE-0101X|40445041|5001011E031511010200000000000000',
        'name': 'Samsung Range',
        'platform_os': 'TizenRT 3.1',
        'platform_version': 'DAWIT 3.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'DA-KS-RANGE-0101X',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
  ])
# ---
# name: test_fetching_devices[devices_4]
  list([
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>,
            <Capability.DRYER_OPERATING_STATE: 'dryerOperatingState'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_DRYER_DRY_LEVEL: 'custom.dryerDryLevel'>,
            <Capability.CUSTOM_DRYER_WRINKLE_PREVENT: 'custom.dryerWrinklePrevent'>,
            <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>,
            <Capability.CUSTOM_JOB_BEGINNING_STATUS: 'custom.jobBeginningStatus'>,
            <Capability.CUSTOM_SUPPORTED_OPTIONS: 'custom.supportedOptions'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.SAMSUNG_CE_DETERGENT_ORDER: 'samsungce.detergentOrder'>,
            <Capability.SAMSUNG_CE_DETERGENT_STATE: 'samsungce.detergentState'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_DONGLE_SOFTWARE_INSTALLATION: 'samsungce.dongleSoftwareInstallation'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
            <Capability.SAMSUNG_CE_DRYER_AUTO_CYCLE_LINK: 'samsungce.dryerAutoCycleLink'>,
            <Capability.SAMSUNG_CE_DRYER_CYCLE: 'samsungce.dryerCycle'>,
            <Capability.SAMSUNG_CE_DRYER_CYCLE_PRESET: 'samsungce.dryerCyclePreset'>,
            <Capability.SAMSUNG_CE_DRYER_DELAY_END: 'samsungce.dryerDelayEnd'>,
            <Capability.SAMSUNG_CE_DRYER_DRYING_TEMPERATURE: 'samsungce.dryerDryingTemperature'>,
            <Capability.SAMSUNG_CE_DRYER_DRYING_TIME: 'samsungce.dryerDryingTime'>,
            <Capability.SAMSUNG_CE_DRYER_FREEZE_PREVENT: 'samsungce.dryerFreezePrevent'>,
            <Capability.SAMSUNG_CE_DRYER_OPERATING_STATE: 'samsungce.dryerOperatingState'>,
            <Capability.SAMSUNG_CE_KIDS_LOCK: 'samsungce.kidsLock'>,
            <Capability.SAMSUNG_CE_WELCOME_MESSAGE: 'samsungce.welcomeMessage'>,
            <Capability.SAMSUNG_CE_QUICK_CONTROL: 'samsungce.quickControl'>,
            <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>,
            <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.DRYER: 'Dryer'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.HCA_DRYER_MODE: 'hca.dryerMode'>,
          ]),
          'id': 'hca.main',
          'label': 'hca.main',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
      ]),
      'device_id': '02f7256e-8353-5bdd-547f-bd5b1647e01b',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Dryer',
      'label': 'Dryer',
      'location_id': '781d5f1e-c87e-455e-87f7-8e954879e91d',
      'name': '[dryer] Samsung',
      'ocf': dict({
        'device_type': 'oic.d.dryer',
        'firmware_version': 'DA_WM_A51_20_COMMON_30230708',
        'hardware_version': 'ARTIK051',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'DA_WM_A51_20_COMMON|20233741|3000000100111100020B000000000000',
        'name': '[dryer] Samsung',
        'platform_os': 'TizenRT 1.0 + IPv6',
        'platform_version': 'DAWIT 2.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'DA-WM-WD-000001',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.EXECUTE: 'execute'>,
            <Capability.OCF: 'ocf'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>,
            <Capability.DISHWASHER_OPERATING_STATE: 'dishwasherOperatingState'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_DISHWASHER_OPERATING_PROGRESS: 'custom.dishwasherOperatingProgress'>,
            <Capability.CUSTOM_DISHWASHER_OPERATING_PERCENTAGE: 'custom.dishwasherOperatingPercentage'>,
            <Capability.CUSTOM_DISHWASHER_DELAY_START_TIME: 'custom.dishwasherDelayStartTime'>,
            <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>,
            <Capability.CUSTOM_SUPPORTED_OPTIONS: 'custom.supportedOptions'>,
            <Capability.CUSTOM_WATER_FILTER: 'custom.waterFilter'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_DISHWASHER_JOB_STATE: 'samsungce.dishwasherJobState'>,
            <Capability.SAMSUNG_CE_DISHWASHER_WASHING_COURSE: 'samsungce.dishwasherWashingCourse'>,
            <Capability.SAMSUNG_CE_DISHWASHER_WASHING_COURSE_DETAILS: 'samsungce.dishwasherWashingCourseDetails'>,
            <Capability.SAMSUNG_CE_DISHWASHER_OPERATION: 'samsungce.dishwasherOperation'>,
            <Capability.SAMSUNG_CE_DISHWASHER_WASHING_OPTIONS: 'samsungce.dishwasherWashingOptions'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.SAMSUNG_CE_KIDS_LOCK: 'samsungce.kidsLock'>,
            <Capability.SAMSUNG_CE_WATER_CONSUMPTION_REPORT: 'samsungce.waterConsumptionReport'>,
            <Capability.SAMSUNG_CE_QUICK_CONTROL: 'samsungce.quickControl'>,
            <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>,
            <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.DISHWASHER: 'Dishwasher'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'f36dc7ce-cac0-0667-dc14-a3704eb5e676',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Dishwasher',
      'label': 'Dishwasher',
      'location_id': '586e4602-34ab-4a22-993e-5f616b04604f',
      'name': '[dishwasher] Samsung',
      'ocf': dict({
        'device_type': 'oic.d.dishwasher',
        'firmware_version': 'DA_DW_A51_20_COMMON_30230714',
        'hardware_version': 'ARTIK051',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'DA_DW_A51_20_COMMON|30007242|40010201001311000101000000000000',
        'name': '[dishwasher] Samsung',
        'platform_os': 'TizenRT 1.0 + IPv6',
        'platform_version': 'DAWIT 2.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'DA-WM-DW-000001',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>,
            <Capability.OVEN_SETPOINT: 'ovenSetpoint'>,
            <Capability.OVEN_MODE: 'ovenMode'>,
            <Capability.OVEN_OPERATING_STATE: 'ovenOperatingState'>,
            <Capability.DOOR_CONTROL: 'doorControl'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
            <Capability.SAMSUNG_CE_HOOD_FAN_SPEED: 'samsungce.hoodFanSpeed'>,
            <Capability.SAMSUNG_CE_DEFINED_RECIPE: 'samsungce.definedRecipe'>,
            <Capability.SAMSUNG_CE_DOOR_STATE: 'samsungce.doorState'>,
            <Capability.SAMSUNG_CE_KITCHEN_DEVICE_IDENTIFICATION: 'samsungce.kitchenDeviceIdentification'>,
            <Capability.SAMSUNG_CE_KITCHEN_DEVICE_DEFAULTS: 'samsungce.kitchenDeviceDefaults'>,
            <Capability.SAMSUNG_CE_OVEN_MODE: 'samsungce.ovenMode'>,
            <Capability.SAMSUNG_CE_OVEN_OPERATING_STATE: 'samsungce.ovenOperatingState'>,
            <Capability.SAMSUNG_CE_MICROWAVE_POWER: 'samsungce.microwavePower'>,
            <Capability.SAMSUNG_CE_KITCHEN_MODE_SPECIFICATION: 'samsungce.kitchenModeSpecification'>,
            <Capability.SAMSUNG_CE_KIDS_LOCK: 'samsungce.kidsLock'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.MICROWAVE: 'Microwave'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.SAMSUNG_CE_LAMP: 'samsungce.lamp'>,
            <Capability.SAMSUNG_CE_HOOD_FAN_SPEED: 'samsungce.hoodFanSpeed'>,
          ]),
          'id': 'hood',
          'label': 'hood',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
      ]),
      'device_id': '2bad3237-4886-e699-1b90-4a51a3d55c8a',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'oic.d.microwave',
      'label': 'Microwave',
      'location_id': '586e4602-34ab-4a22-993e-5f616b04604f',
      'name': 'Samsung Microwave',
      'ocf': dict({
        'device_type': 'oic.d.microwave',
        'firmware_version': 'AKS-WW-TP2-20-MICROWAVE-OTR_40230125',
        'hardware_version': 'MediaTek',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'TP2X_DA-KS-MICROWAVE-0101X|40436241|50040100011411000200000000000000',
        'name': 'Samsung Microwave',
        'platform_os': 'TizenRT 2.0 + IPv6',
        'platform_version': 'DAWIT 3.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'DA-KS-MICROWAVE-0101X',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.OCF: 'ocf'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.REFRIGERATION: 'refrigeration'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>,
            <Capability.CUSTOM_DEVICE_REPORT_STATE_CONFIGURATION: 'custom.deviceReportStateConfiguration'>,
            <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>,
            <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_DISABLED_COMPONENTS: 'custom.disabledComponents'>,
            <Capability.CUSTOM_WATER_FILTER: 'custom.waterFilter'>,
            <Capability.SAMSUNG_CE_FRIDGE_FOOD_LIST: 'samsungce.fridgeFoodList'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
            <Capability.SAMSUNG_CE_FRIDGE_VACATION_MODE: 'samsungce.fridgeVacationMode'>,
            <Capability.SAMSUNG_CE_POWER_COOL: 'samsungce.powerCool'>,
            <Capability.SAMSUNG_CE_POWER_FREEZE: 'samsungce.powerFreeze'>,
            <Capability.SAMSUNG_CE_SABBATH_MODE: 'samsungce.sabbathMode'>,
            <Capability.SAMSUNG_CE_VIEW_INSIDE: 'samsungce.viewInside'>,
            <Capability.SAMSUNG_CE_RUNESTONE_HOME_CONTEXT: 'samsungce.runestoneHomeContext'>,
            <Capability.SAMSUNG_CE_QUICK_CONTROL: 'samsungce.quickControl'>,
            <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>,
            <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.REFRIGERATOR: 'Refrigerator'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>,
            <Capability.SAMSUNG_CE_FREEZER_CONVERT_MODE: 'samsungce.freezerConvertMode'>,
            <Capability.SAMSUNG_CE_UNAVAILABLE_CAPABILITIES: 'samsungce.unavailableCapabilities'>,
          ]),
          'id': 'freezer',
          'label': 'freezer',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>,
            <Capability.SAMSUNG_CE_UNAVAILABLE_CAPABILITIES: 'samsungce.unavailableCapabilities'>,
          ]),
          'id': 'cooler',
          'label': 'cooler',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>,
          ]),
          'id': 'cvroom',
          'label': 'cvroom',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'icemaker',
          'label': 'icemaker',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'icemaker-02',
          'label': 'icemaker-02',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'icemaker-03',
          'label': 'icemaker-03',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.SAMSUNG_CE_WEIGHT_MEASUREMENT: 'samsungce.weightMeasurement'>,
            <Capability.SAMSUNG_CE_WEIGHT_MEASUREMENT_CALIBRATION: 'samsungce.weightMeasurementCalibration'>,
            <Capability.SAMSUNG_CE_CONNECTION_STATE: 'samsungce.connectionState'>,
            <Capability.SAMSUNG_CE_SCALE_SETTINGS: 'samsungce.scaleSettings'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'scale-10',
          'label': 'scale-10',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.SAMSUNG_CE_WEIGHT_MEASUREMENT: 'samsungce.weightMeasurement'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'scale-11',
          'label': 'scale-11',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.SAMSUNG_CE_FRIDGE_PANTRY_INFO: 'samsungce.fridgePantryInfo'>,
            <Capability.SAMSUNG_CE_FRIDGE_PANTRY_MODE: 'samsungce.fridgePantryMode'>,
            <Capability.SAMSUNG_CE_MEAT_AGING: 'samsungce.meatAging'>,
            <Capability.SAMSUNG_CE_FOOD_DEFROST: 'samsungce.foodDefrost'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'pantry-01',
          'label': 'pantry-01',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'camera-01',
          'label': 'camera-01',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
      ]),
      'device_id': '7d3feb98-8a36-4351-c362-5e21ad3a78dd',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Refrigerator',
      'label': 'Refrigerator',
      'location_id': '2487472a-06c4-4bce-8f4c-700c5f8644f8',
      'name': 'Family Hub',
      'ocf': dict({
        'device_type': 'oic.d.refrigerator',
        'firmware_version': '20240616.213423',
        'hardware_version': '',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': '24K_REF_LCD_FHUB9.0|00113141|0002034e051324200103000000000000',
        'name': 'Family Hub',
        'platform_os': 'Tizen',
        'platform_version': '7.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'DA-REF-NORMAL-01001',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.BRIDGE: 'bridge'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.HUB: 'Hub'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'd1bd03c4-61ea-4e3d-9c7e-c2126c9579a2',
      'device_manufacturer_code': None,
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'SmartThings Hub - FamilyHub',
      'location_id': '2487472a-06c4-4bce-8f4c-700c5f8644f8',
      'name': 'SmartThings Hub',
      'ocf': None,
      'type': <DeviceType.HUB: 'HUB'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.ROBOT_CLEANER_TURBO_MODE: 'robotCleanerTurboMode'>,
            <Capability.ROBOT_CLEANER_MOVEMENT: 'robotCleanerMovement'>,
            <Capability.ROBOT_CLEANER_CLEANING_MODE: 'robotCleanerCleaningMode'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_DISABLED_COMPONENTS: 'custom.disabledComponents'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.SAMSUNG_CE_ROBOT_CLEANER_CLEANING_MODE: 'samsungce.robotCleanerCleaningMode'>,
            <Capability.SAMSUNG_CE_ROBOT_CLEANER_OPERATING_STATE: 'samsungce.robotCleanerOperatingState'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
          ]),
          'id': 'main',
          'label': 'Robot vacuum',
          'manufacturer_category': <Category.ROBOT_CLEANER: 'RobotCleaner'>,
          'user_category': None,
        }),
      ]),
      'device_id': '3442dfc6-17c0-a65f-dae0-4c6e01786f44',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Robot Vacuum',
      'label': 'Robot vacuum',
      'location_id': '586e4602-34ab-4a22-993e-5f616b04604f',
      'name': '[robot vacuum] Samsung',
      'ocf': dict({
        'device_type': 'oic.d.robotcleaner',
        'firmware_version': '1.0',
        'hardware_version': '1.0',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'powerbot_7000_17M|50016055|80010404011141000100000000000000',
        'name': '[robot vacuum] Samsung',
        'platform_os': 'Tizen(3/0)',
        'platform_version': '00',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'DA-RVC-NORMAL-000001',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.EXECUTE: 'execute'>,
            <Capability.OCF: 'ocf'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>,
            <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.WASHER_OPERATING_STATE: 'washerOperatingState'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_DRYER_DRY_LEVEL: 'custom.dryerDryLevel'>,
            <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>,
            <Capability.CUSTOM_JOB_BEGINNING_STATUS: 'custom.jobBeginningStatus'>,
            <Capability.CUSTOM_SUPPORTED_OPTIONS: 'custom.supportedOptions'>,
            <Capability.CUSTOM_WASHER_AUTO_DETERGENT: 'custom.washerAutoDetergent'>,
            <Capability.CUSTOM_WASHER_AUTO_SOFTENER: 'custom.washerAutoSoftener'>,
            <Capability.CUSTOM_WASHER_RINSE_CYCLES: 'custom.washerRinseCycles'>,
            <Capability.CUSTOM_WASHER_SOIL_LEVEL: 'custom.washerSoilLevel'>,
            <Capability.CUSTOM_WASHER_SPIN_LEVEL: 'custom.washerSpinLevel'>,
            <Capability.CUSTOM_WASHER_WATER_TEMPERATURE: 'custom.washerWaterTemperature'>,
            <Capability.SAMSUNG_CE_AUTO_DISPENSE_DETERGENT: 'samsungce.autoDispenseDetergent'>,
            <Capability.SAMSUNG_CE_AUTO_DISPENSE_SOFTENER: 'samsungce.autoDispenseSoftener'>,
            <Capability.SAMSUNG_CE_DETERGENT_ORDER: 'samsungce.detergentOrder'>,
            <Capability.SAMSUNG_CE_DETERGENT_STATE: 'samsungce.detergentState'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_DONGLE_SOFTWARE_INSTALLATION: 'samsungce.dongleSoftwareInstallation'>,
            <Capability.SAMSUNG_CE_DETERGENT_AUTO_REPLENISHMENT: 'samsungce.detergentAutoReplenishment'>,
            <Capability.SAMSUNG_CE_SOFTENER_AUTO_REPLENISHMENT: 'samsungce.softenerAutoReplenishment'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.SAMSUNG_CE_KIDS_LOCK: 'samsungce.kidsLock'>,
            <Capability.SAMSUNG_CE_SOFTENER_ORDER: 'samsungce.softenerOrder'>,
            <Capability.SAMSUNG_CE_SOFTENER_STATE: 'samsungce.softenerState'>,
            <Capability.SAMSUNG_CE_WASHER_BUBBLE_SOAK: 'samsungce.washerBubbleSoak'>,
            <Capability.SAMSUNG_CE_WASHER_CYCLE: 'samsungce.washerCycle'>,
            <Capability.SAMSUNG_CE_WASHER_CYCLE_PRESET: 'samsungce.washerCyclePreset'>,
            <Capability.SAMSUNG_CE_WASHER_DELAY_END: 'samsungce.washerDelayEnd'>,
            <Capability.SAMSUNG_CE_WASHER_FREEZE_PREVENT: 'samsungce.washerFreezePrevent'>,
            <Capability.SAMSUNG_CE_WASHER_OPERATING_STATE: 'samsungce.washerOperatingState'>,
            <Capability.SAMSUNG_CE_WASHER_WASHING_TIME: 'samsungce.washerWashingTime'>,
            <Capability.SAMSUNG_CE_WASHER_WATER_LEVEL: 'samsungce.washerWaterLevel'>,
            <Capability.SAMSUNG_CE_WASHER_WATER_VALVE: 'samsungce.washerWaterValve'>,
            <Capability.SAMSUNG_CE_WELCOME_MESSAGE: 'samsungce.welcomeMessage'>,
            <Capability.SAMSUNG_CE_WATER_CONSUMPTION_REPORT: 'samsungce.waterConsumptionReport'>,
            <Capability.SAMSUNG_CE_QUICK_CONTROL: 'samsungce.quickControl'>,
            <Capability.SAMSUNG_CE_ENERGY_PLANNER: 'samsungce.energyPlanner'>,
            <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>,
            <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.WASHER: 'Washer'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.HCA_WASHER_MODE: 'hca.washerMode'>,
          ]),
          'id': 'hca.main',
          'label': 'hca.main',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'f984b91d-f250-9d42-3436-33f09a422a47',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Washer',
      'label': 'Washer',
      'location_id': '781d5f1e-c87e-455e-87f7-8e954879e91d',
      'name': '[washer] Samsung',
      'ocf': dict({
        'device_type': 'oic.d.washer',
        'firmware_version': 'DA_WM_TP2_20_COMMON_30230804',
        'hardware_version': 'MediaTek',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'DA_WM_TP2_20_COMMON|20233741|2001000100131100022B010000000000',
        'name': '[washer] Samsung',
        'platform_os': 'TizenRT 2.0 + IPv6',
        'platform_version': 'DAWIT 2.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'DA-WM-WM-000001',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
  ])
# ---
# name: test_fetching_devices[devices_5]
  list([
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.ALARM: 'alarm'>,
            <Capability.TAG_TAG_BUTTON: 'tag.tagButton'>,
            <Capability.AUDIO_VOLUME: 'audioVolume'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.TAG_FACTORY_RESET: 'tag.factoryReset'>,
            <Capability.TAG_E2E_ENCRYPTION: 'tag.e2eEncryption'>,
            <Capability.TAG_TAG_STATUS: 'tag.tagStatus'>,
            <Capability.GEOLOCATION: 'geolocation'>,
            <Capability.GEOFENCE: 'geofence'>,
            <Capability.TAG_UWB_ACTIVATION: 'tag.uwbActivation'>,
            <Capability.TAG_UPDATED_INFO: 'tag.updatedInfo'>,
            <Capability.TAG_SEARCHING_STATUS: 'tag.searchingStatus'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.BLUETOOTH_TRACKER: 'BluetoothTracker'>,
          'user_category': None,
        }),
      ]),
      'device_id': '83d660e4-b0c8-4881-a674-d9f1730366c1',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'SmartTag+ black',
      'location_id': 'redacted_locid',
      'name': 'Tag(UWB)',
      'ocf': None,
      'type': <DeviceType.BLE_D2D: 'BLE_D2D'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.EXECUTE: 'execute'>,
            <Capability.OCF: 'ocf'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>,
            <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.WASHER_OPERATING_STATE: 'washerOperatingState'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_DRYER_DRY_LEVEL: 'custom.dryerDryLevel'>,
            <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>,
            <Capability.CUSTOM_JOB_BEGINNING_STATUS: 'custom.jobBeginningStatus'>,
            <Capability.CUSTOM_SUPPORTED_OPTIONS: 'custom.supportedOptions'>,
            <Capability.CUSTOM_WASHER_AUTO_DETERGENT: 'custom.washerAutoDetergent'>,
            <Capability.CUSTOM_WASHER_AUTO_SOFTENER: 'custom.washerAutoSoftener'>,
            <Capability.CUSTOM_WASHER_RINSE_CYCLES: 'custom.washerRinseCycles'>,
            <Capability.CUSTOM_WASHER_SOIL_LEVEL: 'custom.washerSoilLevel'>,
            <Capability.CUSTOM_WASHER_SPIN_LEVEL: 'custom.washerSpinLevel'>,
            <Capability.CUSTOM_WASHER_WATER_TEMPERATURE: 'custom.washerWaterTemperature'>,
            <Capability.SAMSUNG_CE_AUTO_DISPENSE_DETERGENT: 'samsungce.autoDispenseDetergent'>,
            <Capability.SAMSUNG_CE_AUTO_DISPENSE_SOFTENER: 'samsungce.autoDispenseSoftener'>,
            <Capability.SAMSUNG_CE_DETERGENT_ORDER: 'samsungce.detergentOrder'>,
            <Capability.SAMSUNG_CE_DETERGENT_STATE: 'samsungce.detergentState'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_DONGLE_SOFTWARE_INSTALLATION: 'samsungce.dongleSoftwareInstallation'>,
            <Capability.SAMSUNG_CE_DETERGENT_AUTO_REPLENISHMENT: 'samsungce.detergentAutoReplenishment'>,
            <Capability.SAMSUNG_CE_SOFTENER_AUTO_REPLENISHMENT: 'samsungce.softenerAutoReplenishment'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.SAMSUNG_CE_KIDS_LOCK: 'samsungce.kidsLock'>,
            <Capability.SAMSUNG_CE_SOFTENER_ORDER: 'samsungce.softenerOrder'>,
            <Capability.SAMSUNG_CE_SOFTENER_STATE: 'samsungce.softenerState'>,
            <Capability.SAMSUNG_CE_WASHER_BUBBLE_SOAK: 'samsungce.washerBubbleSoak'>,
            <Capability.SAMSUNG_CE_WASHER_CYCLE: 'samsungce.washerCycle'>,
            <Capability.SAMSUNG_CE_WASHER_CYCLE_PRESET: 'samsungce.washerCyclePreset'>,
            <Capability.SAMSUNG_CE_WASHER_DELAY_END: 'samsungce.washerDelayEnd'>,
            <Capability.SAMSUNG_CE_WASHER_FREEZE_PREVENT: 'samsungce.washerFreezePrevent'>,
            <Capability.SAMSUNG_CE_WASHER_OPERATING_STATE: 'samsungce.washerOperatingState'>,
            <Capability.SAMSUNG_CE_WASHER_WASHING_TIME: 'samsungce.washerWashingTime'>,
            <Capability.SAMSUNG_CE_WASHER_WATER_LEVEL: 'samsungce.washerWaterLevel'>,
            <Capability.SAMSUNG_CE_WASHER_WATER_VALVE: 'samsungce.washerWaterValve'>,
            <Capability.SAMSUNG_CE_WELCOME_MESSAGE: 'samsungce.welcomeMessage'>,
            <Capability.SAMSUNG_CE_WATER_CONSUMPTION_REPORT: 'samsungce.waterConsumptionReport'>,
            <Capability.SAMSUNG_CE_QUICK_CONTROL: 'samsungce.quickControl'>,
            <Capability.SAMSUNG_CE_ENERGY_PLANNER: 'samsungce.energyPlanner'>,
            <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>,
            <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.WASHER: 'Washer'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.HCA_WASHER_MODE: 'hca.washerMode'>,
          ]),
          'id': 'hca.main',
          'label': 'hca.main',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'c34897ca-c077-e3b9-adba-d52a96e47343',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Washer',
      'label': 'Wasmachine',
      'location_id': 'redacted_locid',
      'name': '[washer] Samsung',
      'ocf': dict({
        'device_type': 'oic.d.washer',
        'firmware_version': 'DA_WM_TP2_20_COMMON_30230804',
        'hardware_version': 'MediaTek',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'DA_WM_TP2_20_COMMON|20260041|200100020014112302A3020700000000',
        'name': '[washer] Samsung',
        'platform_os': 'TizenRT 2.0 + IPv6',
        'platform_version': 'DAWIT 2.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'DA-WM-WM-000001',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.ALARM: 'alarm'>,
            <Capability.TAG_TAG_BUTTON: 'tag.tagButton'>,
            <Capability.AUDIO_VOLUME: 'audioVolume'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.TAG_FACTORY_RESET: 'tag.factoryReset'>,
            <Capability.TAG_E2E_ENCRYPTION: 'tag.e2eEncryption'>,
            <Capability.TAG_TAG_STATUS: 'tag.tagStatus'>,
            <Capability.GEOLOCATION: 'geolocation'>,
            <Capability.GEOFENCE: 'geofence'>,
            <Capability.TAG_UWB_ACTIVATION: 'tag.uwbActivation'>,
            <Capability.TAG_UPDATED_INFO: 'tag.updatedInfo'>,
            <Capability.TAG_SEARCHING_STATUS: 'tag.searchingStatus'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.BLUETOOTH_TRACKER: 'BluetoothTracker'>,
          'user_category': None,
        }),
      ]),
      'device_id': '709343ae-2262-45bf-8852-5263e34fd1f2',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'tas',
      'location_id': 'redacted_locid',
      'name': 'Tag2(UWB)',
      'ocf': None,
      'type': <DeviceType.BLE_D2D: 'BLE_D2D'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.ALARM: 'alarm'>,
            <Capability.TAG_TAG_BUTTON: 'tag.tagButton'>,
            <Capability.AUDIO_VOLUME: 'audioVolume'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.TAG_FACTORY_RESET: 'tag.factoryReset'>,
            <Capability.TAG_E2E_ENCRYPTION: 'tag.e2eEncryption'>,
            <Capability.TAG_TAG_STATUS: 'tag.tagStatus'>,
            <Capability.GEOLOCATION: 'geolocation'>,
            <Capability.GEOFENCE: 'geofence'>,
            <Capability.TAG_UWB_ACTIVATION: 'tag.uwbActivation'>,
            <Capability.TAG_UPDATED_INFO: 'tag.updatedInfo'>,
            <Capability.TAG_SEARCHING_STATUS: 'tag.searchingStatus'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.BLUETOOTH_TRACKER: 'BluetoothTracker'>,
          'user_category': None,
        }),
      ]),
      'device_id': '0d3a49e8-6d4b-4870-b1ec-538d1c36f047',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'koffer',
      'location_id': 'redacted_locid',
      'name': 'Tag2(UWB)',
      'ocf': None,
      'type': <DeviceType.BLE_D2D: 'BLE_D2D'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.ALARM: 'alarm'>,
            <Capability.TAG_TAG_BUTTON: 'tag.tagButton'>,
            <Capability.AUDIO_VOLUME: 'audioVolume'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.TAG_FACTORY_RESET: 'tag.factoryReset'>,
            <Capability.TAG_E2E_ENCRYPTION: 'tag.e2eEncryption'>,
            <Capability.TAG_TAG_STATUS: 'tag.tagStatus'>,
            <Capability.GEOLOCATION: 'geolocation'>,
            <Capability.GEOFENCE: 'geofence'>,
            <Capability.TAG_UWB_ACTIVATION: 'tag.uwbActivation'>,
            <Capability.TAG_UPDATED_INFO: 'tag.updatedInfo'>,
            <Capability.TAG_SEARCHING_STATUS: 'tag.searchingStatus'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.BLUETOOTH_TRACKER: 'BluetoothTracker'>,
          'user_category': None,
        }),
      ]),
      'device_id': '9d5086e5-d74c-402c-8336-06c79966ab5f',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'SmartTag+ black 2',
      'location_id': 'redacted_locid',
      'name': 'Tag(UWB)',
      'ocf': None,
      'type': <DeviceType.BLE_D2D: 'BLE_D2D'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.ALARM: 'alarm'>,
            <Capability.TAG_TAG_BUTTON: 'tag.tagButton'>,
            <Capability.AUDIO_VOLUME: 'audioVolume'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.TAG_FACTORY_RESET: 'tag.factoryReset'>,
            <Capability.TAG_E2E_ENCRYPTION: 'tag.e2eEncryption'>,
            <Capability.TAG_TAG_STATUS: 'tag.tagStatus'>,
            <Capability.GEOLOCATION: 'geolocation'>,
            <Capability.GEOFENCE: 'geofence'>,
            <Capability.TAG_UWB_ACTIVATION: 'tag.uwbActivation'>,
            <Capability.TAG_UPDATED_INFO: 'tag.updatedInfo'>,
            <Capability.TAG_SEARCHING_STATUS: 'tag.searchingStatus'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.BLUETOOTH_TRACKER: 'BluetoothTracker'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'bb6db6ba-a4e6-436c-ae04-c559b87b2976',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'SmartTag+ blue 2',
      'location_id': 'redacted_locid',
      'name': 'Tag(UWB)',
      'ocf': None,
      'type': <DeviceType.BLE_D2D: 'BLE_D2D'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.ALARM: 'alarm'>,
            <Capability.TAG_TAG_BUTTON: 'tag.tagButton'>,
            <Capability.AUDIO_VOLUME: 'audioVolume'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.TAG_FACTORY_RESET: 'tag.factoryReset'>,
            <Capability.TAG_E2E_ENCRYPTION: 'tag.e2eEncryption'>,
            <Capability.TAG_TAG_STATUS: 'tag.tagStatus'>,
            <Capability.GEOLOCATION: 'geolocation'>,
            <Capability.GEOFENCE: 'geofence'>,
            <Capability.TAG_UWB_ACTIVATION: 'tag.uwbActivation'>,
            <Capability.TAG_UPDATED_INFO: 'tag.updatedInfo'>,
            <Capability.TAG_SEARCHING_STATUS: 'tag.searchingStatus'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.BLUETOOTH_TRACKER: 'BluetoothTracker'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'cee35ca2-8d55-458c-baae-d8d01255cd51',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'SmartTag+ blue',
      'location_id': 'redacted_locid',
      'name': 'Tag(UWB)',
      'ocf': None,
      'type': <DeviceType.BLE_D2D: 'BLE_D2D'>,
    }),
  ])
# ---
# name: test_fetching_devices[devices_6]
  list([
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.AIR_CONDITIONER_MODE: 'airConditionerMode'>,
            <Capability.AIR_CONDITIONER_FAN_MODE: 'airConditionerFanMode'>,
            <Capability.BYPASSABLE: 'bypassable'>,
            <Capability.FAN_OSCILLATION_MODE: 'fanOscillationMode'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>,
            <Capability.RELATIVE_HUMIDITY_MEASUREMENT: 'relativeHumidityMeasurement'>,
            <Capability.AIR_QUALITY_SENSOR: 'airQualitySensor'>,
            <Capability.ODOR_SENSOR: 'odorSensor'>,
            <Capability.DUST_SENSOR: 'dustSensor'>,
            <Capability.VERY_FINE_DUST_SENSOR: 'veryFineDustSensor'>,
            <Capability.AUDIO_VOLUME: 'audioVolume'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.AUDIO_NOTIFICATION: 'audioNotification'>,
            <Capability.CUSTOM_SPI_MODE: 'custom.spiMode'>,
            <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>,
            <Capability.CUSTOM_AIR_CONDITIONER_OPTIONAL_MODE: 'custom.airConditionerOptionalMode'>,
            <Capability.CUSTOM_AIR_CONDITIONER_TROPICAL_NIGHT_MODE: 'custom.airConditionerTropicalNightMode'>,
            <Capability.CUSTOM_AUTO_CLEANING_MODE: 'custom.autoCleaningMode'>,
            <Capability.CUSTOM_DEVICE_REPORT_STATE_CONFIGURATION: 'custom.deviceReportStateConfiguration'>,
            <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>,
            <Capability.CUSTOM_DUST_FILTER: 'custom.dustFilter'>,
            <Capability.CUSTOM_VERY_FINE_DUST_FILTER: 'custom.veryFineDustFilter'>,
            <Capability.CUSTOM_DEODOR_FILTER: 'custom.deodorFilter'>,
            <Capability.CUSTOM_ELECTRIC_HEPA_FILTER: 'custom.electricHepaFilter'>,
            <Capability.CUSTOM_DO_NOT_DISTURB_MODE: 'custom.doNotDisturbMode'>,
            <Capability.CUSTOM_PERIODIC_SENSING: 'custom.periodicSensing'>,
            <Capability.CUSTOM_AIR_CONDITIONER_ODOR_CONTROLLER: 'custom.airConditionerOdorController'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.SAMSUNG_CE_ALWAYS_ON_SENSING: 'samsungce.alwaysOnSensing'>,
            <Capability.SAMSUNG_CE_AIR_CONDITIONER_BEEP: 'samsungce.airConditionerBeep'>,
            <Capability.SAMSUNG_CE_AIR_CONDITIONER_LIGHTING: 'samsungce.airConditionerLighting'>,
            <Capability.SAMSUNG_CE_AIR_QUALITY_HEALTH_CONCERN: 'samsungce.airQualityHealthConcern'>,
            <Capability.SAMSUNG_CE_BUTTON_DISPLAY_CONDITION: 'samsungce.buttonDisplayCondition'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
            <Capability.SAMSUNG_CE_DUST_FILTER_ALARM: 'samsungce.dustFilterAlarm'>,
            <Capability.SAMSUNG_CE_INDIVIDUAL_CONTROL_LOCK: 'samsungce.individualControlLock'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.SAMSUNG_CE_SELF_CHECK: 'samsungce.selfCheck'>,
            <Capability.SAMSUNG_CE_SILENT_ACTION: 'samsungce.silentAction'>,
            <Capability.SAMSUNG_CE_QUICK_CONTROL: 'samsungce.quickControl'>,
            <Capability.SAMSUNG_CE_WELCOME_COOLING: 'samsungce.welcomeCooling'>,
            <Capability.SAMSUNG_CE_UNAVAILABLE_CAPABILITIES: 'samsungce.unavailableCapabilities'>,
            <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>,
            <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>,
            <Capability.SEC_CALM_CONNECTION_CARE: 'sec.calmConnectionCare'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.AIR_CONDITIONER: 'AirConditioner'>,
          'user_category': None,
        }),
      ]),
      'device_id': '4ece486b-89db-f06a-d54d-748b676b4d8e',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Air Conditioner',
      'label': 'Aire Dormitorio Principal',
      'location_id': 'c4189ac1-208f-461a-8ab6-ea67937b3743',
      'name': 'Samsung-Room-Air-Conditioner',
      'ocf': dict({
        'device_type': 'oic.d.airconditioner',
        'firmware_version': 'ARA-WW-TP1-22-COMMON_11240702',
        'hardware_version': 'Realtek',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'ARA-WW-TP1-22-COMMON|10229641|60010523001511014600083200800000',
        'name': 'Samsung-Room-Air-Conditioner',
        'platform_os': 'TizenRT 3.1',
        'platform_version': 'DAWIT 2.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'DA-AC-RAC-01001',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.AUDIO_VOLUME: 'audioVolume'>,
            <Capability.AUDIO_MUTE: 'audioMute'>,
            <Capability.AUDIO_TRACK_DATA: 'audioTrackData'>,
            <Capability.SAMSUNG_VD_AUDIO_INPUT_SOURCE: 'samsungvd.audioInputSource'>,
            <Capability.MEDIA_PLAYBACK: 'mediaPlayback'>,
            <Capability.AUDIO_NOTIFICATION: 'audioNotification'>,
            <Capability.SAMSUNG_VD_SOUND_FROM: 'samsungvd.soundFrom'>,
            <Capability.SAMSUNG_VD_THING_STATUS: 'samsungvd.thingStatus'>,
            <Capability.SAMSUNG_VD_AUDIO_GROUP_INFO: 'samsungvd.audioGroupInfo'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.NETWORK_AUDIO: 'NetworkAudio'>,
          'user_category': None,
        }),
      ]),
      'device_id': '0d94e5db-8501-2355-eb4f-214163702cac',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Network Audio Player',
      'label': 'Soundbar Living',
      'location_id': 'c4189ac1-208f-461a-8ab6-ea67937b3743',
      'name': 'Soundbar',
      'ocf': dict({
        'device_type': 'oic.d.networkaudio',
        'firmware_version': 'SAT-iMX8M23WWC-1010.5',
        'hardware_version': '',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'HW-Q990C',
        'name': 'Soundbar Living',
        'platform_os': 'Tizen',
        'platform_version': '7.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'VD-NetworkAudio-002S',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_WIFI_KIT_SUB_DEVICES: 'samsungce.wifiKitSubDevices'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.AIR_CONDITIONER: 'AirConditioner'>,
          'user_category': None,
        }),
      ]),
      'device_id': '0e168539-061a-5f02-2beb-cc5cb6bb3b7b',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Air Conditioner',
      'label': 'Kit AC Wifi',
      'location_id': 'c4189ac1-208f-461a-8ab6-ea67937b3743',
      'name': '[system a/c] Samsung',
      'ocf': dict({
        'device_type': 'oic.d.airconditioner',
        'firmware_version': '20240611.1',
        'hardware_version': '',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'MIM-H04N|240611|61FFFF00001411000000000000000000',
        'name': '[system a/c] Samsung',
        'platform_os': 'Tizen',
        'platform_version': '4.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'DA-SAC-WIFIKIT-000001',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.AIR_CONDITIONER_MODE: 'airConditionerMode'>,
            <Capability.AIR_CONDITIONER_FAN_MODE: 'airConditionerFanMode'>,
            <Capability.FAN_OSCILLATION_MODE: 'fanOscillationMode'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>,
            <Capability.RELATIVE_HUMIDITY_MEASUREMENT: 'relativeHumidityMeasurement'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>,
            <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.AIR_QUALITY_SENSOR: 'airQualitySensor'>,
            <Capability.DUST_SENSOR: 'dustSensor'>,
            <Capability.VERY_FINE_DUST_SENSOR: 'veryFineDustSensor'>,
            <Capability.CUSTOM_SPI_MODE: 'custom.spiMode'>,
            <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>,
            <Capability.CUSTOM_AIR_CONDITIONER_OPTIONAL_MODE: 'custom.airConditionerOptionalMode'>,
            <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>,
            <Capability.CUSTOM_DUST_FILTER: 'custom.dustFilter'>,
            <Capability.CUSTOM_AUTO_CLEANING_MODE: 'custom.autoCleaningMode'>,
            <Capability.CUSTOM_DEVICE_REPORT_STATE_CONFIGURATION: 'custom.deviceReportStateConfiguration'>,
            <Capability.CUSTOM_DEODOR_FILTER: 'custom.deodorFilter'>,
            <Capability.CUSTOM_HEPA_FILTER: 'custom.hepaFilter'>,
            <Capability.CUSTOM_VERY_FINE_DUST_FILTER: 'custom.veryFineDustFilter'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_SAC_DISPLAY_CONDITION: 'samsungce.sacDisplayCondition'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.AIR_CONDITIONER: 'AirConditioner'>,
          'user_category': None,
        }),
      ]),
      'device_id': '0e168539-061a-5f02-2beb-000001200000',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Air Conditioner',
      'label': 'Aire Oficina',
      'location_id': 'c4189ac1-208f-461a-8ab6-ea67937b3743',
      'name': 'Air Conditioner',
      'ocf': dict({
        'device_type': 'oic.d.airconditioner',
        'firmware_version': '20240611.1',
        'hardware_version': '',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'SAC_RAC|230127|610C0A00001700890400010000000000',
        'name': 'Air Conditioner',
        'platform_os': 'Tizen',
        'platform_version': '4.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'DA-SAC-INDOOR-000001-SUB',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.AIR_CONDITIONER_MODE: 'airConditionerMode'>,
            <Capability.AIR_CONDITIONER_FAN_MODE: 'airConditionerFanMode'>,
            <Capability.BYPASSABLE: 'bypassable'>,
            <Capability.FAN_OSCILLATION_MODE: 'fanOscillationMode'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>,
            <Capability.RELATIVE_HUMIDITY_MEASUREMENT: 'relativeHumidityMeasurement'>,
            <Capability.AIR_QUALITY_SENSOR: 'airQualitySensor'>,
            <Capability.ODOR_SENSOR: 'odorSensor'>,
            <Capability.DUST_SENSOR: 'dustSensor'>,
            <Capability.VERY_FINE_DUST_SENSOR: 'veryFineDustSensor'>,
            <Capability.AUDIO_VOLUME: 'audioVolume'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.AUDIO_NOTIFICATION: 'audioNotification'>,
            <Capability.CUSTOM_SPI_MODE: 'custom.spiMode'>,
            <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>,
            <Capability.CUSTOM_AIR_CONDITIONER_OPTIONAL_MODE: 'custom.airConditionerOptionalMode'>,
            <Capability.CUSTOM_AIR_CONDITIONER_TROPICAL_NIGHT_MODE: 'custom.airConditionerTropicalNightMode'>,
            <Capability.CUSTOM_AUTO_CLEANING_MODE: 'custom.autoCleaningMode'>,
            <Capability.CUSTOM_DEVICE_REPORT_STATE_CONFIGURATION: 'custom.deviceReportStateConfiguration'>,
            <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>,
            <Capability.CUSTOM_DUST_FILTER: 'custom.dustFilter'>,
            <Capability.CUSTOM_VERY_FINE_DUST_FILTER: 'custom.veryFineDustFilter'>,
            <Capability.CUSTOM_DEODOR_FILTER: 'custom.deodorFilter'>,
            <Capability.CUSTOM_ELECTRIC_HEPA_FILTER: 'custom.electricHepaFilter'>,
            <Capability.CUSTOM_DO_NOT_DISTURB_MODE: 'custom.doNotDisturbMode'>,
            <Capability.CUSTOM_PERIODIC_SENSING: 'custom.periodicSensing'>,
            <Capability.CUSTOM_AIR_CONDITIONER_ODOR_CONTROLLER: 'custom.airConditionerOdorController'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.SAMSUNG_CE_ALWAYS_ON_SENSING: 'samsungce.alwaysOnSensing'>,
            <Capability.SAMSUNG_CE_AIR_CONDITIONER_BEEP: 'samsungce.airConditionerBeep'>,
            <Capability.SAMSUNG_CE_AIR_CONDITIONER_LIGHTING: 'samsungce.airConditionerLighting'>,
            <Capability.SAMSUNG_CE_AIR_QUALITY_HEALTH_CONCERN: 'samsungce.airQualityHealthConcern'>,
            <Capability.SAMSUNG_CE_BUTTON_DISPLAY_CONDITION: 'samsungce.buttonDisplayCondition'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
            <Capability.SAMSUNG_CE_DUST_FILTER_ALARM: 'samsungce.dustFilterAlarm'>,
            <Capability.SAMSUNG_CE_INDIVIDUAL_CONTROL_LOCK: 'samsungce.individualControlLock'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.SAMSUNG_CE_SELF_CHECK: 'samsungce.selfCheck'>,
            <Capability.SAMSUNG_CE_SILENT_ACTION: 'samsungce.silentAction'>,
            <Capability.SAMSUNG_CE_QUICK_CONTROL: 'samsungce.quickControl'>,
            <Capability.SAMSUNG_CE_WELCOME_COOLING: 'samsungce.welcomeCooling'>,
            <Capability.SAMSUNG_CE_UNAVAILABLE_CAPABILITIES: 'samsungce.unavailableCapabilities'>,
            <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>,
            <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>,
            <Capability.SEC_CALM_CONNECTION_CARE: 'sec.calmConnectionCare'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.AIR_CONDITIONER: 'AirConditioner'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'bcedebe0-b3e9-4536-2b7c-dbc74dc29fce',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Air Conditioner',
      'label': 'Aire Estar Segundo Piso',
      'location_id': 'c4189ac1-208f-461a-8ab6-ea67937b3743',
      'name': 'Samsung-Room-Air-Conditioner',
      'ocf': dict({
        'device_type': 'oic.d.airconditioner',
        'firmware_version': 'ARA-WW-TP1-23-GLOBAL_11240702',
        'hardware_version': 'Realtek',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'ARA-WW-TP1-23-GLOBAL|10247441|60010535001711F54E00082200910000',
        'name': 'Samsung-Room-Air-Conditioner',
        'platform_os': 'TizenRT 3.1',
        'platform_version': 'DAWIT 2.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'DA-AC-RAC-01001',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
  ])
# ---
# name: test_fetching_devices[devices_7]
  list([
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.AIR_CONDITIONER_MODE: 'airConditionerMode'>,
            <Capability.AIR_CONDITIONER_FAN_MODE: 'airConditionerFanMode'>,
            <Capability.FAN_OSCILLATION_MODE: 'fanOscillationMode'>,
            <Capability.AIR_QUALITY_SENSOR: 'airQualitySensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>,
            <Capability.RELATIVE_HUMIDITY_MEASUREMENT: 'relativeHumidityMeasurement'>,
            <Capability.DUST_SENSOR: 'dustSensor'>,
            <Capability.VERY_FINE_DUST_SENSOR: 'veryFineDustSensor'>,
            <Capability.AUDIO_VOLUME: 'audioVolume'>,
            <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.CUSTOM_SPI_MODE: 'custom.spiMode'>,
            <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>,
            <Capability.CUSTOM_AIR_CONDITIONER_OPTIONAL_MODE: 'custom.airConditionerOptionalMode'>,
            <Capability.CUSTOM_AIR_CONDITIONER_TROPICAL_NIGHT_MODE: 'custom.airConditionerTropicalNightMode'>,
            <Capability.CUSTOM_AUTO_CLEANING_MODE: 'custom.autoCleaningMode'>,
            <Capability.CUSTOM_DEVICE_REPORT_STATE_CONFIGURATION: 'custom.deviceReportStateConfiguration'>,
            <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>,
            <Capability.CUSTOM_DUST_FILTER: 'custom.dustFilter'>,
            <Capability.CUSTOM_AIR_CONDITIONER_ODOR_CONTROLLER: 'custom.airConditionerOdorController'>,
            <Capability.CUSTOM_DEODOR_FILTER: 'custom.deodorFilter'>,
            <Capability.CUSTOM_DISABLED_COMPONENTS: 'custom.disabledComponents'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_DONGLE_SOFTWARE_INSTALLATION: 'samsungce.dongleSoftwareInstallation'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.SAMSUNG_CE_SELF_CHECK: 'samsungce.selfCheck'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.AIR_CONDITIONER: 'AirConditioner'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.AIR_CONDITIONER_MODE: 'airConditionerMode'>,
            <Capability.AIR_CONDITIONER_FAN_MODE: 'airConditionerFanMode'>,
            <Capability.FAN_OSCILLATION_MODE: 'fanOscillationMode'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>,
            <Capability.RELATIVE_HUMIDITY_MEASUREMENT: 'relativeHumidityMeasurement'>,
            <Capability.AIR_QUALITY_SENSOR: 'airQualitySensor'>,
            <Capability.DUST_SENSOR: 'dustSensor'>,
            <Capability.VERY_FINE_DUST_SENSOR: 'veryFineDustSensor'>,
            <Capability.ODOR_SENSOR: 'odorSensor'>,
            <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>,
            <Capability.AUDIO_VOLUME: 'audioVolume'>,
            <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>,
            <Capability.CUSTOM_AUTO_CLEANING_MODE: 'custom.autoCleaningMode'>,
            <Capability.CUSTOM_AIR_CONDITIONER_TROPICAL_NIGHT_MODE: 'custom.airConditionerTropicalNightMode'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.OCF: 'ocf'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>,
            <Capability.CUSTOM_SPI_MODE: 'custom.spiMode'>,
            <Capability.CUSTOM_AIR_CONDITIONER_OPTIONAL_MODE: 'custom.airConditionerOptionalMode'>,
            <Capability.CUSTOM_DEVICE_REPORT_STATE_CONFIGURATION: 'custom.deviceReportStateConfiguration'>,
            <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>,
            <Capability.CUSTOM_DUST_FILTER: 'custom.dustFilter'>,
            <Capability.CUSTOM_AIR_CONDITIONER_ODOR_CONTROLLER: 'custom.airConditionerOdorController'>,
            <Capability.CUSTOM_DEODOR_FILTER: 'custom.deodorFilter'>,
          ]),
          'id': '1',
          'label': '1',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
      ]),
      'device_id': '96a5ef74-5832-a84b-f1f7-ca799957065d',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Air Conditioner',
      'label': 'AC Office Granit',
      'location_id': '58d3fd7c-c512-4da3-b500-ef269382756c',
      'name': '[room a/c] Samsung',
      'ocf': dict({
        'device_type': 'oic.d.airconditioner',
        'firmware_version': '0.1.0',
        'hardware_version': '1.0',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'ARTIK051_KRAC_18K|10193441|60010132001111110200000000000000',
        'name': '[room a/c] Samsung',
        'platform_os': 'TizenRT2.0',
        'platform_version': '0G3MPDCKA00010E',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'DA-AC-RAC-000001',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
  ])
# ---
# name: test_fetching_devices[devices_8]
  list([
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SOUND_SENSOR: 'soundSensor'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.VIDEO_STREAM: 'videoStream'>,
            <Capability.MOTION_SENSOR: 'motionSensor'>,
            <Capability.VIDEO_CAPTURE: 'videoCapture'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.ALARM: 'alarm'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.CAMERA: 'Camera'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'e5bba37c-fc5d-4c1c-9644-750e80d94841',
      'device_manufacturer_code': 'Arlo',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Basement Door',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'c2c-arlo-pro-3-switch',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.LEGENDABSOLUTE60149_LEVEL_STEPS: 'legendabsolute60149.levelSteps'>,
            <Capability.LEGENDABSOLUTE60149_RANDOM_ON_OFF1: 'legendabsolute60149.randomOnOff1'>,
            <Capability.LEGENDABSOLUTE60149_RANDOM_NEXT_STEP: 'legendabsolute60149.randomNextStep'>,
            <Capability.LEGENDABSOLUTE60149_PROGRESSIVE_ON1: 'legendabsolute60149.progressiveOn1'>,
            <Capability.LEGENDABSOLUTE60149_PROGRESSIVE_OFF1: 'legendabsolute60149.progressiveOff1'>,
            <Capability.LEGENDABSOLUTE60149_FORCED_ON_LEVEL: 'legendabsolute60149.forcedOnLevel'>,
            <Capability.LEGENDABSOLUTE60149_EFFECTS_SET_COMMAND: 'legendabsolute60149.effectsSetCommand'>,
            <Capability.LEGENDABSOLUTE60149_MIRROR_GROUP_FUNCTION: 'legendabsolute60149.mirrorGroupFunction'>,
            <Capability.LEGENDABSOLUTE60149_GET_GROUPS: 'legendabsolute60149.getGroups'>,
            <Capability.LEGENDABSOLUTE60149_SIGNAL_METRICS: 'legendabsolute60149.signalMetrics'>,
            <Capability.LEGENDABSOLUTE60149_DRIVER_VERSION1: 'legendabsolute60149.driverVersion1'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.SMART_PLUG: 'SmartPlug'>,
          'user_category': <Category.SMART_PLUG: 'SmartPlug'>,
        }),
      ]),
      'device_id': '0b5577db-5074-4b70-a2c5-efec286d264d',
      'device_manufacturer_code': 'TCPi',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Den Lamp',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'switch-level',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.POWER_METER: 'powerMeter'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Entryway Lamp',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': <Category.LIGHT: 'Light'>,
        }),
      ]),
      'device_id': '4a59f635-9f0a-4a6c-a2f0-ffb7ef182a7c',
      'device_manufacturer_code': 'CentraLite',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Entryway Lamp',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'Outlet',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'Table Den Lamp',
          'manufacturer_category': <Category.LIGHT: 'Light'>,
          'user_category': <Category.LIGHT: 'Light'>,
        }),
      ]),
      'device_id': '6ca56087-481f-4e93-9727-fb91049fe396',
      'device_manufacturer_code': 'sengled',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Table Den Lamp',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'Sengled Light',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
          ]),
          'id': 'main',
          'label': 'Floor Lamp',
          'manufacturer_category': <Category.LIGHT: 'Light'>,
          'user_category': <Category.LIGHT: 'Light'>,
        }),
      ]),
      'device_id': '265e653b-3c0b-4fa6-8e2a-f6a69c7040f0',
      'device_manufacturer_code': 'IKEA of Sweden',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Floor Lamp',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'ZigBee White Color Temperature Bulb',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Masterbed room lights',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': <Category.SWITCH: 'Switch'>,
        }),
      ]),
      'device_id': '8f873071-a9aa-4580-a736-8f5f696e044a',
      'device_manufacturer_code': '0063-4944-3130',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Masterbed room lights',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'GE In-Wall Smart Dimmer',
      'ocf': None,
      'type': <DeviceType.ZWAVE: 'ZWAVE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
          ]),
          'id': 'relay1',
          'label': 'Relay 1',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
          ]),
          'id': 'relay2',
          'label': 'Relay 2',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
          ]),
          'id': 'relay3',
          'label': 'Relay 3',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.PLATEMUSIC11009_FIRMWARE: 'platemusic11009.firmware'>,
            <Capability.PLATEMUSIC11009_DEVICE_NETWORK_ID: 'platemusic11009.deviceNetworkId'>,
            <Capability.PLATEMUSIC11009_ASSOCIATION_GROUP_TWO: 'platemusic11009.associationGroupTwo'>,
            <Capability.PLATEMUSIC11009_ASSOCIATION_GROUP_THREE: 'platemusic11009.associationGroupThree'>,
            <Capability.PLATEMUSIC11009_ASSOCIATION_GROUP_FOUR: 'platemusic11009.associationGroupFour'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Main',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': <Category.SWITCH: 'Switch'>,
        }),
      ]),
      'device_id': '803cb0d9-addd-4c2d-aaef-d4e20bf88228',
      'device_manufacturer_code': '027A-A000-A00A',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Fireplace',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'zooz-zen16-multirelay',
      'ocf': None,
      'type': <DeviceType.ZWAVE: 'ZWAVE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Basement Hall',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': <Category.SWITCH: 'Switch'>,
        }),
      ]),
      'device_id': '09076422-62cc-4b2d-8beb-b53bc451c704',
      'device_manufacturer_code': '0063-4944-3130',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Basement Hall',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'GE In-Wall Smart Dimmer',
      'ocf': None,
      'type': <DeviceType.ZWAVE: 'ZWAVE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SOUND_SENSOR: 'soundSensor'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.VIDEO_STREAM: 'videoStream'>,
            <Capability.MOTION_SENSOR: 'motionSensor'>,
            <Capability.VIDEO_CAPTURE: 'videoCapture'>,
            <Capability.BATTERY: 'battery'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.CAMERA: 'Camera'>,
          'user_category': None,
        }),
      ]),
      'device_id': '6c582006-aae9-47d0-a9ff-6573fed3b809',
      'device_manufacturer_code': 'Arlo',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Garage Cam',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'c2c-arlo-go-switch',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THREE_AXIS: 'threeAxis'>,
            <Capability.ACCELERATION_SENSOR: 'accelerationSensor'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Deck Door',
          'manufacturer_category': <Category.MULTI_FUNCTIONAL_SENSOR: 'MultiFunctionalSensor'>,
          'user_category': <Category.DOOR: 'Door'>,
        }),
      ]),
      'device_id': '7d246592-93db-4d72-a10d-5a51793ece8c',
      'device_manufacturer_code': 'SmartThings',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Deck Door',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'Multipurpose Sensor',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.LOCK: 'lock'>,
            <Capability.LOCK_CODES: 'lockCodes'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Basement Door Lock',
          'manufacturer_category': <Category.SMART_LOCK: 'SmartLock'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'a9f587c5-5d8b-4273-8907-e7f609af5158',
      'device_manufacturer_code': 'Yale',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Basement Door Lock',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'Yale Push Button Deadbolt Lock',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.AUDIO_VOLUME: 'audioVolume'>,
            <Capability.AUDIO_MUTE: 'audioMute'>,
            <Capability.TV_CHANNEL: 'tvChannel'>,
            <Capability.MEDIA_INPUT_SOURCE: 'mediaInputSource'>,
            <Capability.MEDIA_PLAYBACK: 'mediaPlayback'>,
            <Capability.MEDIA_TRACK_CONTROL: 'mediaTrackControl'>,
            <Capability.CUSTOM_ERROR: 'custom.error'>,
            <Capability.CUSTOM_PICTURE_MODE: 'custom.picturemode'>,
            <Capability.CUSTOM_SOUND_MODE: 'custom.soundmode'>,
            <Capability.CUSTOM_ACCESSIBILITY: 'custom.accessibility'>,
            <Capability.CUSTOM_LAUNCH_APP: 'custom.launchapp'>,
            <Capability.CUSTOM_RECORDING: 'custom.recording'>,
            <Capability.CUSTOM_TV_SEARCH: 'custom.tvsearch'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.SAMSUNG_VD_REMOTE_CONTROL: 'samsungvd.remoteControl'>,
            <Capability.SAMSUNG_VD_AMBIENT: 'samsungvd.ambient'>,
            <Capability.SAMSUNG_VD_AMBIENT_CONTENT: 'samsungvd.ambientContent'>,
            <Capability.SAMSUNG_VD_MEDIA_INPUT_SOURCE: 'samsungvd.mediaInputSource'>,
            <Capability.SAMSUNG_VD_SUPPORTS_FEATURES: 'samsungvd.supportsFeatures'>,
            <Capability.SAMSUNG_VD_SUPPORTS_POWER_ON_BY_OCF: 'samsungvd.supportsPowerOnByOcf'>,
            <Capability.SEC_DEVICE_CONNECTION_STATE: 'sec.deviceConnectionState'>,
            <Capability.SAMSUNG_VD_FIRMWARE_VERSION: 'samsungvd.firmwareVersion'>,
            <Capability.SAMSUNG_VD_DEVICE_CATEGORY: 'samsungvd.deviceCategory'>,
            <Capability.SAMSUNG_VD_THING_STATUS: 'samsungvd.thingStatus'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.EXECUTE: 'execute'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.SMART_MONITOR: 'SmartMonitor'>,
          'user_category': None,
        }),
      ]),
      'device_id': '3f01bf2b-e9a3-3543-1047-42320283a5c1',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'x.com.st.d.monitor',
      'label': '27" Smart Monitor M5',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': '27" Smart Monitor M5',
      'ocf': dict({
        'device_type': 'x.com.st.d.monitor',
        'firmware_version': 'T-NKLBWWC-1651.10',
        'hardware_version': '',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'LS27BM501ENXZA',
        'name': '27" Smart Monitor M5',
        'platform_os': 'Tizen',
        'platform_version': '6.5',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'VD-SMONITOR-2022',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Basement Lights',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': <Category.SWITCH: 'Switch'>,
        }),
      ]),
      'device_id': '9b479ba0-81e1-4877-87c5-c301a87cbdab',
      'device_manufacturer_code': None,
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Basement Lights',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'Virtual Dimmer Switch',
      'ocf': None,
      'type': <DeviceType.VIRTUAL: 'VIRTUAL'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': <Category.SWITCH: 'Switch'>,
        }),
      ]),
      'device_id': 'c1107a0c-fa71-43c5-8ff9-a128ea6c4f20',
      'device_manufacturer_code': '0063-4944-3130',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Kitchen Lights',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'ge-dimmer-assoc',
      'ocf': None,
      'type': <DeviceType.ZWAVE: 'ZWAVE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.POWER_METER: 'powerMeter'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Entryway Tree',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': <Category.SWITCH: 'Switch'>,
        }),
      ]),
      'device_id': '8eacf25f-aa33-4d9e-ba90-0e4ac3ceb8e0',
      'device_manufacturer_code': 'CentraLite',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Entryway Tree',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'Outlet',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.CONTACT_SENSOR: 'ContactSensor'>,
          'user_category': <Category.CONTACT_SENSOR: 'ContactSensor'>,
        }),
      ]),
      'device_id': '2d9a892b-1c93-45a5-84cb-0e81889498c6',
      'device_manufacturer_code': 'Visonic',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': '.Front Door Open/Closed Sensor',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'contact-profile',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.BRIDGE: 'bridge'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.HUB: 'Hub'>,
          'user_category': None,
        }),
      ]),
      'device_id': '9d686e56-4907-4359-a131-6a3f3f51e521',
      'device_manufacturer_code': None,
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Hub - 27" Smart Monitor M5',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'SmartThings Hub',
      'ocf': None,
      'type': <DeviceType.HUB: 'HUB'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.OCF: 'ocf'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.REFRIGERATION: 'refrigeration'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>,
            <Capability.CUSTOM_DEODOR_FILTER: 'custom.deodorFilter'>,
            <Capability.CUSTOM_DEVICE_REPORT_STATE_CONFIGURATION: 'custom.deviceReportStateConfiguration'>,
            <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>,
            <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_DISABLED_COMPONENTS: 'custom.disabledComponents'>,
            <Capability.CUSTOM_WATER_FILTER: 'custom.waterFilter'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_DONGLE_SOFTWARE_INSTALLATION: 'samsungce.dongleSoftwareInstallation'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
            <Capability.SAMSUNG_CE_FRIDGE_VACATION_MODE: 'samsungce.fridgeVacationMode'>,
            <Capability.SAMSUNG_CE_POWER_COOL: 'samsungce.powerCool'>,
            <Capability.SAMSUNG_CE_POWER_FREEZE: 'samsungce.powerFreeze'>,
            <Capability.SAMSUNG_CE_SABBATH_MODE: 'samsungce.sabbathMode'>,
            <Capability.SAMSUNG_CE_QUICK_CONTROL: 'samsungce.quickControl'>,
            <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.REFRIGERATOR: 'Refrigerator'>,
          'user_category': <Category.REFRIGERATOR: 'Refrigerator'>,
        }),
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>,
            <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>,
            <Capability.SAMSUNG_CE_FREEZER_CONVERT_MODE: 'samsungce.freezerConvertMode'>,
            <Capability.SAMSUNG_CE_UNAVAILABLE_CAPABILITIES: 'samsungce.unavailableCapabilities'>,
          ]),
          'id': 'freezer',
          'label': 'freezer',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>,
            <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>,
            <Capability.SAMSUNG_CE_UNAVAILABLE_CAPABILITIES: 'samsungce.unavailableCapabilities'>,
          ]),
          'id': 'cooler',
          'label': 'cooler',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>,
          ]),
          'id': 'cvroom',
          'label': 'cvroom',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>,
            <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>,
            <Capability.SAMSUNG_CE_FREEZER_CONVERT_MODE: 'samsungce.freezerConvertMode'>,
            <Capability.SAMSUNG_CE_UNAVAILABLE_CAPABILITIES: 'samsungce.unavailableCapabilities'>,
          ]),
          'id': 'onedoor',
          'label': 'onedoor',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'icemaker',
          'label': 'icemaker',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'icemaker-02',
          'label': 'icemaker-02',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.SAMSUNG_CE_FRIDGE_PANTRY_INFO: 'samsungce.fridgePantryInfo'>,
            <Capability.SAMSUNG_CE_FRIDGE_PANTRY_MODE: 'samsungce.fridgePantryMode'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'pantry-01',
          'label': 'pantry-01',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.SAMSUNG_CE_FRIDGE_PANTRY_INFO: 'samsungce.fridgePantryInfo'>,
            <Capability.SAMSUNG_CE_FRIDGE_PANTRY_MODE: 'samsungce.fridgePantryMode'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'pantry-02',
          'label': 'pantry-02',
          'manufacturer_category': <Category.OTHER: 'Other'>,
          'user_category': None,
        }),
      ]),
      'device_id': '7db87911-7dce-1cf2-7119-b953432a2f09',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Refrigerator',
      'label': 'Refrigerator',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': '[refrigerator] Samsung',
      'ocf': dict({
        'device_type': 'oic.d.refrigerator',
        'firmware_version': 'A-RFWW-TP2-21-COMMON_20220110',
        'hardware_version': 'MediaTek',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'TP2X_REF_20K|00115641|0004014D011411200103000020000000',
        'name': '[refrigerator] Samsung',
        'platform_os': 'TizenRT 1.0 + IPv6',
        'platform_version': 'DAWIT 2.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'DA-REF-NORMAL-000001',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Car Garage Door',
          'manufacturer_category': <Category.CONTACT_SENSOR: 'ContactSensor'>,
          'user_category': <Category.GARAGE_DOOR: 'GarageDoor'>,
        }),
      ]),
      'device_id': 'f4e0517a-d94f-4bd6-a464-222c8c413a66',
      'device_manufacturer_code': 'Visonic',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Car Garage Door',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'Visonic Door/Window Sensor',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Mail Announce',
          'manufacturer_category': <Category.CONTACT_SENSOR: 'ContactSensor'>,
          'user_category': None,
        }),
      ]),
      'device_id': '37c0cdda-9158-41ad-9635-4ca32df9fe5b',
      'device_manufacturer_code': None,
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Mail Announce',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'Virtual Contact1',
      'ocf': None,
      'type': <DeviceType.VIRTUAL: 'VIRTUAL'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.POWER_METER: 'powerMeter'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Radon Fan',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': <Category.SWITCH: 'Switch'>,
        }),
      ]),
      'device_id': 'cfcd9a21-a943-4519-9972-3c7890cd25b1',
      'device_manufacturer_code': 'CentraLite',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Radon Fan',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'Outlet',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.POWER_METER: 'powerMeter'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Humidifier Outlet',
          'manufacturer_category': <Category.SMART_PLUG: 'SmartPlug'>,
          'user_category': None,
        }),
      ]),
      'device_id': '1a987293-0962-4447-99d4-aa82655ffb55',
      'device_manufacturer_code': 'CentraLite',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Heater Outlet',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'Outlet',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
          ]),
          'id': 'main',
          'label': 'Saima Lamp',
          'manufacturer_category': <Category.LIGHT: 'Light'>,
          'user_category': <Category.LIGHT: 'Light'>,
        }),
      ]),
      'device_id': '6b5535c7-c039-42ee-9970-8af86c6b0775',
      'device_manufacturer_code': 'IKEA of Sweden',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Saimas Lamp',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'TRÅDFRI bulb E26 WS opal 980lm',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Fireplace Lights',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': None,
        }),
      ]),
      'device_id': '6a2e5058-36f3-4668-aa43-49a66f8df93d',
      'device_manufacturer_code': None,
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Fireplace Lights',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'Virtual Switch',
      'ocf': None,
      'type': <DeviceType.VIRTUAL: 'VIRTUAL'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': <Category.SWITCH: 'Switch'>,
        }),
      ]),
      'device_id': '4339f999-1ad2-46fb-9103-cb628b30a022',
      'device_manufacturer_code': '0063-4952-3137',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Garage Tubelight',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'switch-binary-indicator',
      'ocf': None,
      'type': <DeviceType.ZWAVE: 'ZWAVE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': <Category.SWITCH: 'Switch'>,
        }),
      ]),
      'device_id': '277e0a96-c8ec-41aa-b4cf-0bac57dc1cee',
      'device_manufacturer_code': 'LEDVANCE',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Fireplace Lights',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'basic-switch',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.POWER_METER: 'powerMeter'>,
            <Capability.ENERGY_METER: 'energyMeter'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.CURB_POWER_METER: 'CurbPowerMeter'>,
          'user_category': None,
        }),
      ]),
      'device_id': '68e786a6-7f61-4c3a-9e13-70b803cf782b',
      'device_manufacturer_code': '0086-0002-0009',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Aeon Energy Monitor',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'base-electric-meter',
      'ocf': None,
      'type': <DeviceType.ZWAVE: 'ZWAVE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SOUND_SENSOR: 'soundSensor'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.VIDEO_STREAM: 'videoStream'>,
            <Capability.MOTION_SENSOR: 'motionSensor'>,
            <Capability.VIDEO_CAPTURE: 'videoCapture'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.ALARM: 'alarm'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.CAMERA: 'Camera'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'e879673b-892c-4a0d-8c54-2dcc38d96ca0',
      'device_manufacturer_code': 'Arlo',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Freezer Room',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'c2c-arlo-pro-3-switch',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.BUTTON: 'button'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': <Category.SWITCH: 'Switch'>,
        }),
      ]),
      'device_id': '1691801c-ae59-438b-89dc-f2c761fe937d',
      'device_manufacturer_code': '0063-4952-3038',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Masterbed Room Fan',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'ge-switch-assoc',
      'ocf': None,
      'type': <DeviceType.ZWAVE: 'ZWAVE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SOUND_SENSOR: 'soundSensor'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.VIDEO_STREAM: 'videoStream'>,
            <Capability.MOTION_SENSOR: 'motionSensor'>,
            <Capability.VIDEO_CAPTURE: 'videoCapture'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.ALARM: 'alarm'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.CAMERA: 'Camera'>,
          'user_category': None,
        }),
      ]),
      'device_id': '3c8d8a9d-649d-4edc-9a0b-4e45d0b491d1',
      'device_manufacturer_code': 'Arlo',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Backyard Floodlight',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'c2c-arlo-pro-3-switch',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.BUTTON: 'button'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': <Category.SWITCH: 'Switch'>,
        }),
      ]),
      'device_id': 'c5209cd2-fcb5-46be-b685-5b05f22dcb2c',
      'device_manufacturer_code': '0063-4944-3130',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Guest Fan',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'switch-level-indicator',
      'ocf': None,
      'type': <DeviceType.ZWAVE: 'ZWAVE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Garage Door - Side',
          'manufacturer_category': <Category.CONTACT_SENSOR: 'ContactSensor'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'bafc5147-2e48-498b-97ff-34c93fae7814',
      'device_manufacturer_code': 'Visonic',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Garage Door - Side',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'Visonic Door/Window Sensor',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SOUND_SENSOR: 'soundSensor'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.VIDEO_STREAM: 'videoStream'>,
            <Capability.MOTION_SENSOR: 'motionSensor'>,
            <Capability.VIDEO_CAPTURE: 'videoCapture'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.ALARM: 'alarm'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.CAMERA: 'Camera'>,
          'user_category': None,
        }),
      ]),
      'device_id': '4be24db2-3125-4112-a8dc-3eb1926c220a',
      'device_manufacturer_code': 'Arlo',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Sump Pump Room',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'c2c-arlo-pro-3-switch',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.PRESENCE_SENSOR: 'presenceSensor'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.MOBILE_PRESENCE: 'MobilePresence'>,
          'user_category': None,
        }),
      ]),
      'device_id': '184c67cc-69e2-44b6-8f73-55c963068ad9',
      'device_manufacturer_code': None,
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'iPhone',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'iPhone',
      'ocf': None,
      'type': <DeviceType.MOBILE: 'MOBILE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.AUDIO_VOLUME: 'audioVolume'>,
            <Capability.AUDIO_MUTE: 'audioMute'>,
            <Capability.TV_CHANNEL: 'tvChannel'>,
            <Capability.MEDIA_INPUT_SOURCE: 'mediaInputSource'>,
            <Capability.MEDIA_PLAYBACK: 'mediaPlayback'>,
            <Capability.MEDIA_TRACK_CONTROL: 'mediaTrackControl'>,
            <Capability.CUSTOM_ERROR: 'custom.error'>,
            <Capability.CUSTOM_PICTURE_MODE: 'custom.picturemode'>,
            <Capability.CUSTOM_SOUND_MODE: 'custom.soundmode'>,
            <Capability.CUSTOM_ACCESSIBILITY: 'custom.accessibility'>,
            <Capability.CUSTOM_LAUNCH_APP: 'custom.launchapp'>,
            <Capability.CUSTOM_RECORDING: 'custom.recording'>,
            <Capability.CUSTOM_TV_SEARCH: 'custom.tvsearch'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.SAMSUNG_VD_AMBIENT: 'samsungvd.ambient'>,
            <Capability.SAMSUNG_VD_AMBIENT_CONTENT: 'samsungvd.ambientContent'>,
            <Capability.SAMSUNG_VD_MEDIA_INPUT_SOURCE: 'samsungvd.mediaInputSource'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.SAMSUNG_VD_FIRMWARE_VERSION: 'samsungvd.firmwareVersion'>,
            <Capability.SAMSUNG_VD_SUPPORTS_POWER_ON_BY_OCF: 'samsungvd.supportsPowerOnByOcf'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.TELEVISION: 'Television'>,
          'user_category': None,
        }),
      ]),
      'device_id': '4588d2d9-a8cf-40f4-9a0b-ed5dfbaccda1',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF TV',
      'label': '[TV] Samsung 8 Series (49)',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': '[TV] Samsung 8 Series (49)',
      'ocf': dict({
        'device_type': 'oic.d.tv',
        'firmware_version': 'T-KTMAKUC-1290.3',
        'hardware_version': '0-0',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'UN49MU8000',
        'name': '[TV] Samsung 8 Series (49)',
        'platform_os': '4.1.10',
        'platform_version': 'Tizen 3.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'VD-STV_2017_K',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.LEGENDABSOLUTE60149_LOCAL_DATE: 'legendabsolute60149.localDate'>,
            <Capability.LEGENDABSOLUTE60149_LOCAL_WEEK_DAY: 'legendabsolute60149.localWeekDay'>,
            <Capability.LEGENDABSOLUTE60149_SUN_RISE: 'legendabsolute60149.sunRise'>,
            <Capability.LEGENDABSOLUTE60149_SUN_SET: 'legendabsolute60149.sunSet'>,
            <Capability.LEGENDABSOLUTE60149_DAY_LENGTH: 'legendabsolute60149.dayLength'>,
            <Capability.LEGENDABSOLUTE60149_SUN_RISE_OFFSET1: 'legendabsolute60149.sunRiseOffset1'>,
            <Capability.LEGENDABSOLUTE60149_SUN_SET_OFFSET1: 'legendabsolute60149.sunSetOffset1'>,
            <Capability.LEGENDABSOLUTE60149_CURRENT_TIME_PERIOD: 'legendabsolute60149.currentTimePeriod'>,
            <Capability.LEGENDABSOLUTE60149_CURRENT_TWILIGHT: 'legendabsolute60149.currentTwilight'>,
            <Capability.LEGENDABSOLUTE60149_SUN_ELEVATION_ANGLE: 'legendabsolute60149.sunElevationAngle'>,
            <Capability.LEGENDABSOLUTE60149_SUN_AZIMUTH_ANGLE: 'legendabsolute60149.sunAzimuthAngle'>,
            <Capability.LEGENDABSOLUTE60149_LOCAL_HOUR_OFFSET: 'legendabsolute60149.localHourOffset'>,
            <Capability.LEGENDABSOLUTE60149_LOCAL_HOUR: 'legendabsolute60149.localHour'>,
            <Capability.LEGENDABSOLUTE60149_LOCAL_HOUR_TWO: 'legendabsolute60149.localHourTwo'>,
            <Capability.LEGENDABSOLUTE60149_LOCAL_DAY: 'legendabsolute60149.localDay'>,
            <Capability.LEGENDABSOLUTE60149_LOCAL_DAY_TWO: 'legendabsolute60149.localDayTwo'>,
            <Capability.LEGENDABSOLUTE60149_LOCAL_MONTH: 'legendabsolute60149.localMonth'>,
            <Capability.LEGENDABSOLUTE60149_LOCAL_MONTH_TWO: 'legendabsolute60149.localMonthTwo'>,
            <Capability.LEGENDABSOLUTE60149_LOCAL_YEAR: 'legendabsolute60149.localYear'>,
            <Capability.LEGENDABSOLUTE60149_LOCAL_MONTH_DAY_ONE: 'legendabsolute60149.localMonthDayOne'>,
            <Capability.LEGENDABSOLUTE60149_LOCAL_MONTH_DAY_TWO: 'legendabsolute60149.localMonthDayTwo'>,
            <Capability.LEGENDABSOLUTE60149_LOCAL_DATE_ONE: 'legendabsolute60149.localDateOne'>,
            <Capability.LEGENDABSOLUTE60149_LOCAL_DATE_TWO1: 'legendabsolute60149.localDateTwo1'>,
            <Capability.LEGENDABSOLUTE60149_EVEN_ODD_DAY: 'legendabsolute60149.evenOddDay'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.ELEVATOR: 'Elevator'>,
          'user_category': None,
        }),
      ]),
      'device_id': '9a9cb299-5279-4dea-9249-b5c153d22ba1',
      'device_manufacturer_code': 'MColmenarejo',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Virtual Calendar Device (1685810860)',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'virtual-calendar',
      'ocf': None,
      'type': <DeviceType.LAN: 'LAN'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Breakfast Table Lamps',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': <Category.LIGHT: 'Light'>,
        }),
      ]),
      'device_id': '4fddedf0-2662-476e-b1fd-aceaec17ad3a',
      'device_manufacturer_code': '0063-4944-3130',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Breakfast Table Lamps',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'GE Dimmer Switch',
      'ocf': None,
      'type': <DeviceType.ZWAVE: 'ZWAVE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.POWER_METER: 'powerMeter'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.SMART_PLUG: 'SmartPlug'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'd0268a69-abfb-4c92-a646-61cec2e510ad',
      'device_manufacturer_code': 'CentraLite',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Dimmer Debian',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'plug-level-power',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Van Garage Door',
          'manufacturer_category': <Category.CONTACT_SENSOR: 'ContactSensor'>,
          'user_category': <Category.GARAGE_DOOR: 'GarageDoor'>,
        }),
      ]),
      'device_id': '7111243f-39d6-4ed0-a277-f040e40a806d',
      'device_manufacturer_code': 'Visonic',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Van Garage Door',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'Visonic Door/Window Sensor',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Water is heating',
          'manufacturer_category': <Category.CONTACT_SENSOR: 'ContactSensor'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'ea2aa187-40fd-4140-9742-453e691c4469',
      'device_manufacturer_code': None,
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Water is heating',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'Water Heater Announce',
      'ocf': None,
      'type': <DeviceType.VIRTUAL: 'VIRTUAL'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'aae6a270-7545-470d-940f-568f955129a7',
      'device_manufacturer_code': 'TP-LINK',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Arlo Production',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'c2c-switch',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Dining Table Lamp',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': <Category.LIGHT: 'Light'>,
        }),
      ]),
      'device_id': '2533fdd0-e064-4fa2-b77b-1e17260b58d7',
      'device_manufacturer_code': '0063-4944-3130',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Formal Dining Table Lamp',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'GE Dimmer Switch',
      'ocf': None,
      'type': <DeviceType.ZWAVE: 'ZWAVE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Pi Hole',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': None,
        }),
      ]),
      'device_id': '550a1c72-65a0-4d55-b97b-75168e055398',
      'device_manufacturer_code': 'LEDVANCE',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Arlo Beta Basestation',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'SYLVANIA SMART+ Smart Plug',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.ALARM: 'alarm'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.SIREN: 'Siren'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'dba5a745-b23d-4bc2-a77d-22d65a5df704',
      'device_manufacturer_code': 'Arlo',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Base Station',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'c2c-arlo-siren',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.BUTTON: 'button'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Driveway Light',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': <Category.SWITCH: 'Switch'>,
        }),
      ]),
      'device_id': '3f82e13c-bd39-4043-bb54-7432a4e47113',
      'device_manufacturer_code': '0063-4944-3130',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Driveway Light',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'GE Dimmer Switch',
      'ocf': None,
      'type': <DeviceType.ZWAVE: 'ZWAVE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Girls Lights',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': <Category.SWITCH: 'Switch'>,
        }),
      ]),
      'device_id': '08ee0358-9f40-4afa-b5a0-3a6aba18c267',
      'device_manufacturer_code': '0063-4944-3130',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Girls Lights',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'GE Dimmer Switch',
      'ocf': None,
      'type': <DeviceType.ZWAVE: 'ZWAVE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THREE_AXIS: 'threeAxis'>,
            <Capability.ACCELERATION_SENSOR: 'accelerationSensor'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.MULTI_FUNCTIONAL_SENSOR: 'MultiFunctionalSensor'>,
          'user_category': <Category.MULTI_FUNCTIONAL_SENSOR: 'MultiFunctionalSensor'>,
        }),
      ]),
      'device_id': '9dd17f8f-cf5e-4647-a11c-d8f24cdf9b2a',
      'device_manufacturer_code': 'SmartThings',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Temp Sensor',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'st-multipurpose',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.LOCK: 'lock'>,
            <Capability.LOCK_CODES: 'lockCodes'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.SMART_LOCK: 'SmartLock'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'b3a84295-ac3c-4fb1-95e4-4a4bbb1b0bce',
      'device_manufacturer_code': '0129-8107-09D5',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Door Lock',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'base-lock',
      'ocf': None,
      'type': <DeviceType.ZWAVE: 'ZWAVE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THREE_AXIS: 'threeAxis'>,
            <Capability.ACCELERATION_SENSOR: 'accelerationSensor'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Sump Pump Room',
          'manufacturer_category': <Category.MULTI_FUNCTIONAL_SENSOR: 'MultiFunctionalSensor'>,
          'user_category': <Category.DOOR: 'Door'>,
        }),
      ]),
      'device_id': '92138ee5-d3bf-4348-98e8-445dedc319cb',
      'device_manufacturer_code': 'SmartThings',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Sump Pump Room',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'Multipurpose Sensor',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.LIGHT: 'Light'>,
          'user_category': <Category.LIGHT: 'Light'>,
        }),
      ]),
      'device_id': 'a664fe3f-cd7b-4794-bcdd-1310ecab5483',
      'device_manufacturer_code': 'TP-LINK',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Study Lights',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'c2c-dimmer',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.LIGHT: 'Light'>,
          'user_category': <Category.SMART_PLUG: 'SmartPlug'>,
        }),
      ]),
      'device_id': '7b9d924a-de0c-44f9-ac5c-f15869c59411',
      'device_manufacturer_code': 'sengled',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Study Room Lamp',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'switch-level',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.POWER_METER: 'powerMeter'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Living Room Fan',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': <Category.SWITCH: 'Switch'>,
        }),
      ]),
      'device_id': '6f4d2e72-7af4-4c96-97ab-d6b6a0d6bc4b',
      'device_manufacturer_code': 'CentraLite',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Floor Lamp',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'Outlet',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.LEGENDABSOLUTE60149_LEVEL_STEPS: 'legendabsolute60149.levelSteps'>,
            <Capability.LEGENDABSOLUTE60149_RANDOM_ON_OFF1: 'legendabsolute60149.randomOnOff1'>,
            <Capability.LEGENDABSOLUTE60149_RANDOM_NEXT_STEP: 'legendabsolute60149.randomNextStep'>,
            <Capability.LEGENDABSOLUTE60149_PROGRESSIVE_ON1: 'legendabsolute60149.progressiveOn1'>,
            <Capability.LEGENDABSOLUTE60149_PROGRESSIVE_OFF1: 'legendabsolute60149.progressiveOff1'>,
            <Capability.LEGENDABSOLUTE60149_FORCED_ON_LEVEL: 'legendabsolute60149.forcedOnLevel'>,
            <Capability.LEGENDABSOLUTE60149_EFFECTS_SET_COMMAND: 'legendabsolute60149.effectsSetCommand'>,
            <Capability.LEGENDABSOLUTE60149_MIRROR_GROUP_FUNCTION: 'legendabsolute60149.mirrorGroupFunction'>,
            <Capability.LEGENDABSOLUTE60149_GET_GROUPS: 'legendabsolute60149.getGroups'>,
            <Capability.LEGENDABSOLUTE60149_SIGNAL_METRICS: 'legendabsolute60149.signalMetrics'>,
            <Capability.LEGENDABSOLUTE60149_DRIVER_VERSION1: 'legendabsolute60149.driverVersion1'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.SMART_PLUG: 'SmartPlug'>,
          'user_category': <Category.SMART_PLUG: 'SmartPlug'>,
        }),
      ]),
      'device_id': '6c1b7cfa-7429-4f35-9d02-ab1dfd2f1297',
      'device_manufacturer_code': 'TCPi',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Dresser Lamp',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'switch-level',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.POWER_METER: 'powerMeter'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'String Lights',
          'manufacturer_category': <Category.SMART_PLUG: 'SmartPlug'>,
          'user_category': <Category.SMART_PLUG: 'SmartPlug'>,
        }),
      ]),
      'device_id': 'c5699ff6-af09-4922-901d-bb81b8345bc3',
      'device_manufacturer_code': 'CentraLite',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'String Lights',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'Outlet',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'Door Lamp',
          'manufacturer_category': <Category.LIGHT: 'Light'>,
          'user_category': <Category.LIGHT: 'Light'>,
        }),
      ]),
      'device_id': 'd48848b9-25b0-4423-8fcf-96a022ac571e',
      'device_manufacturer_code': 'TCPi',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Door Lamp',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'Light',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': <Category.SWITCH: 'Switch'>,
        }),
      ]),
      'device_id': '7bedac4c-5681-4897-a2ef-e9153cb19ba0',
      'device_manufacturer_code': '0063-4944-3130',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Guest Light',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'ge-dimmer-assoc',
      'ocf': None,
      'type': <DeviceType.ZWAVE: 'ZWAVE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'Kitchen Basin Light',
          'manufacturer_category': <Category.LIGHT: 'Light'>,
          'user_category': <Category.LIGHT: 'Light'>,
        }),
      ]),
      'device_id': '91172212-e9ff-4ca6-9626-e7af0361c9ad',
      'device_manufacturer_code': 'TCPi',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Kitchen Basin Light',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'Light',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.REFRESH: 'refresh'>,
            <Capability.BUTTON: 'button'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.VIDEO_STREAM: 'videoStream'>,
            <Capability.MOTION_SENSOR: 'motionSensor'>,
            <Capability.SOUND_SENSOR: 'soundSensor'>,
            <Capability.VIDEO_CAPTURE: 'videoCapture'>,
            <Capability.ALARM: 'alarm'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.CAMERA: 'Camera'>,
          'user_category': None,
        }),
      ]),
      'device_id': '18c47ea4-f08a-4a70-9e95-23fd23182cc2',
      'device_manufacturer_code': 'Arlo',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Front Doorbell',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'c2c-arlo-wired-video-doorbell-battery-no-switch',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Formal Living Room',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': <Category.SWITCH: 'Switch'>,
        }),
      ]),
      'device_id': 'a9d42ef0-f972-44b0-86bc-efd6569a1aef',
      'device_manufacturer_code': '0063-4944-3130',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Formal Living Room',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'GE Dimmer Switch',
      'ocf': None,
      'type': <DeviceType.ZWAVE: 'ZWAVE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.POWER_METER: 'powerMeter'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Water Boiler',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': <Category.SWITCH: 'Switch'>,
        }),
      ]),
      'device_id': '829da938-6e92-4a93-8923-7c67f9663c03',
      'device_manufacturer_code': 'CentraLite',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Water Boiler',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'Outlet',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'TV Room',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': <Category.SWITCH: 'Switch'>,
        }),
      ]),
      'device_id': 'f3c18803-cbec-48e3-8f15-3c31f302d68b',
      'device_manufacturer_code': '0063-4944-3130',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'TV Room',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'GE In-Wall Smart Dimmer',
      'ocf': None,
      'type': <DeviceType.ZWAVE: 'ZWAVE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
          ]),
          'id': 'main',
          'label': 'Guest Lamp',
          'manufacturer_category': <Category.LIGHT: 'Light'>,
          'user_category': <Category.LIGHT: 'Light'>,
        }),
      ]),
      'device_id': '0781c9d0-92cb-4c7b-bb5b-2f2dbe0c41f3',
      'device_manufacturer_code': 'IKEA of Sweden',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Guest Lamp',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'TRÅDFRI bulb E26 WS opal 980lm',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.PRESENCE_SENSOR: 'presenceSensor'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.MOBILE_PRESENCE: 'MobilePresence'>,
          'user_category': None,
        }),
      ]),
      'device_id': '16fc526e-dd7d-49a1-bac6-220f664f92ca',
      'device_manufacturer_code': None,
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'iPhone',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'iPhone',
      'ocf': None,
      'type': <DeviceType.MOBILE: 'MOBILE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.BRIDGE: 'bridge'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.HUB: 'Hub'>,
          'user_category': None,
        }),
      ]),
      'device_id': '074fa784-8be8-4c70-8e22-6f5ed6f81b7e',
      'device_manufacturer_code': None,
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Home Hub',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'SmartThings v2 Hub',
      'ocf': None,
      'type': <DeviceType.HUB: 'HUB'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THREE_AXIS: 'threeAxis'>,
            <Capability.ACCELERATION_SENSOR: 'accelerationSensor'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Mail Box',
          'manufacturer_category': <Category.MULTI_FUNCTIONAL_SENSOR: 'MultiFunctionalSensor'>,
          'user_category': <Category.MULTI_FUNCTIONAL_SENSOR: 'MultiFunctionalSensor'>,
        }),
      ]),
      'device_id': '374ba6fa-5a08-4ea2-969c-1fa43d86e21f',
      'device_manufacturer_code': 'SmartThings',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Mail Box',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'Multipurpose Sensor',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SOUND_SENSOR: 'soundSensor'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.VIDEO_STREAM: 'videoStream'>,
            <Capability.MOTION_SENSOR: 'motionSensor'>,
            <Capability.VIDEO_CAPTURE: 'videoCapture'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.ALARM: 'alarm'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.CAMERA: 'Camera'>,
          'user_category': None,
        }),
      ]),
      'device_id': '165c0b42-64b9-4679-9dfb-0c5eff729fb2',
      'device_manufacturer_code': 'Arlo',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Driveway Floodlight',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'c2c-arlo-pro-3-switch',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': <Category.SWITCH: 'Switch'>,
        }),
      ]),
      'device_id': 'f45bd97b-6edd-41e5-b65d-9dea2eeaff0b',
      'device_manufacturer_code': 'TP-LINK',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Sump Pump',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'c2c-switch',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THREE_AXIS: 'threeAxis'>,
            <Capability.ACCELERATION_SENSOR: 'accelerationSensor'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Basement Exit Door',
          'manufacturer_category': <Category.MULTI_FUNCTIONAL_SENSOR: 'MultiFunctionalSensor'>,
          'user_category': <Category.DOOR: 'Door'>,
        }),
      ]),
      'device_id': 'a1e6525c-1e24-403c-b18c-eecb65e22ccf',
      'device_manufacturer_code': 'SmartThings',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Basement Exit Door',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'Multipurpose Sensor',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.BUTTON: 'button'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.REMOTE_CONTROLLER: 'RemoteController'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.BUTTON: 'button'>,
          ]),
          'id': 'button1',
          'label': 'button1',
          'manufacturer_category': <Category.REMOTE_CONTROLLER: 'RemoteController'>,
          'user_category': None,
        }),
        dict({
          'capabilities': list([
            <Capability.BUTTON: 'button'>,
          ]),
          'id': 'button2',
          'label': 'button2',
          'manufacturer_category': <Category.REMOTE_CONTROLLER: 'RemoteController'>,
          'user_category': None,
        }),
      ]),
      'device_id': '115236ea-59e5-4cd4-bade-d67c409967bc',
      'device_manufacturer_code': 'IKEA of Sweden',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'IKEA Remote Control',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'two-buttons-battery',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.LEGENDABSOLUTE60149_CREATE_DEVICE2: 'legendabsolute60149.createDevice2'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.SMART_PLUG: 'SmartPlug'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'd20891e5-59b4-46ce-9184-b7fdf0c7ae4c',
      'device_manufacturer_code': 'MColmenarejo',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'MAIN Virtual Devices',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'main-virtual-device',
      'ocf': None,
      'type': <DeviceType.LAN: 'LAN'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.LIGHT: 'Light'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'f3e184b2-631a-47b2-b583-32ac2fec9e3c',
      'device_manufacturer_code': 'sengled',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Sump Pump Room Lamp',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'on-off-level',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Boys Lights',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': <Category.SWITCH: 'Switch'>,
        }),
      ]),
      'device_id': 'f27d0b27-24fd-4d8c-b003-d3d7aaba1e70',
      'device_manufacturer_code': '0063-4944-3130',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Boys Lights',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'GE Dimmer Switch',
      'ocf': None,
      'type': <DeviceType.ZWAVE: 'ZWAVE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Basement Exit Light',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': <Category.SWITCH: 'Switch'>,
        }),
      ]),
      'device_id': 'aaedaf28-2ae0-4c1d-b57e-87f6a420c298',
      'device_manufacturer_code': '0063-4944-3130',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Basement Exit Light',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'GE Dimmer Switch',
      'ocf': None,
      'type': <DeviceType.ZWAVE: 'ZWAVE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SOUND_SENSOR: 'soundSensor'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.VIDEO_STREAM: 'videoStream'>,
            <Capability.MOTION_SENSOR: 'motionSensor'>,
            <Capability.VIDEO_CAPTURE: 'videoCapture'>,
            <Capability.BATTERY: 'battery'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.CAMERA: 'Camera'>,
          'user_category': None,
        }),
      ]),
      'device_id': '976fc7c3-1f59-444d-bf4b-c215cafc09c2',
      'device_manufacturer_code': 'Arlo',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Basement Exit Cam',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'c2c-arlo-go-switch',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SOUND_SENSOR: 'soundSensor'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.VIDEO_STREAM: 'videoStream'>,
            <Capability.MOTION_SENSOR: 'motionSensor'>,
            <Capability.VIDEO_CAPTURE: 'videoCapture'>,
            <Capability.BATTERY: 'battery'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.CAMERA: 'Camera'>,
          'user_category': None,
        }),
      ]),
      'device_id': '6743dbb9-3825-48d8-8db7-db4602db7dba',
      'device_manufacturer_code': 'Arlo',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Driveway Cam',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'c2c-arlo-go-switch',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.LEGENDABSOLUTE60149_LEVEL_STEPS: 'legendabsolute60149.levelSteps'>,
            <Capability.LEGENDABSOLUTE60149_RANDOM_ON_OFF1: 'legendabsolute60149.randomOnOff1'>,
            <Capability.LEGENDABSOLUTE60149_RANDOM_NEXT_STEP: 'legendabsolute60149.randomNextStep'>,
            <Capability.LEGENDABSOLUTE60149_PROGRESSIVE_ON1: 'legendabsolute60149.progressiveOn1'>,
            <Capability.LEGENDABSOLUTE60149_PROGRESSIVE_OFF1: 'legendabsolute60149.progressiveOff1'>,
            <Capability.LEGENDABSOLUTE60149_FORCED_ON_LEVEL: 'legendabsolute60149.forcedOnLevel'>,
            <Capability.LEGENDABSOLUTE60149_EFFECTS_SET_COMMAND: 'legendabsolute60149.effectsSetCommand'>,
            <Capability.LEGENDABSOLUTE60149_MIRROR_GROUP_FUNCTION: 'legendabsolute60149.mirrorGroupFunction'>,
            <Capability.LEGENDABSOLUTE60149_GET_GROUPS: 'legendabsolute60149.getGroups'>,
            <Capability.LEGENDABSOLUTE60149_SIGNAL_METRICS: 'legendabsolute60149.signalMetrics'>,
            <Capability.LEGENDABSOLUTE60149_DRIVER_VERSION1: 'legendabsolute60149.driverVersion1'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.SMART_PLUG: 'SmartPlug'>,
          'user_category': <Category.SMART_PLUG: 'SmartPlug'>,
        }),
      ]),
      'device_id': '6e3e44b3-d84a-4efc-a97b-b5e0dae28ddc',
      'device_manufacturer_code': 'TCPi',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Salim’s Lamp',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'switch-level',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THREE_AXIS: 'threeAxis'>,
            <Capability.ACCELERATION_SENSOR: 'accelerationSensor'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.MULTI_FUNCTIONAL_SENSOR: 'MultiFunctionalSensor'>,
          'user_category': <Category.MULTI_FUNCTIONAL_SENSOR: 'MultiFunctionalSensor'>,
        }),
      ]),
      'device_id': '6356b240-c7d8-403c-883e-ae438d432abe',
      'device_manufacturer_code': 'SmartThings',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Basement Door',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'multi-sensor',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SOUND_SENSOR: 'soundSensor'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.VIDEO_STREAM: 'videoStream'>,
            <Capability.MOTION_SENSOR: 'motionSensor'>,
            <Capability.VIDEO_CAPTURE: 'videoCapture'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.ALARM: 'alarm'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.CAMERA: 'Camera'>,
          'user_category': None,
        }),
      ]),
      'device_id': '10e06a70-ee7d-4832-85e9-a0a06a7a05bd',
      'device_manufacturer_code': 'Arlo',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': '2nd Floor Hallway',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'c2c-arlo-pro-3-switch',
      'ocf': None,
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.BUTTON: 'button'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Front Door Lights',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': <Category.SWITCH: 'Switch'>,
        }),
      ]),
      'device_id': '84f1eaf0-592e-459a-a2b3-4fc43e004dae',
      'device_manufacturer_code': '0063-4944-3130',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Front Door Lights',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'GE Dimmer Switch',
      'ocf': None,
      'type': <DeviceType.ZWAVE: 'ZWAVE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.BUTTON: 'button'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'Toy Room',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': <Category.SWITCH: 'Switch'>,
        }),
      ]),
      'device_id': '971b05df-6ed3-446e-b54f-5092eac01921',
      'device_manufacturer_code': '0063-4944-3130',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Toy Room',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'GE In-Wall Smart Dimmer',
      'ocf': None,
      'type': <DeviceType.ZWAVE: 'ZWAVE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.MOTION_SENSOR: 'motionSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.LEGENDABSOLUTE60149_SIGNAL_METRICS: 'legendabsolute60149.signalMetrics'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>,
          ]),
          'id': 'main',
          'label': 'Motion Sensor',
          'manufacturer_category': <Category.MOTION_SENSOR: 'MotionSensor'>,
          'user_category': None,
        }),
      ]),
      'device_id': '630cf009-eb3b-409e-a77a-9b298540532f',
      'device_manufacturer_code': 'Bosch',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Motion Sensor',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'Motion Sensor',
      'ocf': None,
      'type': <DeviceType.ZIGBEE: 'ZIGBEE'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.REFRESH: 'refresh'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.SWITCH: 'Switch'>,
          'user_category': <Category.SWITCH: 'Switch'>,
        }),
      ]),
      'device_id': '4c3469c9-3556-4f19-a2e1-1c0a598341dc',
      'device_manufacturer_code': '0063-4944-3130',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Girls Fan',
      'location_id': 'c4d3b2a1-09f8-765e-4d3c-2b1a09f8e7d6 ',
      'name': 'switch-level-indicator',
      'ocf': None,
      'type': <DeviceType.ZWAVE: 'ZWAVE'>,
    }),
  ])
# ---
# name: test_fetching_devices[devices_9]
  list([
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.AIR_CONDITIONER_MODE: 'airConditionerMode'>,
            <Capability.AIR_CONDITIONER_FAN_MODE: 'airConditionerFanMode'>,
            <Capability.FAN_OSCILLATION_MODE: 'fanOscillationMode'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>,
            <Capability.RELATIVE_HUMIDITY_MEASUREMENT: 'relativeHumidityMeasurement'>,
            <Capability.AIR_QUALITY_SENSOR: 'airQualitySensor'>,
            <Capability.ODOR_SENSOR: 'odorSensor'>,
            <Capability.DUST_SENSOR: 'dustSensor'>,
            <Capability.VERY_FINE_DUST_SENSOR: 'veryFineDustSensor'>,
            <Capability.AUDIO_VOLUME: 'audioVolume'>,
            <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.CUSTOM_SPI_MODE: 'custom.spiMode'>,
            <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>,
            <Capability.CUSTOM_AIR_CONDITIONER_OPTIONAL_MODE: 'custom.airConditionerOptionalMode'>,
            <Capability.CUSTOM_AIR_CONDITIONER_TROPICAL_NIGHT_MODE: 'custom.airConditionerTropicalNightMode'>,
            <Capability.CUSTOM_AUTO_CLEANING_MODE: 'custom.autoCleaningMode'>,
            <Capability.CUSTOM_DEVICE_REPORT_STATE_CONFIGURATION: 'custom.deviceReportStateConfiguration'>,
            <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>,
            <Capability.CUSTOM_DUST_FILTER: 'custom.dustFilter'>,
            <Capability.CUSTOM_VERY_FINE_DUST_FILTER: 'custom.veryFineDustFilter'>,
            <Capability.CUSTOM_DEODOR_FILTER: 'custom.deodorFilter'>,
            <Capability.CUSTOM_ELECTRIC_HEPA_FILTER: 'custom.electricHepaFilter'>,
            <Capability.CUSTOM_DO_NOT_DISTURB_MODE: 'custom.doNotDisturbMode'>,
            <Capability.CUSTOM_PERIODIC_SENSING: 'custom.periodicSensing'>,
            <Capability.CUSTOM_AIR_CONDITIONER_ODOR_CONTROLLER: 'custom.airConditionerOdorController'>,
            <Capability.CUSTOM_OCF_RESOURCE_VERSION: 'custom.ocfResourceVersion'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_DUST_FILTER_ALARM: 'samsungce.dustFilterAlarm'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.SAMSUNG_CE_SELF_CHECK: 'samsungce.selfCheck'>,
            <Capability.SAMSUNG_CE_INDIVIDUAL_CONTROL_LOCK: 'samsungce.individualControlLock'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.AIR_CONDITIONER: 'AirConditioner'>,
          'user_category': None,
        }),
      ]),
      'device_id': '29014d68-d9a8-20da-0b6f-053112978980',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Air Conditioner',
      'label': 'Climatiseur Quentin',
      'location_id': 'd507e237-896e-4352-8f0f-0664c91234bd',
      'name': 'Samsung-Room-Air-Conditioner',
      'ocf': dict({
        'device_type': 'oic.d.airconditioner',
        'firmware_version': 'TP2X_RAC_20K_11240702',
        'hardware_version': 'MediaTek',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'TP2X_RAC_20K|10256941|60010519001411014600003200800000',
        'name': 'Samsung-Room-Air-Conditioner',
        'platform_os': 'TizenRT 2.0 + IPv6',
        'platform_version': 'DAWIT 2.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'DA-AC-RAC-000003',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.AIR_CONDITIONER_MODE: 'airConditionerMode'>,
            <Capability.AIR_CONDITIONER_FAN_MODE: 'airConditionerFanMode'>,
            <Capability.FAN_OSCILLATION_MODE: 'fanOscillationMode'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>,
            <Capability.RELATIVE_HUMIDITY_MEASUREMENT: 'relativeHumidityMeasurement'>,
            <Capability.AIR_QUALITY_SENSOR: 'airQualitySensor'>,
            <Capability.ODOR_SENSOR: 'odorSensor'>,
            <Capability.DUST_SENSOR: 'dustSensor'>,
            <Capability.VERY_FINE_DUST_SENSOR: 'veryFineDustSensor'>,
            <Capability.AUDIO_VOLUME: 'audioVolume'>,
            <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.CUSTOM_SPI_MODE: 'custom.spiMode'>,
            <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>,
            <Capability.CUSTOM_AIR_CONDITIONER_OPTIONAL_MODE: 'custom.airConditionerOptionalMode'>,
            <Capability.CUSTOM_AIR_CONDITIONER_TROPICAL_NIGHT_MODE: 'custom.airConditionerTropicalNightMode'>,
            <Capability.CUSTOM_AUTO_CLEANING_MODE: 'custom.autoCleaningMode'>,
            <Capability.CUSTOM_DEVICE_REPORT_STATE_CONFIGURATION: 'custom.deviceReportStateConfiguration'>,
            <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>,
            <Capability.CUSTOM_DUST_FILTER: 'custom.dustFilter'>,
            <Capability.CUSTOM_VERY_FINE_DUST_FILTER: 'custom.veryFineDustFilter'>,
            <Capability.CUSTOM_DEODOR_FILTER: 'custom.deodorFilter'>,
            <Capability.CUSTOM_ELECTRIC_HEPA_FILTER: 'custom.electricHepaFilter'>,
            <Capability.CUSTOM_DO_NOT_DISTURB_MODE: 'custom.doNotDisturbMode'>,
            <Capability.CUSTOM_PERIODIC_SENSING: 'custom.periodicSensing'>,
            <Capability.CUSTOM_AIR_CONDITIONER_ODOR_CONTROLLER: 'custom.airConditionerOdorController'>,
            <Capability.CUSTOM_OCF_RESOURCE_VERSION: 'custom.ocfResourceVersion'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_DUST_FILTER_ALARM: 'samsungce.dustFilterAlarm'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.SAMSUNG_CE_SELF_CHECK: 'samsungce.selfCheck'>,
            <Capability.SAMSUNG_CE_INDIVIDUAL_CONTROL_LOCK: 'samsungce.individualControlLock'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.AIR_CONDITIONER: 'AirConditioner'>,
          'user_category': None,
        }),
      ]),
      'device_id': '1dca2ebe-b3d8-a476-77b9-bb60612c5d26',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Air Conditioner',
      'label': 'Climatiseur Parents',
      'location_id': 'd507e237-896e-4352-8f0f-0664c91234bd',
      'name': 'Samsung-Room-Air-Conditioner',
      'ocf': dict({
        'device_type': 'oic.d.airconditioner',
        'firmware_version': 'TP2X_RAC_20K_11240702',
        'hardware_version': 'MediaTek',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'TP2X_RAC_20K|10256941|60010519001411014600003200800000',
        'name': 'Samsung-Room-Air-Conditioner',
        'platform_os': 'TizenRT 2.0 + IPv6',
        'platform_version': 'DAWIT 2.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'DA-AC-RAC-000003',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.AUDIO_VOLUME: 'audioVolume'>,
            <Capability.AUDIO_MUTE: 'audioMute'>,
            <Capability.TV_CHANNEL: 'tvChannel'>,
            <Capability.MEDIA_INPUT_SOURCE: 'mediaInputSource'>,
            <Capability.MEDIA_PLAYBACK: 'mediaPlayback'>,
            <Capability.MEDIA_TRACK_CONTROL: 'mediaTrackControl'>,
            <Capability.CUSTOM_ERROR: 'custom.error'>,
            <Capability.CUSTOM_PICTURE_MODE: 'custom.picturemode'>,
            <Capability.CUSTOM_SOUND_MODE: 'custom.soundmode'>,
            <Capability.CUSTOM_ACCESSIBILITY: 'custom.accessibility'>,
            <Capability.CUSTOM_LAUNCH_APP: 'custom.launchapp'>,
            <Capability.CUSTOM_RECORDING: 'custom.recording'>,
            <Capability.CUSTOM_TV_SEARCH: 'custom.tvsearch'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.SAMSUNG_VD_REMOTE_CONTROL: 'samsungvd.remoteControl'>,
            <Capability.SAMSUNG_VD_AMBIENT: 'samsungvd.ambient'>,
            <Capability.SAMSUNG_VD_AMBIENT_CONTENT: 'samsungvd.ambientContent'>,
            <Capability.SAMSUNG_VD_MEDIA_INPUT_SOURCE: 'samsungvd.mediaInputSource'>,
            <Capability.SAMSUNG_VD_SUPPORTS_FEATURES: 'samsungvd.supportsFeatures'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.SAMSUNG_VD_FIRMWARE_VERSION: 'samsungvd.firmwareVersion'>,
            <Capability.SAMSUNG_VD_SUPPORTS_POWER_ON_BY_OCF: 'samsungvd.supportsPowerOnByOcf'>,
            <Capability.SAMSUNG_VD_DEVICE_CATEGORY: 'samsungvd.deviceCategory'>,
            <Capability.SAMSUNG_VD_THING_STATUS: 'samsungvd.thingStatus'>,
            <Capability.SEC_DEVICE_CONNECTION_STATE: 'sec.deviceConnectionState'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>,
            <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>,
            <Capability.SAMSUNG_IM_FIXED_FIND_NODE: 'samsungim.fixedFindNode'>,
            <Capability.SAMSUNG_VD_LIGHT_CONTROL: 'samsungvd.lightControl'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.TELEVISION: 'Television'>,
          'user_category': None,
        }),
      ]),
      'device_id': '8c1b8eff-e8c7-dcf8-58f8-da81669b92eb',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF TV',
      'label': 'TV',
      'location_id': 'd507e237-896e-4352-8f0f-0664c91234bd',
      'name': 'TV',
      'ocf': dict({
        'device_type': 'oic.d.tv',
        'firmware_version': 'T-PTMCDEUC-0080-2020.2|ST_ENERGY',
        'hardware_version': '',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'TQ65S90CATXXC',
        'name': 'TV',
        'platform_os': 'Tizen',
        'platform_version': '8.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'VD-STV-2023',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.AIR_CONDITIONER_MODE: 'airConditionerMode'>,
            <Capability.AIR_CONDITIONER_FAN_MODE: 'airConditionerFanMode'>,
            <Capability.FAN_OSCILLATION_MODE: 'fanOscillationMode'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>,
            <Capability.RELATIVE_HUMIDITY_MEASUREMENT: 'relativeHumidityMeasurement'>,
            <Capability.AIR_QUALITY_SENSOR: 'airQualitySensor'>,
            <Capability.ODOR_SENSOR: 'odorSensor'>,
            <Capability.DUST_SENSOR: 'dustSensor'>,
            <Capability.VERY_FINE_DUST_SENSOR: 'veryFineDustSensor'>,
            <Capability.AUDIO_VOLUME: 'audioVolume'>,
            <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.CUSTOM_SPI_MODE: 'custom.spiMode'>,
            <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>,
            <Capability.CUSTOM_AIR_CONDITIONER_OPTIONAL_MODE: 'custom.airConditionerOptionalMode'>,
            <Capability.CUSTOM_AIR_CONDITIONER_TROPICAL_NIGHT_MODE: 'custom.airConditionerTropicalNightMode'>,
            <Capability.CUSTOM_AUTO_CLEANING_MODE: 'custom.autoCleaningMode'>,
            <Capability.CUSTOM_DEVICE_REPORT_STATE_CONFIGURATION: 'custom.deviceReportStateConfiguration'>,
            <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>,
            <Capability.CUSTOM_DUST_FILTER: 'custom.dustFilter'>,
            <Capability.CUSTOM_VERY_FINE_DUST_FILTER: 'custom.veryFineDustFilter'>,
            <Capability.CUSTOM_DEODOR_FILTER: 'custom.deodorFilter'>,
            <Capability.CUSTOM_ELECTRIC_HEPA_FILTER: 'custom.electricHepaFilter'>,
            <Capability.CUSTOM_DO_NOT_DISTURB_MODE: 'custom.doNotDisturbMode'>,
            <Capability.CUSTOM_PERIODIC_SENSING: 'custom.periodicSensing'>,
            <Capability.CUSTOM_AIR_CONDITIONER_ODOR_CONTROLLER: 'custom.airConditionerOdorController'>,
            <Capability.CUSTOM_OCF_RESOURCE_VERSION: 'custom.ocfResourceVersion'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_DUST_FILTER_ALARM: 'samsungce.dustFilterAlarm'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.SAMSUNG_CE_SELF_CHECK: 'samsungce.selfCheck'>,
            <Capability.SAMSUNG_CE_INDIVIDUAL_CONTROL_LOCK: 'samsungce.individualControlLock'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.AIR_CONDITIONER: 'AirConditioner'>,
          'user_category': None,
        }),
      ]),
      'device_id': '79542474-e6dd-597d-f09a-8dd0ad380f89',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Air Conditioner',
      'label': 'Climatiseur Salon',
      'location_id': 'd507e237-896e-4352-8f0f-0664c91234bd',
      'name': 'Samsung-Room-Air-Conditioner',
      'ocf': dict({
        'device_type': 'oic.d.airconditioner',
        'firmware_version': 'TP2X_RAC_20K_11240702',
        'hardware_version': 'MediaTek',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'TP2X_RAC_20K|10217841|60010523001411014200003000000000',
        'name': 'Samsung-Room-Air-Conditioner',
        'platform_os': 'TizenRT 2.0 + IPv6',
        'platform_version': 'DAWIT 2.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'DA-AC-RAC-000003',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.AIR_CONDITIONER_MODE: 'airConditionerMode'>,
            <Capability.AIR_CONDITIONER_FAN_MODE: 'airConditionerFanMode'>,
            <Capability.FAN_OSCILLATION_MODE: 'fanOscillationMode'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>,
            <Capability.RELATIVE_HUMIDITY_MEASUREMENT: 'relativeHumidityMeasurement'>,
            <Capability.AIR_QUALITY_SENSOR: 'airQualitySensor'>,
            <Capability.ODOR_SENSOR: 'odorSensor'>,
            <Capability.DUST_SENSOR: 'dustSensor'>,
            <Capability.VERY_FINE_DUST_SENSOR: 'veryFineDustSensor'>,
            <Capability.AUDIO_VOLUME: 'audioVolume'>,
            <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.CUSTOM_SPI_MODE: 'custom.spiMode'>,
            <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>,
            <Capability.CUSTOM_AIR_CONDITIONER_OPTIONAL_MODE: 'custom.airConditionerOptionalMode'>,
            <Capability.CUSTOM_AIR_CONDITIONER_TROPICAL_NIGHT_MODE: 'custom.airConditionerTropicalNightMode'>,
            <Capability.CUSTOM_AUTO_CLEANING_MODE: 'custom.autoCleaningMode'>,
            <Capability.CUSTOM_DEVICE_REPORT_STATE_CONFIGURATION: 'custom.deviceReportStateConfiguration'>,
            <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>,
            <Capability.CUSTOM_DUST_FILTER: 'custom.dustFilter'>,
            <Capability.CUSTOM_VERY_FINE_DUST_FILTER: 'custom.veryFineDustFilter'>,
            <Capability.CUSTOM_DEODOR_FILTER: 'custom.deodorFilter'>,
            <Capability.CUSTOM_ELECTRIC_HEPA_FILTER: 'custom.electricHepaFilter'>,
            <Capability.CUSTOM_DO_NOT_DISTURB_MODE: 'custom.doNotDisturbMode'>,
            <Capability.CUSTOM_PERIODIC_SENSING: 'custom.periodicSensing'>,
            <Capability.CUSTOM_AIR_CONDITIONER_ODOR_CONTROLLER: 'custom.airConditionerOdorController'>,
            <Capability.CUSTOM_OCF_RESOURCE_VERSION: 'custom.ocfResourceVersion'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_DUST_FILTER_ALARM: 'samsungce.dustFilterAlarm'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.SAMSUNG_CE_SELF_CHECK: 'samsungce.selfCheck'>,
            <Capability.SAMSUNG_CE_INDIVIDUAL_CONTROL_LOCK: 'samsungce.individualControlLock'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.AIR_CONDITIONER: 'AirConditioner'>,
          'user_category': None,
        }),
      ]),
      'device_id': '9b2d0391-ffd6-1ad6-b9e1-247414819dc8',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Air Conditioner',
      'label': 'Climatiseur Lisa',
      'location_id': 'd507e237-896e-4352-8f0f-0664c91234bd',
      'name': 'Samsung-Room-Air-Conditioner',
      'ocf': dict({
        'device_type': 'oic.d.airconditioner',
        'firmware_version': 'TP2X_RAC_20K_11240702',
        'hardware_version': 'MediaTek',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'TP2X_RAC_20K|10256941|60010519001411014600003200800000',
        'name': 'Samsung-Room-Air-Conditioner',
        'platform_os': 'TizenRT 2.0 + IPv6',
        'platform_version': 'DAWIT 2.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'DA-AC-RAC-000003',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.AIR_CONDITIONER_MODE: 'airConditionerMode'>,
            <Capability.AIR_CONDITIONER_FAN_MODE: 'airConditionerFanMode'>,
            <Capability.FAN_OSCILLATION_MODE: 'fanOscillationMode'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>,
            <Capability.RELATIVE_HUMIDITY_MEASUREMENT: 'relativeHumidityMeasurement'>,
            <Capability.AIR_QUALITY_SENSOR: 'airQualitySensor'>,
            <Capability.ODOR_SENSOR: 'odorSensor'>,
            <Capability.DUST_SENSOR: 'dustSensor'>,
            <Capability.VERY_FINE_DUST_SENSOR: 'veryFineDustSensor'>,
            <Capability.AUDIO_VOLUME: 'audioVolume'>,
            <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.CUSTOM_SPI_MODE: 'custom.spiMode'>,
            <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>,
            <Capability.CUSTOM_AIR_CONDITIONER_OPTIONAL_MODE: 'custom.airConditionerOptionalMode'>,
            <Capability.CUSTOM_AIR_CONDITIONER_TROPICAL_NIGHT_MODE: 'custom.airConditionerTropicalNightMode'>,
            <Capability.CUSTOM_AUTO_CLEANING_MODE: 'custom.autoCleaningMode'>,
            <Capability.CUSTOM_DEVICE_REPORT_STATE_CONFIGURATION: 'custom.deviceReportStateConfiguration'>,
            <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>,
            <Capability.CUSTOM_DUST_FILTER: 'custom.dustFilter'>,
            <Capability.CUSTOM_VERY_FINE_DUST_FILTER: 'custom.veryFineDustFilter'>,
            <Capability.CUSTOM_DEODOR_FILTER: 'custom.deodorFilter'>,
            <Capability.CUSTOM_ELECTRIC_HEPA_FILTER: 'custom.electricHepaFilter'>,
            <Capability.CUSTOM_DO_NOT_DISTURB_MODE: 'custom.doNotDisturbMode'>,
            <Capability.CUSTOM_PERIODIC_SENSING: 'custom.periodicSensing'>,
            <Capability.CUSTOM_AIR_CONDITIONER_ODOR_CONTROLLER: 'custom.airConditionerOdorController'>,
            <Capability.CUSTOM_OCF_RESOURCE_VERSION: 'custom.ocfResourceVersion'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_DUST_FILTER_ALARM: 'samsungce.dustFilterAlarm'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.SAMSUNG_CE_SELF_CHECK: 'samsungce.selfCheck'>,
            <Capability.SAMSUNG_CE_INDIVIDUAL_CONTROL_LOCK: 'samsungce.individualControlLock'>,
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': <Category.AIR_CONDITIONER: 'AirConditioner'>,
          'user_category': None,
        }),
      ]),
      'device_id': 'bcfb285e-5a5e-f5c6-bfe2-e6af42227df9',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Air Conditioner',
      'label': 'Climatiseur Bureau',
      'location_id': 'd507e237-896e-4352-8f0f-0664c91234bd',
      'name': 'Samsung-Room-Air-Conditioner',
      'ocf': dict({
        'device_type': 'oic.d.airconditioner',
        'firmware_version': 'TP2X_RAC_20K_11240702',
        'hardware_version': 'MediaTek',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': 'TP2X_RAC_20K|10217841|60010519001411014200003000000000',
        'name': 'Samsung-Room-Air-Conditioner',
        'platform_os': 'TizenRT 2.0 + IPv6',
        'platform_version': 'DAWIT 2.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'DA-AC-RAC-000003',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
  ])
# ---
# name: test_fetching_devices[devices_fake]
  list([
    dict({
      'components': list([
        dict({
          'capabilities': list([
            'fakeCapability',
          ]),
          'id': 'main',
          'label': 'main',
          'manufacturer_category': 'fakeCategory',
          'user_category': None,
        }),
      ]),
      'device_id': '7d3feb98-8a36-4351-c362-5e21ad3a78dd',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Refrigerator',
      'label': 'Refrigerator',
      'location_id': '2487472a-06c4-4bce-8f4c-700c5f8644f8',
      'name': 'Family Hub',
      'ocf': dict({
        'device_type': 'oic.d.refrigerator',
        'firmware_version': '20240616.213423',
        'hardware_version': '',
        'manufacturer_name': 'Samsung Electronics',
        'model_number': '24K_REF_LCD_FHUB9.0|00113141|0002034e051324200103000000000000',
        'name': 'Family Hub',
        'platform_os': 'Tizen',
        'platform_version': '7.0',
        'spec_version': 'core.1.1.0',
        'vendor_id': 'DA-REF-NORMAL-01001',
      }),
      'type': <DeviceType.OCF: 'OCF'>,
    }),
  ])
# ---
# name: test_fetching_single_device
  dict({
    'components': list([
      dict({
        'capabilities': list([
          <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
          <Capability.SWITCH: 'switch'>,
          <Capability.SWITCH_LEVEL: 'switchLevel'>,
          <Capability.HEALTH_CHECK: 'healthCheck'>,
          <Capability.REFRESH: 'refresh'>,
          <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
          <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
        ]),
        'id': 'main',
        'label': 'main',
        'manufacturer_category': <Category.LIGHT: 'Light'>,
        'user_category': None,
      }),
    ]),
    'device_id': '440063de-a200-40b5-8a6b-f3399eaa0370',
    'device_manufacturer_code': 'Signify Netherlands B.V.',
    'device_network_type': None,
    'device_type_id': None,
    'device_type_name': None,
    'label': 'Bathroom spot',
    'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
    'name': 'hue-color-temperature-bulb',
    'ocf': None,
    'type': <DeviceType.VIPER: 'VIPER'>,
  })
# ---
# name: test_fetching_status_of_single_device[27_smart_monitor_m5]
  dict({
    'main': dict({
      <Capability.AUDIO_MUTE: 'audioMute'>: dict({
        <Attribute.MUTE: 'mute'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 13, 55, 0, 858000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'muted',
        }),
      }),
      <Capability.AUDIO_VOLUME: 'audioVolume'>: dict({
        <Attribute.VOLUME: 'volume'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 13, 55, 0, 858000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 15,
        }),
      }),
      <Capability.CUSTOM_ACCESSIBILITY: 'custom.accessibility'>: dict({
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 7, 15, 42, 44, 749000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'samsungvd.ambient',
            'samsungvd.ambientContent',
          ]),
        }),
      }),
      <Capability.CUSTOM_ERROR: 'custom.error'>: dict({
        <Attribute.ERROR: 'error'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_LAUNCH_APP: 'custom.launchapp'>: dict({
      }),
      <Capability.CUSTOM_PICTURE_MODE: 'custom.picturemode'>: dict({
        <Attribute.PICTURE_MODE: 'pictureMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 13, 55, 1, 293000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Eye Saver Low',
        }),
        <Attribute.SUPPORTED_PICTURE_MODES: 'supportedPictureModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 13, 55, 1, 293000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'Eye Saver Low',
          ]),
        }),
        <Attribute.SUPPORTED_PICTURE_MODES_MAP: 'supportedPictureModesMap'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 13, 55, 1, 293000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'id': 'modeGen_327699',
              'name': 'Eye Saver Low',
            }),
          ]),
        }),
      }),
      <Capability.CUSTOM_RECORDING: 'custom.recording'>: dict({
      }),
      <Capability.CUSTOM_SOUND_MODE: 'custom.soundmode'>: dict({
        <Attribute.SOUND_MODE: 'soundMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 13, 55, 0, 792000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Adaptive Sound',
        }),
        <Attribute.SUPPORTED_SOUND_MODES: 'supportedSoundModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 13, 55, 0, 792000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'Adaptive Sound',
            'Amplify',
            'Standard',
          ]),
        }),
        <Attribute.SUPPORTED_SOUND_MODES_MAP: 'supportedSoundModesMap'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 13, 55, 0, 792000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'id': 'modeAdaptive',
              'name': 'Adaptive Sound',
            }),
            dict({
              'id': 'modeAmplify',
              'name': 'Amplify',
            }),
            dict({
              'id': 'modeStandard',
              'name': 'Standard',
            }),
          ]),
        }),
      }),
      <Capability.CUSTOM_TV_SEARCH: 'custom.tvsearch'>: dict({
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.MEDIA_INPUT_SOURCE: 'mediaInputSource'>: dict({
        <Attribute.INPUT_SOURCE: 'inputSource'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 4, 29, 15, 33, 43, 606000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'HDMI1',
        }),
        <Attribute.SUPPORTED_INPUT_SOURCES: 'supportedInputSources'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 9, 18, 21, 859000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.MEDIA_PLAYBACK: 'mediaPlayback'>: dict({
        <Attribute.PLAYBACK_STATUS: 'playbackStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_PLAYBACK_COMMANDS: 'supportedPlaybackCommands'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 9, 18, 21, 859000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'play',
            'pause',
            'stop',
            'fastForward',
            'rewind',
          ]),
        }),
      }),
      <Capability.MEDIA_TRACK_CONTROL: 'mediaTrackControl'>: dict({
        <Attribute.SUPPORTED_TRACK_CONTROL_COMMANDS: 'supportedTrackControlCommands'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 9, 18, 22, 478000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '3f01bf2b-e9a3-3543-1047-42320283a5c1',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 9, 18, 22, 478000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'res.1.1.0,sh.1.1.0',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 9, 18, 22, 478000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 9, 18, 22, 478000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2022-01-01',
        }),
        <Attribute.OCF_FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 9, 18, 22, 478000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'T-NKLBWWC-1651.10',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 9, 18, 22, 478000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 9, 18, 22, 478000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 9, 18, 22, 478000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 9, 18, 22, 478000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'LS27BM501ENXZA',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 9, 18, 22, 478000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Tizen',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 9, 18, 22, 478000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '6.5',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 9, 18, 22, 478000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 9, 18, 22, 478000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '27" Smart Monitor M5',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 9, 18, 22, 478000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '3f01bf2b-e9a3-3543-1047-42320283a5c1',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 9, 18, 22, 478000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2024-12-21T16:13:44Z',
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 9, 18, 22, 478000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'VD-SMONITOR-2022',
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SAMSUNG_VD_AMBIENT: 'samsungvd.ambient'>: dict({
      }),
      <Capability.SAMSUNG_VD_AMBIENT_CONTENT: 'samsungvd.ambientContent'>: dict({
        <Attribute.SUPPORTED_AMBIENT_APPS: 'supportedAmbientApps'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 9, 18, 21, 859000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.SAMSUNG_VD_DEVICE_CATEGORY: 'samsungvd.deviceCategory'>: dict({
        <Attribute.CATEGORY: 'category'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 13, 55, 1, 350000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'monitor',
        }),
      }),
      <Capability.SAMSUNG_VD_FIRMWARE_VERSION: 'samsungvd.firmwareVersion'>: dict({
        <Attribute.FIRMWARE_VERSION: 'firmwareVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 13, 55, 1, 350000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '3.5.1',
        }),
      }),
      <Capability.SAMSUNG_VD_MEDIA_INPUT_SOURCE: 'samsungvd.mediaInputSource'>: dict({
        <Attribute.INPUT_SOURCE: 'inputSource'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 23, 46, 45, 670000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'HDMI2',
        }),
        <Attribute.SUPPORTED_INPUT_SOURCES_MAP: 'supportedInputSourcesMap'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 23, 46, 45, 670000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'id': 'HDMI2',
              'name': 'PC',
            }),
          ]),
        }),
      }),
      <Capability.SAMSUNG_VD_REMOTE_CONTROL: 'samsungvd.remoteControl'>: dict({
      }),
      <Capability.SAMSUNG_VD_SUPPORTS_FEATURES: 'samsungvd.supportsFeatures'>: dict({
        <Attribute.EXECUTABLE_SERVICE_LIST: 'executableServiceList'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.IME_ADV_SUPPORTED: 'imeAdvSupported'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 9, 18, 23, 100000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
        <Attribute.MEDIA_OUTPUT_SUPPORTED: 'mediaOutputSupported'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 9, 18, 23, 100000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
        <Attribute.MOBILE_CAM_SUPPORTED: 'mobileCamSupported'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 9, 18, 23, 100000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
        <Attribute.REMOTELESS_SUPPORTED: 'remotelessSupported'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WIFI_UPDATE_SUPPORT: 'wifiUpdateSupport'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_VD_SUPPORTS_POWER_ON_BY_OCF: 'samsungvd.supportsPowerOnByOcf'>: dict({
        <Attribute.SUPPORTS_POWER_ON_BY_OCF: 'supportsPowerOnByOcf'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 23, 46, 45, 548000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'true',
        }),
      }),
      <Capability.SAMSUNG_VD_THING_STATUS: 'samsungvd.thingStatus'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 23, 46, 45, 445000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Idle',
        }),
        <Attribute.UPDATED_TIME: 'updatedTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 23, 46, 45, 445000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 1735688805,
        }),
      }),
      <Capability.SEC_DEVICE_CONNECTION_STATE: 'sec.deviceConnectionState'>: dict({
        <Attribute.DEVICE_CONNECTION_STATE: 'deviceConnectionState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 1, 1, 29, 26, 300000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.TV_CHANNEL: 'tvChannel'>: dict({
        <Attribute.TV_CHANNEL: 'tvChannel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 20, 25, 47, 18000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.TV_CHANNEL_NAME: 'tvChannelName'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 20, 25, 47, 18000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[aeotec_home_energy_meter_gen5]
  dict({
    'main': dict({
      <Capability.ENERGY_METER: 'energyMeter'>: dict({
        <Attribute.ENERGY: 'energy'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 21, 9, 8, 357000, tzinfo=datetime.timezone.utc),
          'unit': 'kWh',
          'value': 19978.536,
        }),
      }),
      <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>: dict({
        <Attribute.POWER_CONSUMPTION: 'powerConsumption'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.POWER_METER: 'powerMeter'>: dict({
        <Attribute.POWER: 'power'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 21, 9, 8, 228000, tzinfo=datetime.timezone.utc),
          'unit': 'W',
          'value': 2859.743,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.VOLTAGE_MEASUREMENT: 'voltageMeasurement'>: dict({
        <Attribute.VOLTAGE: 'voltage'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[base_lock]
  dict({
    'main': dict({
      <Capability.BATTERY: 'battery'>: dict({
        <Attribute.BATTERY: 'battery'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 16, 38, 27, 262000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 68,
        }),
        <Attribute.QUANTITY: 'quantity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TYPE: 'type'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.LOCK: 'lock'>: dict({
        <Attribute.LOCK: 'lock'>: dict({
          'data': dict({
          }),
          'timestamp': datetime.datetime(2025, 2, 9, 17, 38, 32, 2000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'locked',
        }),
        <Attribute.SUPPORTED_LOCK_COMMANDS: 'supportedLockCommands'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_LOCK_VALUES: 'supportedLockValues'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_UNLOCK_DIRECTIONS: 'supportedUnlockDirections'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.LOCK_CODES: 'lockCodes'>: dict({
        <Attribute.CODE_CHANGED: 'codeChanged'>: dict({
          'data': dict({
            'codeName': 'Salim',
          }),
          'timestamp': datetime.datetime(2024, 8, 8, 18, 20, 27, 537000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2 set',
        }),
        <Attribute.CODE_LENGTH: 'codeLength'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.CODE_REPORT: 'codeReport'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LOCK: 'lock'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LOCK_CODES: 'lockCodes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 8, 8, 18, 20, 27, 532000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '{"1":"Saima","2":"Salim"}',
        }),
        <Attribute.MAX_CODE_LENGTH: 'maxCodeLength'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MAX_CODES: 'maxCodes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 7, 23, 16, 15, 9, 860000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 244,
        }),
        <Attribute.MIN_CODE_LENGTH: 'minCodeLength'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SCAN_CODES: 'scanCodes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 7, 23, 16, 15, 15, 274000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Complete',
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[basic_electric_meter]
  dict({
    'main': dict({
      <Capability.ENERGY_METER: 'energyMeter'>: dict({
        <Attribute.ENERGY: 'energy'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 56, 21, 918000, tzinfo=datetime.timezone.utc),
          'unit': 'kWh',
          'value': 1930.362,
        }),
      }),
      <Capability.POWER_METER: 'powerMeter'>: dict({
        <Attribute.POWER: 'power'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 56, 21, 748000, tzinfo=datetime.timezone.utc),
          'unit': 'W',
          'value': 938.3,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[c2c_arlo_doorbell_battery]
  dict({
    'main': dict({
      <Capability.ALARM: 'alarm'>: dict({
        <Attribute.ALARM: 'alarm'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 56, 9, 703000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.BATTERY: 'battery'>: dict({
        <Attribute.BATTERY: 'battery'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 56, 4, 891000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 50,
        }),
        <Attribute.QUANTITY: 'quantity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TYPE: 'type'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.BUTTON: 'button'>: dict({
        <Attribute.BUTTON: 'button'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 56, 9, 703000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'up',
        }),
        <Attribute.NUMBER_OF_BUTTONS: 'numberOfButtons'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 56, 9, 703000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 1,
        }),
        <Attribute.SUPPORTED_BUTTON_VALUES: 'supportedButtonValues'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 56, 9, 703000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'pushed',
          ]),
        }),
      }),
      <Capability.HEALTH_CHECK: 'healthCheck'>: dict({
        <Attribute.DEVICE_WATCH_DEVICE_STATUS: 'DeviceWatch-DeviceStatus'>: dict({
          'data': dict({
          }),
          'timestamp': datetime.datetime(2025, 2, 9, 17, 18, 32, 636000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'online',
        }),
        <Attribute.DEVICE_WATCH_ENROLL: 'DeviceWatch-Enroll'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.CHECK_INTERVAL: 'checkInterval'>: dict({
          'data': dict({
            'deviceScheme': 'UNTRACKED',
            'protocol': 'cloud',
          }),
          'timestamp': datetime.datetime(2024, 8, 29, 17, 58, 33, 680000, tzinfo=datetime.timezone.utc),
          'unit': 's',
          'value': 60,
        }),
        <Attribute.HEALTH_STATUS: 'healthStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.MOTION_SENSOR: 'motionSensor'>: dict({
        <Attribute.MOTION: 'motion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 16, 35, 53, 452000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'inactive',
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SOUND_SENSOR: 'soundSensor'>: dict({
        <Attribute.SOUND: 'sound'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 56, 9, 703000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'not detected',
        }),
      }),
      <Capability.VIDEO_CAPTURE: 'videoCapture'>: dict({
        <Attribute.CLIP: 'clip'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.STREAM: 'stream'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.VIDEO_STREAM: 'videoStream'>: dict({
        <Attribute.STREAM: 'stream'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 8, 0, 13, 57, 963000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'InHomeURL': '',
            'OutHomeURL': '',
          }),
        }),
        <Attribute.SUPPORTED_FEATURES: 'supportedFeatures'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[c2c_arlo_go_switch]
  dict({
    'main': dict({
      <Capability.BATTERY: 'battery'>: dict({
        <Attribute.BATTERY: 'battery'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 56, 1, 357000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 100,
        }),
        <Attribute.QUANTITY: 'quantity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TYPE: 'type'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.HEALTH_CHECK: 'healthCheck'>: dict({
        <Attribute.DEVICE_WATCH_DEVICE_STATUS: 'DeviceWatch-DeviceStatus'>: dict({
          'data': dict({
          }),
          'timestamp': datetime.datetime(2025, 2, 8, 21, 56, 1, 357000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'online',
        }),
        <Attribute.DEVICE_WATCH_ENROLL: 'DeviceWatch-Enroll'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.CHECK_INTERVAL: 'checkInterval'>: dict({
          'data': dict({
            'deviceScheme': 'UNTRACKED',
            'protocol': 'cloud',
          }),
          'timestamp': datetime.datetime(2024, 8, 29, 17, 58, 33, 700000, tzinfo=datetime.timezone.utc),
          'unit': 's',
          'value': 60,
        }),
        <Attribute.HEALTH_STATUS: 'healthStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.MOTION_SENSOR: 'motionSensor'>: dict({
        <Attribute.MOTION: 'motion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 16, 26, 36, 366000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'inactive',
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SOUND_SENSOR: 'soundSensor'>: dict({
        <Attribute.SOUND: 'sound'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 56, 9, 726000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'not detected',
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 56, 1, 357000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'on',
        }),
      }),
      <Capability.VIDEO_CAPTURE: 'videoCapture'>: dict({
        <Attribute.CLIP: 'clip'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.STREAM: 'stream'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.VIDEO_STREAM: 'videoStream'>: dict({
        <Attribute.STREAM: 'stream'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 13, 3, 27, 30, 261000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'InHomeURL': '',
            'OutHomeURL': '',
          }),
        }),
        <Attribute.SUPPORTED_FEATURES: 'supportedFeatures'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[c2c_arlo_pro_3_switch]
  dict({
    'main': dict({
      <Capability.ALARM: 'alarm'>: dict({
        <Attribute.ALARM: 'alarm'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 56, 9, 761000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.BATTERY: 'battery'>: dict({
        <Attribute.BATTERY: 'battery'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 56, 10, 41000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 100,
        }),
        <Attribute.QUANTITY: 'quantity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TYPE: 'type'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.HEALTH_CHECK: 'healthCheck'>: dict({
        <Attribute.DEVICE_WATCH_DEVICE_STATUS: 'DeviceWatch-DeviceStatus'>: dict({
          'data': dict({
          }),
          'timestamp': datetime.datetime(2025, 2, 8, 21, 56, 9, 761000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'online',
        }),
        <Attribute.DEVICE_WATCH_ENROLL: 'DeviceWatch-Enroll'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.CHECK_INTERVAL: 'checkInterval'>: dict({
          'data': dict({
            'deviceScheme': 'UNTRACKED',
            'protocol': 'cloud',
          }),
          'timestamp': datetime.datetime(2025, 2, 3, 21, 55, 57, 991000, tzinfo=datetime.timezone.utc),
          'unit': 's',
          'value': 60,
        }),
        <Attribute.HEALTH_STATUS: 'healthStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.MOTION_SENSOR: 'motionSensor'>: dict({
        <Attribute.MOTION: 'motion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 56, 9, 761000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'inactive',
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SOUND_SENSOR: 'soundSensor'>: dict({
        <Attribute.SOUND: 'sound'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 56, 9, 761000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'not detected',
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 56, 10, 41000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'on',
        }),
      }),
      <Capability.VIDEO_CAPTURE: 'videoCapture'>: dict({
        <Attribute.CLIP: 'clip'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.STREAM: 'stream'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.VIDEO_STREAM: 'videoStream'>: dict({
        <Attribute.STREAM: 'stream'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_FEATURES: 'supportedFeatures'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[c2c_arlo_siren]
  dict({
    'main': dict({
      <Capability.ALARM: 'alarm'>: dict({
        <Attribute.ALARM: 'alarm'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 56, 9, 756000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.HEALTH_CHECK: 'healthCheck'>: dict({
        <Attribute.DEVICE_WATCH_DEVICE_STATUS: 'DeviceWatch-DeviceStatus'>: dict({
          'data': dict({
          }),
          'timestamp': datetime.datetime(2025, 2, 8, 21, 56, 9, 756000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'online',
        }),
        <Attribute.DEVICE_WATCH_ENROLL: 'DeviceWatch-Enroll'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.CHECK_INTERVAL: 'checkInterval'>: dict({
          'data': dict({
            'deviceScheme': 'UNTRACKED',
            'protocol': 'cloud',
          }),
          'timestamp': datetime.datetime(2024, 8, 29, 17, 58, 33, 901000, tzinfo=datetime.timezone.utc),
          'unit': 's',
          'value': 60,
        }),
        <Attribute.HEALTH_STATUS: 'healthStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[c2c_humidity]
  dict({
    'main': dict({
      <Capability.BATTERY: 'battery'>: dict({
        <Attribute.BATTERY: 'battery'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 9, 4, 47, 696000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 100,
        }),
        <Attribute.QUANTITY: 'quantity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TYPE: 'type'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.HEALTH_CHECK: 'healthCheck'>: dict({
        <Attribute.DEVICE_WATCH_DEVICE_STATUS: 'DeviceWatch-DeviceStatus'>: dict({
          'data': dict({
            'reason': 'DEVICE-OFFLINE',
          }),
          'timestamp': datetime.datetime(2025, 2, 8, 9, 4, 47, 696000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'offline',
        }),
        <Attribute.DEVICE_WATCH_ENROLL: 'DeviceWatch-Enroll'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.CHECK_INTERVAL: 'checkInterval'>: dict({
          'data': dict({
            'deviceScheme': 'UNTRACKED',
            'protocol': 'cloud',
          }),
          'timestamp': datetime.datetime(2025, 2, 7, 23, 1, 15, 973000, tzinfo=datetime.timezone.utc),
          'unit': 's',
          'value': 60,
        }),
        <Attribute.HEALTH_STATUS: 'healthStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.RELATIVE_HUMIDITY_MEASUREMENT: 'relativeHumidityMeasurement'>: dict({
        <Attribute.HUMIDITY: 'humidity'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 9, 4, 47, 696000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 26,
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 9, 4, 47, 696000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': 26,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[c2c_motion_2]
  dict({
    'main': dict({
      <Capability.BATTERY: 'battery'>: dict({
        <Attribute.BATTERY: 'battery'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 3, 31, 3, 47000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 64,
        }),
        <Attribute.QUANTITY: 'quantity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TYPE: 'type'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.HEALTH_CHECK: 'healthCheck'>: dict({
        <Attribute.DEVICE_WATCH_DEVICE_STATUS: 'DeviceWatch-DeviceStatus'>: dict({
          'data': dict({
          }),
          'timestamp': datetime.datetime(2025, 2, 7, 15, 14, 53, 765000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'online',
        }),
        <Attribute.DEVICE_WATCH_ENROLL: 'DeviceWatch-Enroll'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.CHECK_INTERVAL: 'checkInterval'>: dict({
          'data': dict({
            'deviceScheme': 'UNTRACKED',
            'protocol': 'cloud',
          }),
          'timestamp': datetime.datetime(2023, 12, 17, 18, 11, 41, 578000, tzinfo=datetime.timezone.utc),
          'unit': 's',
          'value': 60,
        }),
        <Attribute.HEALTH_STATUS: 'healthStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.MOTION_SENSOR: 'motionSensor'>: dict({
        <Attribute.MOTION: 'motion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 7, 46, 49, 463000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'inactive',
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[c2c_shade]
  dict({
    'main': dict({
      <Capability.HEALTH_CHECK: 'healthCheck'>: dict({
        <Attribute.DEVICE_WATCH_DEVICE_STATUS: 'DeviceWatch-DeviceStatus'>: dict({
          'data': dict({
            'reason': 'DEVICE-OFFLINE',
          }),
          'timestamp': datetime.datetime(2025, 2, 8, 9, 4, 47, 694000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'offline',
        }),
        <Attribute.DEVICE_WATCH_ENROLL: 'DeviceWatch-Enroll'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.CHECK_INTERVAL: 'checkInterval'>: dict({
          'data': dict({
            'deviceScheme': 'UNTRACKED',
            'protocol': 'cloud',
          }),
          'timestamp': datetime.datetime(2025, 2, 7, 23, 1, 15, 966000, tzinfo=datetime.timezone.utc),
          'unit': 's',
          'value': 60,
        }),
        <Attribute.HEALTH_STATUS: 'healthStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SWITCH_LEVEL: 'switchLevel'>: dict({
        <Attribute.LEVEL: 'level'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 9, 4, 47, 694000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 100,
        }),
        <Attribute.LEVEL_RANGE: 'levelRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.WINDOW_SHADE: 'windowShade'>: dict({
        <Attribute.SUPPORTED_WINDOW_SHADE_COMMANDS: 'supportedWindowShadeCommands'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WINDOW_SHADE: 'windowShade'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 9, 4, 47, 694000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'open',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[c2c_switch]
  dict({
    'main': dict({
      <Capability.HEALTH_CHECK: 'healthCheck'>: dict({
        <Attribute.DEVICE_WATCH_DEVICE_STATUS: 'DeviceWatch-DeviceStatus'>: dict({
          'data': dict({
            'reason': 'DEVICE-OFFLINE',
          }),
          'timestamp': datetime.datetime(2025, 2, 8, 9, 4, 47, 691000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'offline',
        }),
        <Attribute.DEVICE_WATCH_ENROLL: 'DeviceWatch-Enroll'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.CHECK_INTERVAL: 'checkInterval'>: dict({
          'data': dict({
            'deviceScheme': 'UNTRACKED',
            'protocol': 'cloud',
          }),
          'timestamp': datetime.datetime(2025, 2, 7, 23, 1, 15, 962000, tzinfo=datetime.timezone.utc),
          'unit': 's',
          'value': 60,
        }),
        <Attribute.HEALTH_STATUS: 'healthStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 9, 4, 47, 691000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[c2c_thermostat_bridge_1]
  dict({
    'main': dict({
      <Capability.HEALTH_CHECK: 'healthCheck'>: dict({
        <Attribute.DEVICE_WATCH_DEVICE_STATUS: 'DeviceWatch-DeviceStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DEVICE_WATCH_ENROLL: 'DeviceWatch-Enroll'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.CHECK_INTERVAL: 'checkInterval'>: dict({
          'data': dict({
            'deviceScheme': 'UNTRACKED',
            'protocol': 'cloud',
          }),
          'timestamp': datetime.datetime(2025, 2, 7, 23, 3, 33, 797000, tzinfo=datetime.timezone.utc),
          'unit': 's',
          'value': 60,
        }),
        <Attribute.HEALTH_STATUS: 'healthStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.THERMOSTAT_MODE: 'thermostatMode'>: dict({
        <Attribute.SUPPORTED_THERMOSTAT_MODES: 'supportedThermostatModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.THERMOSTAT_MODE: 'thermostatMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[car_garage_door]
  dict({
    'main': dict({
      <Capability.BATTERY: 'battery'>: dict({
        <Attribute.BATTERY: 'battery'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 13, 55, 2, 124000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 100,
        }),
        <Attribute.QUANTITY: 'quantity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TYPE: 'type'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CONTACT_SENSOR: 'contactSensor'>: dict({
        <Attribute.CONTACT: 'contact'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 4, 3, 280000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'closed',
        }),
      }),
      <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>: dict({
        <Attribute.AVAILABLE_VERSION: 'availableVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 7, 6, 1, 2, 15, 881000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '00000103',
        }),
        <Attribute.CURRENT_VERSION: 'currentVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 7, 6, 1, 2, 15, 882000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '00000103',
        }),
        <Attribute.LAST_UPDATE_STATUS: 'lastUpdateStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_UPDATE_STATUS_REASON: 'lastUpdateStatusReason'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_UPDATE_TIME: 'lastUpdateTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.STATE: 'state'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 7, 6, 1, 2, 15, 882000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'normalOperation',
        }),
        <Attribute.SUPPORTED_COMMANDS: 'supportedCommands'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.UPDATE_AVAILABLE: 'updateAvailable'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 17, 26, 766000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 46.4,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[centralite]
  dict({
    'main': dict({
      <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>: dict({
        <Attribute.AVAILABLE_VERSION: 'availableVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 31, 19, 45, 30, 464000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '16015010',
        }),
        <Attribute.CURRENT_VERSION: 'currentVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 31, 19, 45, 30, 461000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '16015010',
        }),
        <Attribute.LAST_UPDATE_STATUS: 'lastUpdateStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_UPDATE_STATUS_REASON: 'lastUpdateStatusReason'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_UPDATE_TIME: 'lastUpdateTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.STATE: 'state'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 31, 19, 45, 30, 464000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'normalOperation',
        }),
        <Attribute.SUPPORTED_COMMANDS: 'supportedCommands'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.UPDATE_AVAILABLE: 'updateAvailable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 31, 19, 45, 30, 462000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
      }),
      <Capability.POWER_METER: 'powerMeter'>: dict({
        <Attribute.POWER: 'power'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 49, 44, 159000, tzinfo=datetime.timezone.utc),
          'unit': 'W',
          'value': 0.0,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 14, 44, 853000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[contact_sensor]
  dict({
    'main': dict({
      <Capability.BATTERY: 'battery'>: dict({
        <Attribute.BATTERY: 'battery'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 13, 23, 50, 726000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 100,
        }),
        <Attribute.QUANTITY: 'quantity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TYPE: 'type'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CONTACT_SENSOR: 'contactSensor'>: dict({
        <Attribute.CONTACT: 'contact'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 16, 42, 674000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'closed',
        }),
      }),
      <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>: dict({
        <Attribute.AVAILABLE_VERSION: 'availableVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 13, 59, 19, 101000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '00000103',
        }),
        <Attribute.CURRENT_VERSION: 'currentVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 13, 59, 19, 102000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '00000103',
        }),
        <Attribute.LAST_UPDATE_STATUS: 'lastUpdateStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_UPDATE_STATUS_REASON: 'lastUpdateStatusReason'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_UPDATE_TIME: 'lastUpdateTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.STATE: 'state'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 13, 59, 19, 101000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'normalOperation',
        }),
        <Attribute.SUPPORTED_COMMANDS: 'supportedCommands'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.UPDATE_AVAILABLE: 'updateAvailable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 13, 59, 19, 102000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 11, 44, 249000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 59.0,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[da_ac_rac_000001]
  dict({
    '1': dict({
      <Capability.AIR_CONDITIONER_FAN_MODE: 'airConditionerFanMode'>: dict({
        <Attribute.AVAILABLE_AC_FAN_MODES: 'availableAcFanModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.FAN_MODE: 'fanMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 44, 10, 381000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_AC_FAN_MODES: 'supportedAcFanModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 10, 10, 26, 28, 605000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'auto',
            'low',
            'medium',
            'high',
            'turbo',
          ]),
        }),
      }),
      <Capability.AIR_CONDITIONER_MODE: 'airConditionerMode'>: dict({
        <Attribute.AIR_CONDITIONER_MODE: 'airConditionerMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 8, 3, 50, 50, 930000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.AVAILABLE_AC_MODES: 'availableAcModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_AC_MODES: 'supportedAcModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 8, 3, 50, 50, 930000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.AIR_QUALITY_SENSOR: 'airQualitySensor'>: dict({
        <Attribute.AIR_QUALITY: 'airQuality'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 57, 57, 602000, tzinfo=datetime.timezone.utc),
          'unit': 'CAQI',
          'value': None,
        }),
      }),
      <Capability.AUDIO_VOLUME: 'audioVolume'>: dict({
        <Attribute.VOLUME: 'volume'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 53, 541000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': None,
        }),
      }),
      <Capability.CUSTOM_AIR_CONDITIONER_ODOR_CONTROLLER: 'custom.airConditionerOdorController'>: dict({
        <Attribute.AIR_CONDITIONER_ODOR_CONTROLLER_PROGRESS: 'airConditionerOdorControllerProgress'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 8, 4, 11, 38, 269000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.AIR_CONDITIONER_ODOR_CONTROLLER_STATE: 'airConditionerOdorControllerState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 8, 4, 11, 38, 269000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_AIR_CONDITIONER_OPTIONAL_MODE: 'custom.airConditionerOptionalMode'>: dict({
        <Attribute.AC_OPTIONAL_MODE: 'acOptionalMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 57, 57, 659000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_AC_OPTIONAL_MODE: 'supportedAcOptionalMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 57, 57, 659000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_AIR_CONDITIONER_TROPICAL_NIGHT_MODE: 'custom.airConditionerTropicalNightMode'>: dict({
        <Attribute.AC_TROPICAL_NIGHT_MODE_LEVEL: 'acTropicalNightModeLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 44, 10, 498000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_AUTO_CLEANING_MODE: 'custom.autoCleaningMode'>: dict({
        <Attribute.AUTO_CLEANING_MODE: 'autoCleaningMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 53, 344000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_AUTO_CLEANING_MODES: 'supportedAutoCleaningModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_OPERATING_STATES: 'supportedOperatingStates'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TIMED_CLEAN_DURATION: 'timedCleanDuration'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TIMED_CLEAN_DURATION_RANGE: 'timedCleanDurationRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_DEODOR_FILTER: 'custom.deodorFilter'>: dict({
        <Attribute.DEODOR_FILTER_CAPACITY: 'deodorFilterCapacity'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 39, 118000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.DEODOR_FILTER_LAST_RESET_DATE: 'deodorFilterLastResetDate'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 39, 118000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.DEODOR_FILTER_RESET_TYPE: 'deodorFilterResetType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 39, 118000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.DEODOR_FILTER_STATUS: 'deodorFilterStatus'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 39, 118000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.DEODOR_FILTER_USAGE: 'deodorFilterUsage'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 39, 118000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.DEODOR_FILTER_USAGE_STEP: 'deodorFilterUsageStep'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 39, 118000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_DEVICE_REPORT_STATE_CONFIGURATION: 'custom.deviceReportStateConfiguration'>: dict({
        <Attribute.REPORT_STATE_PERIOD: 'reportStatePeriod'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 44, 9, 800000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.REPORT_STATE_REALTIME: 'reportStateRealtime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 44, 9, 800000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.REPORT_STATE_REALTIME_PERIOD: 'reportStateRealtimePeriod'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 44, 9, 800000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 10, 10, 26, 28, 605000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'remoteControlStatus',
            'airQualitySensor',
            'dustSensor',
            'odorSensor',
            'veryFineDustSensor',
            'custom.dustFilter',
            'custom.deodorFilter',
            'custom.deviceReportStateConfiguration',
            'audioVolume',
            'custom.autoCleaningMode',
            'custom.airConditionerTropicalNightMode',
            'custom.airConditionerOdorController',
            'demandResponseLoadControl',
            'relativeHumidityMeasurement',
          ]),
        }),
      }),
      <Capability.CUSTOM_DUST_FILTER: 'custom.dustFilter'>: dict({
        <Attribute.DUST_FILTER_CAPACITY: 'dustFilterCapacity'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 39, 145000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.DUST_FILTER_LAST_RESET_DATE: 'dustFilterLastResetDate'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 39, 145000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.DUST_FILTER_RESET_TYPE: 'dustFilterResetType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 39, 145000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.DUST_FILTER_STATUS: 'dustFilterStatus'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 39, 145000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.DUST_FILTER_USAGE: 'dustFilterUsage'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 39, 145000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.DUST_FILTER_USAGE_STEP: 'dustFilterUsageStep'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 39, 145000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>: dict({
        <Attribute.DR_MAX_DURATION: 'drMaxDuration'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_INFO: 'energySavingInfo'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_LEVEL: 'energySavingLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_OPERATION: 'energySavingOperation'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_OPERATION_SUPPORT: 'energySavingOperationSupport'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_SUPPORT: 'energySavingSupport'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_TYPE: 'energyType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 38, 843000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.NOTIFICATION_TEMPLATE_I_D: 'notificationTemplateID'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_ENERGY_SAVING_LEVELS: 'supportedEnergySavingLevels'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_SPI_MODE: 'custom.spiMode'>: dict({
        <Attribute.SPI_MODE: 'spiMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 57, 57, 686000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>: dict({
        <Attribute.MAXIMUM_SETPOINT: 'maximumSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 8, 4, 4, 19, 901000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.MINIMUM_SETPOINT: 'minimumSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 8, 4, 4, 19, 901000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>: dict({
        <Attribute.DEMAND_RESPONSE_LOAD_CONTROL_STATUS: 'drlcStatus'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 54, 748000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.DUST_SENSOR: 'dustSensor'>: dict({
        <Attribute.DUST_LEVEL: 'dustLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 44, 10, 122000, tzinfo=datetime.timezone.utc),
          'unit': 'μg/m^3',
          'value': None,
        }),
        <Attribute.FINE_DUST_LEVEL: 'fineDustLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 44, 10, 122000, tzinfo=datetime.timezone.utc),
          'unit': 'μg/m^3',
          'value': None,
        }),
      }),
      <Capability.FAN_OSCILLATION_MODE: 'fanOscillationMode'>: dict({
        <Attribute.AVAILABLE_FAN_OSCILLATION_MODES: 'availableFanOscillationModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.FAN_OSCILLATION_MODE: 'fanOscillationMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 0, 44, 53, 247000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'fixed',
        }),
        <Attribute.SUPPORTED_FAN_OSCILLATION_MODES: 'supportedFanOscillationModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 44, 10, 325000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 44, 10, 472000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 44, 10, 472000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 44, 10, 472000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 44, 10, 472000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.OCF_FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 44, 10, 472000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 44, 10, 472000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 44, 10, 472000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 44, 10, 472000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 44, 10, 472000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 44, 10, 472000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 44, 10, 472000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 44, 10, 472000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 44, 10, 472000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 44, 10, 472000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 44, 10, 472000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 44, 10, 472000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.ODOR_SENSOR: 'odorSensor'>: dict({
        <Attribute.ODOR_LEVEL: 'odorLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 38, 992000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>: dict({
        <Attribute.POWER_CONSUMPTION: 'powerConsumption'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 53, 364000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.RELATIVE_HUMIDITY_MEASUREMENT: 'relativeHumidityMeasurement'>: dict({
        <Attribute.HUMIDITY: 'humidity'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 35, 291000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 0,
        }),
      }),
      <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>: dict({
        <Attribute.REMOTE_CONTROL_ENABLED: 'remoteControlEnabled'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 39, 97000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 44, 10, 518000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 44, 10, 373000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>: dict({
        <Attribute.COOLING_SETPOINT: 'coolingSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 59, 136000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.COOLING_SETPOINT_RANGE: 'coolingSetpointRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.VERY_FINE_DUST_SENSOR: 'veryFineDustSensor'>: dict({
        <Attribute.VERY_FINE_DUST_LEVEL: 'veryFineDustLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 38, 529000, tzinfo=datetime.timezone.utc),
          'unit': 'μg/m^3',
          'value': None,
        }),
      }),
    }),
    'main': dict({
      <Capability.AIR_CONDITIONER_FAN_MODE: 'airConditionerFanMode'>: dict({
        <Attribute.AVAILABLE_AC_FAN_MODES: 'availableAcFanModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.FAN_MODE: 'fanMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 9, 14, 39, 249000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'low',
        }),
        <Attribute.SUPPORTED_AC_FAN_MODES: 'supportedAcFanModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 9, 14, 39, 249000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'auto',
            'low',
            'medium',
            'high',
            'turbo',
          ]),
        }),
      }),
      <Capability.AIR_CONDITIONER_MODE: 'airConditionerMode'>: dict({
        <Attribute.AIR_CONDITIONER_MODE: 'airConditionerMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 9, 14, 39, 642000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'heat',
        }),
        <Attribute.AVAILABLE_AC_MODES: 'availableAcModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_AC_MODES: 'supportedAcModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 10, 10, 26, 28, 781000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'cool',
            'dry',
            'wind',
            'auto',
            'heat',
          ]),
        }),
      }),
      <Capability.AIR_QUALITY_SENSOR: 'airQualitySensor'>: dict({
        <Attribute.AIR_QUALITY: 'airQuality'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 37, 208000, tzinfo=datetime.timezone.utc),
          'unit': 'CAQI',
          'value': None,
        }),
      }),
      <Capability.AUDIO_VOLUME: 'audioVolume'>: dict({
        <Attribute.VOLUME: 'volume'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 9, 14, 39, 642000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 100,
        }),
      }),
      <Capability.CUSTOM_AIR_CONDITIONER_ODOR_CONTROLLER: 'custom.airConditionerOdorController'>: dict({
        <Attribute.AIR_CONDITIONER_ODOR_CONTROLLER_PROGRESS: 'airConditionerOdorControllerProgress'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 37, 555000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.AIR_CONDITIONER_ODOR_CONTROLLER_STATE: 'airConditionerOdorControllerState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 37, 555000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_AIR_CONDITIONER_OPTIONAL_MODE: 'custom.airConditionerOptionalMode'>: dict({
        <Attribute.AC_OPTIONAL_MODE: 'acOptionalMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 9, 14, 39, 642000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
        <Attribute.SUPPORTED_AC_OPTIONAL_MODE: 'supportedAcOptionalMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 10, 10, 26, 28, 781000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'off',
            'windFree',
          ]),
        }),
      }),
      <Capability.CUSTOM_AIR_CONDITIONER_TROPICAL_NIGHT_MODE: 'custom.airConditionerTropicalNightMode'>: dict({
        <Attribute.AC_TROPICAL_NIGHT_MODE_LEVEL: 'acTropicalNightModeLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 9, 14, 39, 642000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
      }),
      <Capability.CUSTOM_AUTO_CLEANING_MODE: 'custom.autoCleaningMode'>: dict({
        <Attribute.AUTO_CLEANING_MODE: 'autoCleaningMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 9, 14, 39, 642000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_AUTO_CLEANING_MODES: 'supportedAutoCleaningModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_OPERATING_STATES: 'supportedOperatingStates'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TIMED_CLEAN_DURATION: 'timedCleanDuration'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TIMED_CLEAN_DURATION_RANGE: 'timedCleanDurationRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_DEODOR_FILTER: 'custom.deodorFilter'>: dict({
        <Attribute.DEODOR_FILTER_CAPACITY: 'deodorFilterCapacity'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 35, 502000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.DEODOR_FILTER_LAST_RESET_DATE: 'deodorFilterLastResetDate'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 35, 502000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.DEODOR_FILTER_RESET_TYPE: 'deodorFilterResetType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 35, 502000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.DEODOR_FILTER_STATUS: 'deodorFilterStatus'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 35, 502000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.DEODOR_FILTER_USAGE: 'deodorFilterUsage'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 35, 502000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.DEODOR_FILTER_USAGE_STEP: 'deodorFilterUsageStep'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 35, 502000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_DEVICE_REPORT_STATE_CONFIGURATION: 'custom.deviceReportStateConfiguration'>: dict({
        <Attribute.REPORT_STATE_PERIOD: 'reportStatePeriod'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 35, 643000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.REPORT_STATE_REALTIME: 'reportStateRealtime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 35, 643000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.REPORT_STATE_REALTIME_PERIOD: 'reportStateRealtimePeriod'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 35, 643000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 9, 14, 39, 642000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'remoteControlStatus',
            'airQualitySensor',
            'dustSensor',
            'veryFineDustSensor',
            'custom.dustFilter',
            'custom.deodorFilter',
            'custom.deviceReportStateConfiguration',
            'samsungce.dongleSoftwareInstallation',
            'demandResponseLoadControl',
            'custom.airConditionerOdorController',
          ]),
        }),
      }),
      <Capability.CUSTOM_DISABLED_COMPONENTS: 'custom.disabledComponents'>: dict({
        <Attribute.DISABLED_COMPONENTS: 'disabledComponents'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 9, 14, 39, 642000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            '1',
          ]),
        }),
      }),
      <Capability.CUSTOM_DUST_FILTER: 'custom.dustFilter'>: dict({
        <Attribute.DUST_FILTER_CAPACITY: 'dustFilterCapacity'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 35, 527000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.DUST_FILTER_LAST_RESET_DATE: 'dustFilterLastResetDate'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 35, 527000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.DUST_FILTER_RESET_TYPE: 'dustFilterResetType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 35, 527000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.DUST_FILTER_STATUS: 'dustFilterStatus'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 35, 527000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.DUST_FILTER_USAGE: 'dustFilterUsage'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 35, 527000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.DUST_FILTER_USAGE_STEP: 'dustFilterUsageStep'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 35, 527000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>: dict({
        <Attribute.DR_MAX_DURATION: 'drMaxDuration'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_INFO: 'energySavingInfo'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_LEVEL: 'energySavingLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_OPERATION: 'energySavingOperation'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_OPERATION_SUPPORT: 'energySavingOperationSupport'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_SUPPORT: 'energySavingSupport'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 12, 29, 7, 29, 17, 526000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.ENERGY_TYPE: 'energyType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 10, 10, 26, 28, 781000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '1.0',
        }),
        <Attribute.NOTIFICATION_TEMPLATE_I_D: 'notificationTemplateID'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_ENERGY_SAVING_LEVELS: 'supportedEnergySavingLevels'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_SPI_MODE: 'custom.spiMode'>: dict({
        <Attribute.SPI_MODE: 'spiMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 9, 14, 39, 642000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>: dict({
        <Attribute.MAXIMUM_SETPOINT: 'maximumSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 10, 10, 26, 28, 781000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': 30,
        }),
        <Attribute.MINIMUM_SETPOINT: 'minimumSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 8, 6, 30, 58, 307000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': 16,
        }),
      }),
      <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>: dict({
        <Attribute.DEMAND_RESPONSE_LOAD_CONTROL_STATUS: 'drlcStatus'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 10, 10, 26, 28, 781000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'drlcLevel': -1,
            'drlcType': 1,
            'duration': 0,
            'override': False,
            'start': '1970-01-01T00:00:00Z',
          }),
        }),
      }),
      <Capability.DUST_SENSOR: 'dustSensor'>: dict({
        <Attribute.DUST_LEVEL: 'dustLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 35, 665000, tzinfo=datetime.timezone.utc),
          'unit': 'μg/m^3',
          'value': None,
        }),
        <Attribute.FINE_DUST_LEVEL: 'fineDustLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 35, 665000, tzinfo=datetime.timezone.utc),
          'unit': 'μg/m^3',
          'value': None,
        }),
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': dict({
            'href': '/temperature/desired/0',
          }),
          'timestamp': datetime.datetime(2023, 7, 19, 3, 7, 43, 270000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'payload': dict({
              'if': list([
                'oic.if.baseline',
                'oic.if.a',
              ]),
              'range': list([
                16.0,
                30.0,
              ]),
              'rt': list([
                'oic.r.temperature',
              ]),
              'temperature': 22.0,
              'units': 'C',
            }),
          }),
        }),
      }),
      <Capability.FAN_OSCILLATION_MODE: 'fanOscillationMode'>: dict({
        <Attribute.AVAILABLE_FAN_OSCILLATION_MODES: 'availableFanOscillationModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.FAN_OSCILLATION_MODE: 'fanOscillationMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 9, 14, 39, 249000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'fixed',
        }),
        <Attribute.SUPPORTED_FAN_OSCILLATION_MODES: 'supportedFanOscillationModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 35, 782000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 10, 10, 26, 28, 552000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '96a5ef74-5832-a84b-f1f7-ca799957065d',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 10, 10, 26, 28, 552000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'res.1.1.0,sh.1.1.0',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 10, 10, 26, 28, 552000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 35, 912000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.OCF_FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 10, 10, 26, 28, 552000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '0.1.0',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 10, 10, 26, 28, 552000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '1.0',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 10, 10, 26, 28, 552000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 10, 10, 26, 28, 552000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 10, 10, 26, 28, 781000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ARTIK051_KRAC_18K|10193441|60010132001111110200000000000000',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 10, 10, 26, 28, 552000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TizenRT2.0',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 10, 10, 26, 28, 552000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '0G3MPDCKA00010E',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 35, 803000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 10, 10, 26, 28, 552000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[room a/c] Samsung',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 10, 10, 26, 28, 552000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '96a5ef74-5832-a84b-f1f7-ca799957065d',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 35, 933000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 10, 10, 26, 28, 552000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA-AC-RAC-000001',
        }),
      }),
      <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>: dict({
        <Attribute.POWER_CONSUMPTION: 'powerConsumption'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 16, 15, 33, 639000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'deltaEnergy': 400,
            'end': '2025-02-09T16:15:33Z',
            'energy': 2247300,
            'energySaved': 0,
            'persistedEnergy': 2247300,
            'power': 0,
            'powerEnergy': 0.0,
            'start': '2025-02-09T15:45:29Z',
          }),
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.RELATIVE_HUMIDITY_MEASUREMENT: 'relativeHumidityMeasurement'>: dict({
        <Attribute.HUMIDITY: 'humidity'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 30, 13, 10, 23, 759000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 60,
        }),
      }),
      <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>: dict({
        <Attribute.REMOTE_CONTROL_ENABLED: 'remoteControlEnabled'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 35, 379000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>: dict({
        <Attribute.BINARY_ID: 'binaryId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 0, 44, 53, 855000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ARTIK051_KRAC_18K',
        }),
        <Attribute.DESCRIPTION: 'description'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MICOM_ASSAY_CODE: 'micomAssayCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_CLASSIFICATION_CODE: 'modelClassificationCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_NAME: 'modelName'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RELEASE_YEAR: 'releaseYear'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER: 'serialNumber'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER_EXTRA: 'serialNumberExtra'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_DONGLE_SOFTWARE_INSTALLATION: 'samsungce.dongleSoftwareInstallation'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 12, 29, 1, 36, 51, 289000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'completed',
        }),
      }),
      <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>: dict({
        <Attribute.VERSION_NUMBER: 'versionNumber'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 4, 6, 35, 9, 557000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 24070101,
        }),
      }),
      <Capability.SAMSUNG_CE_SELF_CHECK: 'samsungce.selfCheck'>: dict({
        <Attribute.ERRORS: 'errors'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 0, 44, 53, 349000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RESULT: 'result'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 0, 44, 53, 549000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.SUPPORTED_ACTIONS: 'supportedActions'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 4, 6, 35, 9, 557000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'start',
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>: dict({
        <Attribute.AVAILABLE_MODULES: 'availableModules'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 0, 44, 53, 855000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
        <Attribute.LAST_UPDATED_DATE: 'lastUpdatedDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEW_VERSION_AVAILABLE: 'newVersionAvailable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 0, 44, 53, 855000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OTN_D_U_I_D: 'otnDUID'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 0, 44, 53, 855000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '43CEZFTFFL7Z2',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TARGET_MODULE: 'targetModule'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 16, 37, 54, 72000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 16, 33, 29, 164000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': 25,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>: dict({
        <Attribute.COOLING_SETPOINT: 'coolingSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 9, 15, 11, 608000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': 25,
        }),
        <Attribute.COOLING_SETPOINT_RANGE: 'coolingSetpointRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.VERY_FINE_DUST_SENSOR: 'veryFineDustSensor'>: dict({
        <Attribute.VERY_FINE_DUST_LEVEL: 'veryFineDustLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 4, 6, 16, 43, 35, 363000, tzinfo=datetime.timezone.utc),
          'unit': 'μg/m^3',
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[da_ac_rac_000003]
  dict({
    'main': dict({
      <Capability.AIR_CONDITIONER_FAN_MODE: 'airConditionerFanMode'>: dict({
        <Attribute.AVAILABLE_AC_FAN_MODES: 'availableAcFanModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.FAN_MODE: 'fanMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 11, 38, 10, 259000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'low',
        }),
        <Attribute.SUPPORTED_AC_FAN_MODES: 'supportedAcFanModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 10, 17, 55, 9, 749000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'auto',
            'low',
            'medium',
            'high',
            'turbo',
          ]),
        }),
      }),
      <Capability.AIR_CONDITIONER_MODE: 'airConditionerMode'>: dict({
        <Attribute.AIR_CONDITIONER_MODE: 'airConditionerMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 19, 44, 50, 32000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'heat',
        }),
        <Attribute.AVAILABLE_AC_MODES: 'availableAcModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_AC_MODES: 'supportedAcModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 10, 17, 55, 9, 348000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'auto',
            'cool',
            'dry',
            'wind',
            'heat',
          ]),
        }),
      }),
      <Capability.AIR_QUALITY_SENSOR: 'airQualitySensor'>: dict({
        <Attribute.AIR_QUALITY: 'airQuality'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.AUDIO_VOLUME: 'audioVolume'>: dict({
        <Attribute.VOLUME: 'volume'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 19, 44, 50, 32000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 100,
        }),
      }),
      <Capability.CUSTOM_AIR_CONDITIONER_ODOR_CONTROLLER: 'custom.airConditionerOdorController'>: dict({
        <Attribute.AIR_CONDITIONER_ODOR_CONTROLLER_PROGRESS: 'airConditionerOdorControllerProgress'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.AIR_CONDITIONER_ODOR_CONTROLLER_STATE: 'airConditionerOdorControllerState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_AIR_CONDITIONER_OPTIONAL_MODE: 'custom.airConditionerOptionalMode'>: dict({
        <Attribute.AC_OPTIONAL_MODE: 'acOptionalMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 11, 38, 10, 316000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
        <Attribute.SUPPORTED_AC_OPTIONAL_MODE: 'supportedAcOptionalMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 10, 17, 55, 9, 303000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'off',
            'sleep',
            'quiet',
            'speed',
            'windFree',
            'windFreeSleep',
          ]),
        }),
      }),
      <Capability.CUSTOM_AIR_CONDITIONER_TROPICAL_NIGHT_MODE: 'custom.airConditionerTropicalNightMode'>: dict({
        <Attribute.AC_TROPICAL_NIGHT_MODE_LEVEL: 'acTropicalNightModeLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 19, 44, 50, 32000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
      }),
      <Capability.CUSTOM_AUTO_CLEANING_MODE: 'custom.autoCleaningMode'>: dict({
        <Attribute.AUTO_CLEANING_MODE: 'autoCleaningMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 11, 38, 10, 192000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_AUTO_CLEANING_MODES: 'supportedAutoCleaningModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_OPERATING_STATES: 'supportedOperatingStates'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TIMED_CLEAN_DURATION: 'timedCleanDuration'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TIMED_CLEAN_DURATION_RANGE: 'timedCleanDurationRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_DEODOR_FILTER: 'custom.deodorFilter'>: dict({
        <Attribute.DEODOR_FILTER_CAPACITY: 'deodorFilterCapacity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DEODOR_FILTER_LAST_RESET_DATE: 'deodorFilterLastResetDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DEODOR_FILTER_RESET_TYPE: 'deodorFilterResetType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DEODOR_FILTER_STATUS: 'deodorFilterStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DEODOR_FILTER_USAGE: 'deodorFilterUsage'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DEODOR_FILTER_USAGE_STEP: 'deodorFilterUsageStep'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_DEVICE_REPORT_STATE_CONFIGURATION: 'custom.deviceReportStateConfiguration'>: dict({
        <Attribute.REPORT_STATE_PERIOD: 'reportStatePeriod'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 11, 38, 10, 371000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'enabled',
        }),
        <Attribute.REPORT_STATE_REALTIME: 'reportStateRealtime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 11, 38, 10, 371000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'state': 'disabled',
          }),
        }),
        <Attribute.REPORT_STATE_REALTIME_PERIOD: 'reportStateRealtimePeriod'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 11, 38, 10, 371000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'disabled',
        }),
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 19, 44, 50, 32000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'remoteControlStatus',
            'airQualitySensor',
            'dustSensor',
            'odorSensor',
            'veryFineDustSensor',
            'custom.spiMode',
            'custom.deodorFilter',
            'custom.electricHepaFilter',
            'custom.periodicSensing',
            'custom.doNotDisturbMode',
            'demandResponseLoadControl',
            'powerConsumptionReport',
            'custom.airConditionerOdorController',
            'samsungce.individualControlLock',
          ]),
        }),
      }),
      <Capability.CUSTOM_DO_NOT_DISTURB_MODE: 'custom.doNotDisturbMode'>: dict({
        <Attribute.DO_NOT_DISTURB: 'doNotDisturb'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.END_TIME: 'endTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.START_TIME: 'startTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_DUST_FILTER: 'custom.dustFilter'>: dict({
        <Attribute.DUST_FILTER_CAPACITY: 'dustFilterCapacity'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 11, 38, 10, 250000, tzinfo=datetime.timezone.utc),
          'unit': 'Hour',
          'value': 500,
        }),
        <Attribute.DUST_FILTER_LAST_RESET_DATE: 'dustFilterLastResetDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DUST_FILTER_RESET_TYPE: 'dustFilterResetType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 11, 38, 10, 250000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'replaceable',
            'washable',
          ]),
        }),
        <Attribute.DUST_FILTER_STATUS: 'dustFilterStatus'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 11, 38, 10, 250000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'normal',
        }),
        <Attribute.DUST_FILTER_USAGE: 'dustFilterUsage'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 11, 38, 10, 250000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
        <Attribute.DUST_FILTER_USAGE_STEP: 'dustFilterUsageStep'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 11, 38, 10, 250000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 1,
        }),
      }),
      <Capability.CUSTOM_ELECTRIC_HEPA_FILTER: 'custom.electricHepaFilter'>: dict({
        <Attribute.ELECTRIC_HEPA_FILTER_CAPACITY: 'electricHepaFilterCapacity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ELECTRIC_HEPA_FILTER_LAST_RESET_DATE: 'electricHepaFilterLastResetDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ELECTRIC_HEPA_FILTER_RESET_TYPE: 'electricHepaFilterResetType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ELECTRIC_HEPA_FILTER_STATUS: 'electricHepaFilterStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ELECTRIC_HEPA_FILTER_USAGE: 'electricHepaFilterUsage'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ELECTRIC_HEPA_FILTER_USAGE_STEP: 'electricHepaFilterUsageStep'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>: dict({
        <Attribute.DR_MAX_DURATION: 'drMaxDuration'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 10, 17, 55, 7, 775000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 99999999,
        }),
        <Attribute.ENERGY_SAVING_INFO: 'energySavingInfo'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_LEVEL: 'energySavingLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_OPERATION: 'energySavingOperation'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_OPERATION_SUPPORT: 'energySavingOperationSupport'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 10, 17, 55, 7, 775000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.ENERGY_SAVING_SUPPORT: 'energySavingSupport'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 10, 17, 55, 7, 944000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.ENERGY_TYPE: 'energyType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 10, 17, 55, 9, 749000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '1.0',
        }),
        <Attribute.NOTIFICATION_TEMPLATE_I_D: 'notificationTemplateID'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_ENERGY_SAVING_LEVELS: 'supportedEnergySavingLevels'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_OCF_RESOURCE_VERSION: 'custom.ocfResourceVersion'>: dict({
        <Attribute.OCF_RESOURCE_UPDATED_TIME: 'ocfResourceUpdatedTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OCF_RESOURCE_VERSION: 'ocfResourceVersion'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_PERIODIC_SENSING: 'custom.periodicSensing'>: dict({
        <Attribute.AUTOMATIC_EXECUTION_MODE: 'automaticExecutionMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.AUTOMATIC_EXECUTION_SETTING: 'automaticExecutionSetting'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_SENSING_LEVEL: 'lastSensingLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_SENSING_TIME: 'lastSensingTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.PERIODIC_SENSING: 'periodicSensing'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.PERIODIC_SENSING_INTERVAL: 'periodicSensingInterval'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.PERIODIC_SENSING_STATUS: 'periodicSensingStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_AUTOMATIC_EXECUTION_MODE: 'supportedAutomaticExecutionMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_AUTOMATIC_EXECUTION_SETTING: 'supportedAutomaticExecutionSetting'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_SPI_MODE: 'custom.spiMode'>: dict({
        <Attribute.SPI_MODE: 'spiMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>: dict({
        <Attribute.MAXIMUM_SETPOINT: 'maximumSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 10, 17, 55, 7, 240000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': 30,
        }),
        <Attribute.MINIMUM_SETPOINT: 'minimumSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 20, 56, 26, 603000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': 16,
        }),
      }),
      <Capability.CUSTOM_VERY_FINE_DUST_FILTER: 'custom.veryFineDustFilter'>: dict({
        <Attribute.VERY_FINE_DUST_FILTER_CAPACITY: 'veryFineDustFilterCapacity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.VERY_FINE_DUST_FILTER_LAST_RESET_DATE: 'veryFineDustFilterLastResetDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.VERY_FINE_DUST_FILTER_RESET_TYPE: 'veryFineDustFilterResetType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.VERY_FINE_DUST_FILTER_STATUS: 'veryFineDustFilterStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.VERY_FINE_DUST_FILTER_USAGE: 'veryFineDustFilterUsage'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.VERY_FINE_DUST_FILTER_USAGE_STEP: 'veryFineDustFilterUsageStep'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>: dict({
        <Attribute.DEMAND_RESPONSE_LOAD_CONTROL_STATUS: 'drlcStatus'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 10, 17, 55, 9, 749000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'drlcLevel': -1,
            'drlcType': 1,
            'duration': 0,
            'override': False,
            'start': '1970-01-01T00:00:00Z',
          }),
        }),
      }),
      <Capability.DUST_SENSOR: 'dustSensor'>: dict({
        <Attribute.DUST_LEVEL: 'dustLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.FINE_DUST_LEVEL: 'fineDustLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.FAN_OSCILLATION_MODE: 'fanOscillationMode'>: dict({
        <Attribute.AVAILABLE_FAN_OSCILLATION_MODES: 'availableFanOscillationModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.FAN_OSCILLATION_MODE: 'fanOscillationMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 11, 38, 10, 360000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'fixed',
        }),
        <Attribute.SUPPORTED_FAN_OSCILLATION_MODES: 'supportedFanOscillationModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 11, 38, 10, 360000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'fixed',
            'all',
            'vertical',
            'horizontal',
          ]),
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 10, 18, 1, 5, 142000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '29014d68-d9a8-20da-0b6f-053112978980',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 10, 18, 1, 5, 142000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'res.1.1.0,sh.1.1.0',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 10, 18, 1, 5, 142000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OCF_FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 10, 18, 1, 5, 166000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TP2X_RAC_20K_11240702',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 10, 18, 1, 5, 166000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'MediaTek',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 10, 18, 1, 5, 166000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 10, 18, 1, 5, 166000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 10, 18, 1, 5, 212000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TP2X_RAC_20K|10256941|60010519001411014600003200800000',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 10, 18, 1, 5, 166000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TizenRT 2.0 + IPv6',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 10, 18, 1, 5, 166000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DAWIT 2.0',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 10, 18, 1, 5, 166000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 10, 18, 1, 5, 142000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung-Room-Air-Conditioner',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 10, 18, 1, 5, 166000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '29014d68-d9a8-20da-0b6f-053112978980',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 10, 18, 1, 5, 166000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA-AC-RAC-000003',
        }),
      }),
      <Capability.ODOR_SENSOR: 'odorSensor'>: dict({
        <Attribute.ODOR_LEVEL: 'odorLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>: dict({
        <Attribute.POWER_CONSUMPTION: 'powerConsumption'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.RELATIVE_HUMIDITY_MEASUREMENT: 'relativeHumidityMeasurement'>: dict({
        <Attribute.HUMIDITY: 'humidity'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 20, 46, 13, 242000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 36,
        }),
      }),
      <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>: dict({
        <Attribute.REMOTE_CONTROL_ENABLED: 'remoteControlEnabled'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>: dict({
        <Attribute.BINARY_ID: 'binaryId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 11, 38, 10, 321000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TP2X_RAC_20K',
        }),
        <Attribute.DESCRIPTION: 'description'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MICOM_ASSAY_CODE: 'micomAssayCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_CLASSIFICATION_CODE: 'modelClassificationCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_NAME: 'modelName'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RELEASE_YEAR: 'releaseYear'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER: 'serialNumber'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER_EXTRA: 'serialNumberExtra'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>: dict({
        <Attribute.VERSION_NUMBER: 'versionNumber'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 10, 17, 55, 7, 240000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 24040101,
        }),
      }),
      <Capability.SAMSUNG_CE_DUST_FILTER_ALARM: 'samsungce.dustFilterAlarm'>: dict({
        <Attribute.ALARM_THRESHOLD: 'alarmThreshold'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 11, 38, 10, 250000, tzinfo=datetime.timezone.utc),
          'unit': 'Hour',
          'value': 500,
        }),
        <Attribute.SUPPORTED_ALARM_THRESHOLDS: 'supportedAlarmThresholds'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 11, 38, 10, 250000, tzinfo=datetime.timezone.utc),
          'unit': 'Hour',
          'value': list([
            180,
            300,
            500,
            700,
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_INDIVIDUAL_CONTROL_LOCK: 'samsungce.individualControlLock'>: dict({
        <Attribute.LOCK_STATE: 'lockState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_SELF_CHECK: 'samsungce.selfCheck'>: dict({
        <Attribute.ERRORS: 'errors'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 11, 38, 9, 655000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RESULT: 'result'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_ACTIONS: 'supportedActions'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 10, 17, 55, 7, 240000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'start',
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>: dict({
        <Attribute.AVAILABLE_MODULES: 'availableModules'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 11, 38, 10, 321000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
        <Attribute.LAST_UPDATED_DATE: 'lastUpdatedDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEW_VERSION_AVAILABLE: 'newVersionAvailable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 11, 38, 10, 321000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OTN_D_U_I_D: 'otnDUID'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 11, 38, 10, 321000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'P7CFUCFWR7IQS',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TARGET_MODULE: 'targetModule'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 11, 38, 10, 374000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
          }),
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 11, 38, 10, 252000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 11, 38, 10, 393000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': 17,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>: dict({
        <Attribute.COOLING_SETPOINT: 'coolingSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 11, 38, 10, 393000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': 22,
        }),
        <Attribute.COOLING_SETPOINT_RANGE: 'coolingSetpointRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.VERY_FINE_DUST_SENSOR: 'veryFineDustSensor'>: dict({
        <Attribute.VERY_FINE_DUST_LEVEL: 'veryFineDustLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[da_ac_rac_01001]
  dict({
    'main': dict({
      <Capability.AIR_CONDITIONER_FAN_MODE: 'airConditionerFanMode'>: dict({
        <Attribute.AVAILABLE_AC_FAN_MODES: 'availableAcFanModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 5, 44, 1, 769000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'auto',
            'low',
            'medium',
            'high',
            'turbo',
          ]),
        }),
        <Attribute.FAN_MODE: 'fanMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 14, 7, 45, 816000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'high',
        }),
        <Attribute.SUPPORTED_AC_FAN_MODES: 'supportedAcFanModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 444000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'auto',
            'low',
            'medium',
            'high',
            'turbo',
          ]),
        }),
      }),
      <Capability.AIR_CONDITIONER_MODE: 'airConditionerMode'>: dict({
        <Attribute.AIR_CONDITIONER_MODE: 'airConditionerMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 4, 52, 0, 923000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'cool',
        }),
        <Attribute.AVAILABLE_AC_MODES: 'availableAcModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 14, 35, 56, 800000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
        <Attribute.SUPPORTED_AC_MODES: 'supportedAcModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 444000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'auto',
            'cool',
            'dry',
            'wind',
            'heat',
          ]),
        }),
      }),
      <Capability.AIR_QUALITY_SENSOR: 'airQualitySensor'>: dict({
        <Attribute.AIR_QUALITY: 'airQuality'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.AUDIO_NOTIFICATION: 'audioNotification'>: dict({
      }),
      <Capability.AUDIO_VOLUME: 'audioVolume'>: dict({
        <Attribute.VOLUME: 'volume'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 4, 52, 0, 923000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 0,
        }),
      }),
      <Capability.BYPASSABLE: 'bypassable'>: dict({
        <Attribute.BYPASS_STATUS: 'bypassStatus'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 28, 21, 31, 35, 935000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'bypassed',
        }),
      }),
      <Capability.CUSTOM_AIR_CONDITIONER_ODOR_CONTROLLER: 'custom.airConditionerOdorController'>: dict({
        <Attribute.AIR_CONDITIONER_ODOR_CONTROLLER_PROGRESS: 'airConditionerOdorControllerProgress'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 4, 52, 0, 923000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
        <Attribute.AIR_CONDITIONER_ODOR_CONTROLLER_STATE: 'airConditionerOdorControllerState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 4, 52, 0, 923000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.CUSTOM_AIR_CONDITIONER_OPTIONAL_MODE: 'custom.airConditionerOptionalMode'>: dict({
        <Attribute.AC_OPTIONAL_MODE: 'acOptionalMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 5, 44, 1, 853000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
        <Attribute.SUPPORTED_AC_OPTIONAL_MODE: 'supportedAcOptionalMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 444000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'off',
            'sleep',
            'quiet',
            'smart',
            'speed',
            'windFree',
            'windFreeSleep',
          ]),
        }),
      }),
      <Capability.CUSTOM_AIR_CONDITIONER_TROPICAL_NIGHT_MODE: 'custom.airConditionerTropicalNightMode'>: dict({
        <Attribute.AC_TROPICAL_NIGHT_MODE_LEVEL: 'acTropicalNightModeLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 4, 52, 0, 923000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 6,
        }),
      }),
      <Capability.CUSTOM_AUTO_CLEANING_MODE: 'custom.autoCleaningMode'>: dict({
        <Attribute.AUTO_CLEANING_MODE: 'autoCleaningMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 5, 44, 2, 14000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'on',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_AUTO_CLEANING_MODES: 'supportedAutoCleaningModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_OPERATING_STATES: 'supportedOperatingStates'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TIMED_CLEAN_DURATION: 'timedCleanDuration'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TIMED_CLEAN_DURATION_RANGE: 'timedCleanDurationRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_DEODOR_FILTER: 'custom.deodorFilter'>: dict({
        <Attribute.DEODOR_FILTER_CAPACITY: 'deodorFilterCapacity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DEODOR_FILTER_LAST_RESET_DATE: 'deodorFilterLastResetDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DEODOR_FILTER_RESET_TYPE: 'deodorFilterResetType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DEODOR_FILTER_STATUS: 'deodorFilterStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DEODOR_FILTER_USAGE: 'deodorFilterUsage'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DEODOR_FILTER_USAGE_STEP: 'deodorFilterUsageStep'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_DEVICE_REPORT_STATE_CONFIGURATION: 'custom.deviceReportStateConfiguration'>: dict({
        <Attribute.REPORT_STATE_PERIOD: 'reportStatePeriod'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 5, 17, 39, 792000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'enabled',
        }),
        <Attribute.REPORT_STATE_REALTIME: 'reportStateRealtime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 444000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'state': 'disabled',
          }),
        }),
        <Attribute.REPORT_STATE_REALTIME_PERIOD: 'reportStateRealtimePeriod'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 5, 17, 39, 792000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'disabled',
        }),
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 444000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'custom.deodorFilter',
            'custom.electricHepaFilter',
            'custom.periodicSensing',
            'custom.doNotDisturbMode',
            'samsungce.deviceInfoPrivate',
            'samsungce.quickControl',
            'samsungce.welcomeCooling',
            'samsungce.airConditionerBeep',
            'samsungce.airConditionerLighting',
            'samsungce.individualControlLock',
            'samsungce.alwaysOnSensing',
            'samsungce.buttonDisplayCondition',
            'airQualitySensor',
            'dustSensor',
            'odorSensor',
            'veryFineDustSensor',
            'custom.spiMode',
            'audioNotification',
          ]),
        }),
      }),
      <Capability.CUSTOM_DO_NOT_DISTURB_MODE: 'custom.doNotDisturbMode'>: dict({
        <Attribute.DO_NOT_DISTURB: 'doNotDisturb'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.END_TIME: 'endTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.START_TIME: 'startTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_DUST_FILTER: 'custom.dustFilter'>: dict({
        <Attribute.DUST_FILTER_CAPACITY: 'dustFilterCapacity'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 12, 0, 10, 310000, tzinfo=datetime.timezone.utc),
          'unit': 'Hour',
          'value': 500,
        }),
        <Attribute.DUST_FILTER_LAST_RESET_DATE: 'dustFilterLastResetDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DUST_FILTER_RESET_TYPE: 'dustFilterResetType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 12, 0, 10, 310000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'replaceable',
            'washable',
          ]),
        }),
        <Attribute.DUST_FILTER_STATUS: 'dustFilterStatus'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 12, 0, 10, 310000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'normal',
        }),
        <Attribute.DUST_FILTER_USAGE: 'dustFilterUsage'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 12, 0, 10, 310000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 12,
        }),
        <Attribute.DUST_FILTER_USAGE_STEP: 'dustFilterUsageStep'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 12, 0, 10, 310000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 1,
        }),
      }),
      <Capability.CUSTOM_ELECTRIC_HEPA_FILTER: 'custom.electricHepaFilter'>: dict({
        <Attribute.ELECTRIC_HEPA_FILTER_CAPACITY: 'electricHepaFilterCapacity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ELECTRIC_HEPA_FILTER_LAST_RESET_DATE: 'electricHepaFilterLastResetDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ELECTRIC_HEPA_FILTER_RESET_TYPE: 'electricHepaFilterResetType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ELECTRIC_HEPA_FILTER_STATUS: 'electricHepaFilterStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ELECTRIC_HEPA_FILTER_USAGE: 'electricHepaFilterUsage'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ELECTRIC_HEPA_FILTER_USAGE_STEP: 'electricHepaFilterUsageStep'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>: dict({
        <Attribute.DR_MAX_DURATION: 'drMaxDuration'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 28, 21, 31, 37, 357000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 99999999,
        }),
        <Attribute.ENERGY_SAVING_INFO: 'energySavingInfo'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_LEVEL: 'energySavingLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_OPERATION: 'energySavingOperation'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 444000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.ENERGY_SAVING_OPERATION_SUPPORT: 'energySavingOperationSupport'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 28, 21, 38, 35, 731000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
        <Attribute.ENERGY_SAVING_SUPPORT: 'energySavingSupport'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 28, 21, 38, 35, 560000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
        <Attribute.ENERGY_TYPE: 'energyType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 28, 21, 31, 39, 517000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '1.0',
        }),
        <Attribute.NOTIFICATION_TEMPLATE_I_D: 'notificationTemplateID'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_ENERGY_SAVING_LEVELS: 'supportedEnergySavingLevels'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_PERIODIC_SENSING: 'custom.periodicSensing'>: dict({
        <Attribute.AUTOMATIC_EXECUTION_MODE: 'automaticExecutionMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.AUTOMATIC_EXECUTION_SETTING: 'automaticExecutionSetting'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_SENSING_LEVEL: 'lastSensingLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_SENSING_TIME: 'lastSensingTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.PERIODIC_SENSING: 'periodicSensing'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.PERIODIC_SENSING_INTERVAL: 'periodicSensingInterval'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.PERIODIC_SENSING_STATUS: 'periodicSensingStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_AUTOMATIC_EXECUTION_MODE: 'supportedAutomaticExecutionMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_AUTOMATIC_EXECUTION_SETTING: 'supportedAutomaticExecutionSetting'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_SPI_MODE: 'custom.spiMode'>: dict({
        <Attribute.SPI_MODE: 'spiMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>: dict({
        <Attribute.MAXIMUM_SETPOINT: 'maximumSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 444000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': 30,
        }),
        <Attribute.MINIMUM_SETPOINT: 'minimumSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 444000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': 16,
        }),
      }),
      <Capability.CUSTOM_VERY_FINE_DUST_FILTER: 'custom.veryFineDustFilter'>: dict({
        <Attribute.VERY_FINE_DUST_FILTER_CAPACITY: 'veryFineDustFilterCapacity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.VERY_FINE_DUST_FILTER_LAST_RESET_DATE: 'veryFineDustFilterLastResetDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.VERY_FINE_DUST_FILTER_RESET_TYPE: 'veryFineDustFilterResetType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.VERY_FINE_DUST_FILTER_STATUS: 'veryFineDustFilterStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.VERY_FINE_DUST_FILTER_USAGE: 'veryFineDustFilterUsage'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.VERY_FINE_DUST_FILTER_USAGE_STEP: 'veryFineDustFilterUsageStep'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>: dict({
        <Attribute.DEMAND_RESPONSE_LOAD_CONTROL_STATUS: 'drlcStatus'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 444000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'drlcLevel': 0,
            'drlcType': 1,
            'duration': 0,
            'override': False,
            'start': '1970-01-01T00:00:00Z',
          }),
        }),
      }),
      <Capability.DUST_SENSOR: 'dustSensor'>: dict({
        <Attribute.DUST_LEVEL: 'dustLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.FINE_DUST_LEVEL: 'fineDustLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.FAN_OSCILLATION_MODE: 'fanOscillationMode'>: dict({
        <Attribute.AVAILABLE_FAN_OSCILLATION_MODES: 'availableFanOscillationModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.FAN_OSCILLATION_MODE: 'fanOscillationMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 444000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'fixed',
        }),
        <Attribute.SUPPORTED_FAN_OSCILLATION_MODES: 'supportedFanOscillationModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 444000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'fixed',
            'vertical',
            'horizontal',
            'all',
          ]),
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 12, 714000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '4ece486b-89db-f06a-d54d-748b676b4d8e',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 12, 714000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'res.1.1.0,sh.1.1.0',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 12, 714000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OCF_FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 12, 723000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ARA-WW-TP1-22-COMMON_11240702',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 12, 723000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Realtek',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 12, 723000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 12, 723000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 444000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ARA-WW-TP1-22-COMMON|10229641|60010523001511014600083200800000',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 12, 723000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TizenRT 3.1',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 12, 723000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DAWIT 2.0',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 12, 723000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 12, 714000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung-Room-Air-Conditioner',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 12, 723000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '4ece486b-89db-f06a-d54d-748b676b4d8e',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 12, 723000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA-AC-RAC-01001',
        }),
      }),
      <Capability.ODOR_SENSOR: 'odorSensor'>: dict({
        <Attribute.ODOR_LEVEL: 'odorLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>: dict({
        <Attribute.POWER_CONSUMPTION: 'powerConsumption'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 2, 44, 883000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'deltaEnergy': 0,
            'end': '2025-02-09T17:02:44Z',
            'energy': 13836,
            'energySaved': 0,
            'persistedEnergy': 13836,
            'persistedSavedEnergy': 0,
            'power': 0,
            'powerEnergy': 0.0,
            'start': '2025-02-09T16:08:15Z',
          }),
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.RELATIVE_HUMIDITY_MEASUREMENT: 'relativeHumidityMeasurement'>: dict({
        <Attribute.HUMIDITY: 'humidity'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 2, 45, 42000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 42,
        }),
      }),
      <Capability.SAMSUNG_CE_AIR_CONDITIONER_BEEP: 'samsungce.airConditionerBeep'>: dict({
        <Attribute.BEEP: 'beep'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 4, 52, 0, 923000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.SAMSUNG_CE_AIR_CONDITIONER_LIGHTING: 'samsungce.airConditionerLighting'>: dict({
        <Attribute.LIGHTING: 'lighting'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 9, 30, 3, 213000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'on',
        }),
        <Attribute.SUPPORTED_LIGHTING_LEVELS: 'supportedLightingLevels'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 444000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'on',
            'off',
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_AIR_QUALITY_HEALTH_CONCERN: 'samsungce.airQualityHealthConcern'>: dict({
        <Attribute.AIR_QUALITY_HEALTH_CONCERN: 'airQualityHealthConcern'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_AIR_QUALITY_HEALTH_CONCERNS: 'supportedAirQualityHealthConcerns'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_ALWAYS_ON_SENSING: 'samsungce.alwaysOnSensing'>: dict({
        <Attribute.ALWAYS_ON: 'alwaysOn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 444000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
        <Attribute.ORIGINS: 'origins'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 444000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_BUTTON_DISPLAY_CONDITION: 'samsungce.buttonDisplayCondition'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 5, 17, 41, 282000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'enabled',
        }),
      }),
      <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>: dict({
        <Attribute.BINARY_ID: 'binaryId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 444000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ARA-WW-TP1-22-COMMON',
        }),
        <Attribute.DESCRIPTION: 'description'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MICOM_ASSAY_CODE: 'micomAssayCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_CLASSIFICATION_CODE: 'modelClassificationCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_NAME: 'modelName'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RELEASE_YEAR: 'releaseYear'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 28, 21, 31, 35, 935000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 21,
        }),
        <Attribute.SERIAL_NUMBER: 'serialNumber'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER_EXTRA: 'serialNumberExtra'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>: dict({
        <Attribute.VERSION_NUMBER: 'versionNumber'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 28, 21, 31, 35, 935000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 24100102,
        }),
      }),
      <Capability.SAMSUNG_CE_DUST_FILTER_ALARM: 'samsungce.dustFilterAlarm'>: dict({
        <Attribute.ALARM_THRESHOLD: 'alarmThreshold'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 12, 0, 10, 310000, tzinfo=datetime.timezone.utc),
          'unit': 'Hour',
          'value': 500,
        }),
        <Attribute.SUPPORTED_ALARM_THRESHOLDS: 'supportedAlarmThresholds'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 444000, tzinfo=datetime.timezone.utc),
          'unit': 'Hour',
          'value': list([
            180,
            300,
            500,
            700,
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_INDIVIDUAL_CONTROL_LOCK: 'samsungce.individualControlLock'>: dict({
        <Attribute.LOCK_STATE: 'lockState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_QUICK_CONTROL: 'samsungce.quickControl'>: dict({
        <Attribute.VERSION: 'version'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_SELF_CHECK: 'samsungce.selfCheck'>: dict({
        <Attribute.ERRORS: 'errors'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 444000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 4, 52, 0, 923000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 1,
        }),
        <Attribute.RESULT: 'result'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 4, 52, 0, 923000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.SUPPORTED_ACTIONS: 'supportedActions'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 4, 52, 0, 923000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'start',
            'cancel',
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_SILENT_ACTION: 'samsungce.silentAction'>: dict({
      }),
      <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>: dict({
        <Attribute.AVAILABLE_MODULES: 'availableModules'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 28, 21, 31, 38, 89000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
        <Attribute.LAST_UPDATED_DATE: 'lastUpdatedDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEW_VERSION_AVAILABLE: 'newVersionAvailable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 444000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 5, 20, 7, 11, 459000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
        <Attribute.OTN_D_U_I_D: 'otnDUID'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 444000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'U7CB2ZD4QPDUC',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TARGET_MODULE: 'targetModule'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 5, 20, 7, 11, 459000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
          }),
        }),
      }),
      <Capability.SAMSUNG_CE_UNAVAILABLE_CAPABILITIES: 'samsungce.unavailableCapabilities'>: dict({
        <Attribute.UNAVAILABLE_COMMANDS: 'unavailableCommands'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 5, 44, 1, 769000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'custom.spiMode.setSpiMode',
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_WELCOME_COOLING: 'samsungce.welcomeCooling'>: dict({
        <Attribute.LATEST_REQUEST_ID: 'latestRequestId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SEC_CALM_CONNECTION_CARE: 'sec.calmConnectionCare'>: dict({
        <Attribute.PROTOCOLS: 'protocols'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ROLE: 'role'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 444000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'things',
          ]),
        }),
        <Attribute.VERSION: 'version'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 444000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '1.0',
        }),
      }),
      <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>: dict({
        <Attribute.DUMP_TYPE: 'dumpType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 444000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'file',
        }),
        <Attribute.ENDPOINT: 'endpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 444000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'SSM',
        }),
        <Attribute.LOG_TYPE: 'logType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 444000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'errCode',
            'dump',
          ]),
        }),
        <Attribute.MIN_VERSION: 'minVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 444000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '1.0',
        }),
        <Attribute.MN_ID: 'mnId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 444000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '0AJT',
        }),
        <Attribute.PROTOCOL_TYPE: 'protocolType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 444000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'wifi_https',
        }),
        <Attribute.SETUP_ID: 'setupId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 444000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '010',
        }),
        <Attribute.SIGNIN_PERMISSION: 'signinPermission'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TS_ID: 'tsId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 444000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA01',
        }),
      }),
      <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>: dict({
        <Attribute.AUTO_RECONNECTION: 'autoReconnection'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 444000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
        <Attribute.MIN_VERSION: 'minVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 444000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '1.0',
        }),
        <Attribute.PROTOCOL_TYPE: 'protocolType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 444000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'helper_hotspot',
            'ble_ocf',
          ]),
        }),
        <Attribute.SUPPORTED_AUTH_TYPE: 'supportedAuthType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 444000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'OPEN',
            'WEP',
            'WPA-PSK',
            'WPA2-PSK',
            'SAE',
          ]),
        }),
        <Attribute.SUPPORTED_WI_FI_FREQ: 'supportedWiFiFreq'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 444000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            '2.4G',
          ]),
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 444000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 16, 38, 17, 28000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': 27,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>: dict({
        <Attribute.COOLING_SETPOINT: 'coolingSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 14, 7, 45, 643000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': 23,
        }),
        <Attribute.COOLING_SETPOINT_RANGE: 'coolingSetpointRange'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 5, 17, 41, 533000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': dict({
            'maximum': 30,
            'minimum': 16,
            'step': 1,
          }),
        }),
      }),
      <Capability.VERY_FINE_DUST_SENSOR: 'veryFineDustSensor'>: dict({
        <Attribute.VERY_FINE_DUST_LEVEL: 'veryFineDustLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[da_ks_microwave_0101x]
  dict({
    'hood': dict({
      <Capability.SAMSUNG_CE_HOOD_FAN_SPEED: 'samsungce.hoodFanSpeed'>: dict({
        <Attribute.HOOD_FAN_SPEED: 'hoodFanSpeed'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 0, 1, 7, 813000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
        <Attribute.SETTABLE_MAX_FAN_SPEED: 'settableMaxFanSpeed'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 0, 1, 6, 959000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 3,
        }),
        <Attribute.SETTABLE_MIN_FAN_SPEED: 'settableMinFanSpeed'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 0, 1, 6, 959000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
        <Attribute.SUPPORTED_HOOD_FAN_SPEED: 'supportedHoodFanSpeed'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 3, 23, 15, 59, 12, 796000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            0,
            1,
            2,
            3,
            4,
            5,
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_LAMP: 'samsungce.lamp'>: dict({
        <Attribute.BRIGHTNESS_LEVEL: 'brightnessLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 289000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
        <Attribute.SUPPORTED_BRIGHTNESS_LEVEL: 'supportedBrightnessLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 289000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'off',
            'low',
            'high',
          ]),
        }),
      }),
    }),
    'main': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 152000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'doorControl',
            'samsungce.hoodFanSpeed',
          ]),
        }),
      }),
      <Capability.DOOR_CONTROL: 'doorControl'>: dict({
        <Attribute.DOOR: 'door'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': dict({
            'href': '/temperatures/vs/0',
          }),
          'timestamp': datetime.datetime(2023, 7, 19, 5, 50, 12, 609000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'payload': dict({
              'if': list([
                'oic.if.baseline',
                'oic.if.a',
              ]),
              'rt': list([
                'x.com.samsung.da.temperatures',
              ]),
              'x.com.samsung.da.items': list([
                dict({
                  'x.com.samsung.da.current': '1',
                  'x.com.samsung.da.description': 'Temperature',
                  'x.com.samsung.da.desired': '0',
                  'x.com.samsung.da.id': '0',
                  'x.com.samsung.da.increment': '5',
                  'x.com.samsung.da.unit': 'Fahrenheit',
                }),
              ]),
            }),
          }),
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 3, 23, 15, 59, 12, 742000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2bad3237-4886-e699-1b90-4a51a3d55c8a',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 7, 3, 22, 0, 58, 832000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'res.1.1.0,sh.1.1.0',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 3, 23, 15, 59, 12, 742000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OCF_FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 7, 3, 6, 44, 54, 757000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'AKS-WW-TP2-20-MICROWAVE-OTR_40230125',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 3, 23, 15, 59, 12, 742000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'MediaTek',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 3, 23, 15, 59, 12, 742000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 3, 23, 15, 59, 12, 742000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 7, 3, 6, 44, 54, 757000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TP2X_DA-KS-MICROWAVE-0101X|40436241|50040100011411000200000000000000',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 7, 3, 6, 44, 54, 757000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TizenRT 2.0 + IPv6',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 7, 3, 6, 44, 54, 757000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DAWIT 3.0',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 3, 23, 15, 59, 12, 742000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 7, 3, 6, 44, 54, 757000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Microwave',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 3, 23, 15, 59, 12, 742000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2bad3237-4886-e699-1b90-4a51a3d55c8a',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 3, 23, 15, 59, 12, 742000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA-KS-MICROWAVE-0101X',
        }),
      }),
      <Capability.OVEN_MODE: 'ovenMode'>: dict({
        <Attribute.OVEN_MODE: 'ovenMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 289000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Others',
        }),
        <Attribute.SUPPORTED_OVEN_MODES: 'supportedOvenModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 21, 3, 790000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'Microwave',
            'ConvectionBake',
            'ConvectionRoast',
            'grill',
            'Others',
            'warming',
          ]),
        }),
      }),
      <Capability.OVEN_OPERATING_STATE: 'ovenOperatingState'>: dict({
        <Attribute.COMPLETION_TIME: 'completionTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 188000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2025-02-08T21:13:36.184Z',
        }),
        <Attribute.MACHINE_STATE: 'machineState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 188000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.OPERATION_TIME: 'operationTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 188000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
        <Attribute.OVEN_JOB_STATE: 'ovenJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 160000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 188000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 0,
        }),
        <Attribute.SUPPORTED_MACHINE_STATES: 'supportedMachineStates'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.OVEN_SETPOINT: 'ovenSetpoint'>: dict({
        <Attribute.OVEN_SETPOINT: 'ovenSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 0, 1, 9, 108000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
        <Attribute.OVEN_SETPOINT_RANGE: 'ovenSetpointRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>: dict({
        <Attribute.REMOTE_CONTROL_ENABLED: 'remoteControlEnabled'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 357000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'false',
        }),
      }),
      <Capability.SAMSUNG_CE_DEFINED_RECIPE: 'samsungce.definedRecipe'>: dict({
        <Attribute.DEFINED_RECIPE: 'definedRecipe'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 160000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'browingLevel': 0,
            'categoryId': 0,
            'cavityId': '0',
            'itemId': 0,
            'option': 0,
            'recipeType': '0',
            'servingSize': 0,
          }),
        }),
      }),
      <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>: dict({
        <Attribute.BINARY_ID: 'binaryId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 256000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TP2X_DA-KS-MICROWAVE-0101X',
        }),
        <Attribute.DESCRIPTION: 'description'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MICOM_ASSAY_CODE: 'micomAssayCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_CLASSIFICATION_CODE: 'modelClassificationCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_NAME: 'modelName'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RELEASE_YEAR: 'releaseYear'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER: 'serialNumber'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER_EXTRA: 'serialNumberExtra'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_DOOR_STATE: 'samsungce.doorState'>: dict({
        <Attribute.DOOR_STATE: 'doorState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 227000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'closed',
        }),
      }),
      <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>: dict({
        <Attribute.VERSION_NUMBER: 'versionNumber'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 7, 3, 9, 36, 13, 282000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 22120101,
        }),
      }),
      <Capability.SAMSUNG_CE_HOOD_FAN_SPEED: 'samsungce.hoodFanSpeed'>: dict({
        <Attribute.HOOD_FAN_SPEED: 'hoodFanSpeed'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 0, 1, 7, 813000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
        <Attribute.SETTABLE_MAX_FAN_SPEED: 'settableMaxFanSpeed'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 0, 1, 6, 959000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 3,
        }),
        <Attribute.SETTABLE_MIN_FAN_SPEED: 'settableMinFanSpeed'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 0, 1, 6, 959000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
        <Attribute.SUPPORTED_HOOD_FAN_SPEED: 'supportedHoodFanSpeed'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 3, 23, 15, 59, 12, 796000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            0,
            1,
            2,
            3,
            4,
            5,
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_KIDS_LOCK: 'samsungce.kidsLock'>: dict({
        <Attribute.LOCK_STATE: 'lockState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 152000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'unlocked',
        }),
      }),
      <Capability.SAMSUNG_CE_KITCHEN_DEVICE_DEFAULTS: 'samsungce.kitchenDeviceDefaults'>: dict({
        <Attribute.DEFAULT_OPERATION_TIME: 'defaultOperationTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 3, 23, 15, 59, 12, 609000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 30,
        }),
        <Attribute.DEFAULT_OVEN_MODE: 'defaultOvenMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 289000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'MicroWave',
        }),
        <Attribute.DEFAULT_OVEN_SETPOINT: 'defaultOvenSetpoint'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_KITCHEN_DEVICE_IDENTIFICATION: 'samsungce.kitchenDeviceIdentification'>: dict({
        <Attribute.FUEL: 'fuel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_CODE: 'modelCode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 289000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ME8000T-/AA0',
        }),
        <Attribute.REGION_CODE: 'regionCode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 289000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'US',
        }),
        <Attribute.REPRESENTATIVE_COMPONENT: 'representativeComponent'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TYPE: 'type'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 3, 23, 15, 59, 10, 971000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'microwave',
        }),
      }),
      <Capability.SAMSUNG_CE_KITCHEN_MODE_SPECIFICATION: 'samsungce.kitchenModeSpecification'>: dict({
        <Attribute.SPECIFICATION: 'specification'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 21, 3, 790000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'single': list([
              dict({
                'mode': 'MicroWave',
                'supportedOptions': dict({
                  'operationTime': dict({
                    'max': '01:40:00',
                  }),
                  'powerLevel': dict({
                    'default': '100%',
                    'supportedValues': list([
                      '0%',
                      '10%',
                      '20%',
                      '30%',
                      '40%',
                      '50%',
                      '60%',
                      '70%',
                      '80%',
                      '90%',
                      '100%',
                    ]),
                  }),
                }),
              }),
              dict({
                'mode': 'ConvectionBake',
                'supportedOptions': dict({
                  'operationTime': dict({
                    'max': '01:40:00',
                  }),
                  'temperature': dict({
                    'F': dict({
                      'default': 350,
                      'max': 425,
                      'min': 100,
                      'supportedValues': list([
                        100,
                        200,
                        225,
                        250,
                        275,
                        300,
                        325,
                        350,
                        375,
                        400,
                        425,
                      ]),
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'ConvectionRoast',
                'supportedOptions': dict({
                  'operationTime': dict({
                    'max': '01:40:00',
                  }),
                  'temperature': dict({
                    'F': dict({
                      'default': 325,
                      'max': 425,
                      'min': 200,
                      'supportedValues': list([
                        200,
                        225,
                        250,
                        275,
                        300,
                        325,
                        350,
                        375,
                        400,
                        425,
                      ]),
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'Grill',
                'supportedOptions': dict({
                  'operationTime': dict({
                    'max': '01:40:00',
                  }),
                  'temperature': dict({
                    'F': dict({
                      'default': 425,
                      'max': 425,
                      'min': 425,
                      'resolution': 5,
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'SpeedBake',
                'supportedOptions': dict({
                  'operationTime': dict({
                    'max': '01:40:00',
                  }),
                  'powerLevel': dict({
                    'default': '30%',
                    'supportedValues': list([
                      '10%',
                      '30%',
                      '50%',
                      '70%',
                    ]),
                  }),
                }),
              }),
              dict({
                'mode': 'SpeedRoast',
                'supportedOptions': dict({
                  'operationTime': dict({
                    'max': '01:40:00',
                  }),
                  'powerLevel': dict({
                    'default': '30%',
                    'supportedValues': list([
                      '10%',
                      '30%',
                      '50%',
                      '70%',
                    ]),
                  }),
                }),
              }),
              dict({
                'mode': 'KeepWarm',
                'supportedOptions': dict({
                  'operationTime': dict({
                    'max': '01:40:00',
                  }),
                  'temperature': dict({
                    'F': dict({
                      'default': 175,
                      'max': 175,
                      'min': 175,
                      'resolution': 5,
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'Autocook',
                'supportedOptions': dict({
                }),
              }),
              dict({
                'mode': 'Cookie',
                'supportedOptions': dict({
                  'operationTime': dict({
                    'max': '01:40:00',
                  }),
                  'temperature': dict({
                    'F': dict({
                      'default': 325,
                      'max': 325,
                      'min': 325,
                      'resolution': 5,
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'SteamClean',
                'supportedOptions': dict({
                  'operationTime': dict({
                    'max': '00:06:30',
                  }),
                }),
              }),
            ]),
          }),
        }),
      }),
      <Capability.SAMSUNG_CE_MICROWAVE_POWER: 'samsungce.microwavePower'>: dict({
        <Attribute.POWER_LEVEL: 'powerLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 160000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '0%',
        }),
        <Attribute.SUPPORTED_POWER_LEVELS: 'supportedPowerLevels'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 160000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            '0%',
            '10%',
            '20%',
            '30%',
            '40%',
            '50%',
            '60%',
            '70%',
            '80%',
            '90%',
            '100%',
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_OVEN_MODE: 'samsungce.ovenMode'>: dict({
        <Attribute.OVEN_MODE: 'ovenMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 289000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'NoOperation',
        }),
        <Attribute.SUPPORTED_OVEN_MODES: 'supportedOvenModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 21, 3, 790000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'MicroWave',
            'ConvectionBake',
            'ConvectionRoast',
            'Grill',
            'SpeedBake',
            'SpeedRoast',
            'KeepWarm',
            'Autocook',
            'Cookie',
            'SteamClean',
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_OVEN_OPERATING_STATE: 'samsungce.ovenOperatingState'>: dict({
        <Attribute.COMPLETION_TIME: 'completionTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 188000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2025-02-08T21:13:36.184Z',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 188000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.OPERATION_TIME: 'operationTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 188000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '00:00:00',
        }),
        <Attribute.OVEN_JOB_STATE: 'ovenJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 160000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 188000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>: dict({
        <Attribute.AVAILABLE_MODULES: 'availableModules'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 213000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
        <Attribute.LAST_UPDATED_DATE: 'lastUpdatedDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEW_VERSION_AVAILABLE: 'newVersionAvailable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 213000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OTN_D_U_I_D: 'otnDUID'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 256000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'U7CNQWBWSCD7C',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TARGET_MODULE: 'targetModule'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>: dict({
        <Attribute.DUMP_TYPE: 'dumpType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 256000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'file',
        }),
        <Attribute.ENDPOINT: 'endpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 256000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'SSM',
        }),
        <Attribute.LOG_TYPE: 'logType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 256000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'errCode',
            'dump',
          ]),
        }),
        <Attribute.MIN_VERSION: 'minVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 256000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '1.0',
        }),
        <Attribute.MN_ID: 'mnId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 256000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '0AJT',
        }),
        <Attribute.PROTOCOL_TYPE: 'protocolType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 256000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'wifi_https',
        }),
        <Attribute.SETUP_ID: 'setupId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 256000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '621',
        }),
        <Attribute.SIGNIN_PERMISSION: 'signinPermission'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TS_ID: 'tsId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 0, 11, 12, 10000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 0, 11, 15, 291000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 1,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[da_ks_range_0101x]
  dict({
    'cavity-01': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 9, 7, 22, 35, 34, 197000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.CUSTOM_OVEN_CAVITY_STATUS: 'custom.ovenCavityStatus'>: dict({
        <Attribute.OVEN_CAVITY_STATUS: 'ovenCavityStatus'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 3, 7, 46, 10, 165000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.OVEN_MODE: 'ovenMode'>: dict({
        <Attribute.OVEN_MODE: 'ovenMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 6, 983000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Others',
        }),
        <Attribute.SUPPORTED_OVEN_MODES: 'supportedOvenModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 8, 409000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'Others',
          ]),
        }),
      }),
      <Capability.OVEN_OPERATING_STATE: 'ovenOperatingState'>: dict({
        <Attribute.COMPLETION_TIME: 'completionTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 5, 14, 19, 0, 4, 584000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2024-05-14T19:00:04.579Z',
        }),
        <Attribute.MACHINE_STATE: 'machineState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 5, 415000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.OPERATION_TIME: 'operationTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 5, 415000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
        <Attribute.OVEN_JOB_STATE: 'ovenJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 5, 415000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 5, 415000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 1,
        }),
        <Attribute.SUPPORTED_MACHINE_STATES: 'supportedMachineStates'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.OVEN_SETPOINT: 'ovenSetpoint'>: dict({
        <Attribute.OVEN_SETPOINT: 'ovenSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 6, 976000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
        <Attribute.OVEN_SETPOINT_RANGE: 'ovenSetpointRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_KITCHEN_DEVICE_DEFAULTS: 'samsungce.kitchenDeviceDefaults'>: dict({
        <Attribute.DEFAULT_OPERATION_TIME: 'defaultOperationTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DEFAULT_OVEN_MODE: 'defaultOvenMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 6, 983000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ConvectionBake',
        }),
        <Attribute.DEFAULT_OVEN_SETPOINT: 'defaultOvenSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 6, 976000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 350,
        }),
      }),
      <Capability.SAMSUNG_CE_OVEN_MODE: 'samsungce.ovenMode'>: dict({
        <Attribute.OVEN_MODE: 'ovenMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 6, 983000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'NoOperation',
        }),
        <Attribute.SUPPORTED_OVEN_MODES: 'supportedOvenModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 8, 409000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'SelfClean',
            'SteamClean',
            'NoOperation',
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_OVEN_OPERATING_STATE: 'samsungce.ovenOperatingState'>: dict({
        <Attribute.COMPLETION_TIME: 'completionTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 5, 14, 19, 0, 4, 584000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2024-05-14T19:00:04.579Z',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 5, 415000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.OPERATION_TIME: 'operationTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 5, 415000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '00:00:00',
        }),
        <Attribute.OVEN_JOB_STATE: 'ovenJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 5, 415000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 5, 415000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 1,
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 6, 976000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 175,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
    'main': dict({
      <Capability.CUSTOM_COOKTOP_OPERATING_STATE: 'custom.cooktopOperatingState'>: dict({
        <Attribute.COOKTOP_OPERATING_STATE: 'cooktopOperatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 49, 976000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.SUPPORTED_COOKTOP_OPERATING_STATE: 'supportedCooktopOperatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 5, 293000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'run',
            'ready',
          ]),
        }),
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 7, 52, 875000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': dict({
            'href': '/information/vs/0',
          }),
          'timestamp': datetime.datetime(2023, 11, 28, 22, 49, 9, 333000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'payload': dict({
              'if': list([
                'oic.if.baseline',
                'oic.if.a',
              ]),
              'rt': list([
                'x.com.samsung.da.information',
              ]),
              'x.com.samsung.da.description': 'TP1X_DA-KS-OVEN-01011',
              'x.com.samsung.da.items': list([
                dict({
                  'x.com.samsung.da.description': 'Version',
                  'x.com.samsung.da.id': '0',
                  'x.com.samsung.da.newVersionAvailable': '0',
                  'x.com.samsung.da.number': '02144A221005',
                  'x.com.samsung.da.type': 'Software',
                }),
                dict({
                  'x.com.samsung.da.description': 'Version',
                  'x.com.samsung.da.id': '1',
                  'x.com.samsung.da.newVersionAvailable': '0',
                  'x.com.samsung.da.number': '20121600,FFFFFFFF',
                  'x.com.samsung.da.type': 'Firmware',
                }),
              ]),
              'x.com.samsung.da.modelNum': 'TP1X_DA-KS-RANGE-0101X|40445041|5001011E03151101020000000000000',
              'x.com.samsung.da.otnDUID': 'ZPCNQWBWXI53Q',
              'x.com.samsung.da.serialNum': '0J4D7DARB00000K',
            }),
          }),
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 2, 282000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2c3cbaa0-1899-5ddc-7b58-9d657bd48f18',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 12, 19, 22, 33, 9, 710000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '1.2.1',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 2, 282000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OCF_FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 5, 14, 19, 0, 26, 132000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'AKS-WW-TP1-20-OVEN-3-CR_40240205',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 5, 14, 19, 0, 26, 132000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Realtek',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 2, 282000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 2, 282000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 5, 14, 19, 0, 26, 132000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TP1X_DA-KS-RANGE-0101X|40445041|5001011E031511010200000000000000',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 5, 14, 19, 0, 26, 132000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TizenRT 3.1',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 5, 14, 19, 0, 26, 132000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DAWIT 3.0',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 2, 282000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 5, 14, 19, 0, 26, 132000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Range',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 2, 282000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2c3cbaa0-1899-5ddc-7b58-9d657bd48f18',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 2, 282000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA-KS-RANGE-0101X',
        }),
      }),
      <Capability.OVEN_MODE: 'ovenMode'>: dict({
        <Attribute.OVEN_MODE: 'ovenMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 7, 52, 875000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Others',
        }),
        <Attribute.SUPPORTED_OVEN_MODES: 'supportedOvenModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 3, 7, 46, 10, 165000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'Bake',
            'Broil',
            'ConvectionBake',
            'ConvectionRoast',
            'warming',
            'Others',
            'Dehydrate',
          ]),
        }),
      }),
      <Capability.OVEN_OPERATING_STATE: 'ovenOperatingState'>: dict({
        <Attribute.COMPLETION_TIME: 'completionTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 48, 830000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2025-02-07T00:50:48.803Z',
        }),
        <Attribute.MACHINE_STATE: 'machineState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 48, 830000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.OPERATION_TIME: 'operationTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 48, 830000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
        <Attribute.OVEN_JOB_STATE: 'ovenJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 49, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 48, 830000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 1,
        }),
        <Attribute.SUPPORTED_MACHINE_STATES: 'supportedMachineStates'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.OVEN_SETPOINT: 'ovenSetpoint'>: dict({
        <Attribute.OVEN_SETPOINT: 'ovenSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 48, 980000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
        <Attribute.OVEN_SETPOINT_RANGE: 'ovenSetpointRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>: dict({
        <Attribute.REMOTE_CONTROL_ENABLED: 'remoteControlEnabled'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 50, 886000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'true',
        }),
      }),
      <Capability.SAMSUNG_CE_CUSTOM_RECIPE: 'samsungce.customRecipe'>: dict({
      }),
      <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>: dict({
        <Attribute.BINARY_ID: 'binaryId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 3, 7, 46, 10, 124000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TP1X_DA-KS-RANGE-0101X',
        }),
        <Attribute.DESCRIPTION: 'description'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MICOM_ASSAY_CODE: 'micomAssayCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_CLASSIFICATION_CODE: 'modelClassificationCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_NAME: 'modelName'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RELEASE_YEAR: 'releaseYear'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER: 'serialNumber'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER_EXTRA: 'serialNumberExtra'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_DOOR_STATE: 'samsungce.doorState'>: dict({
        <Attribute.DOOR_STATE: 'doorState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 5, 24, 873000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'closed',
        }),
      }),
      <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>: dict({
        <Attribute.VERSION_NUMBER: 'versionNumber'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 11, 1, 21, 37, 51, 304000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 22100101,
        }),
      }),
      <Capability.SAMSUNG_CE_KIDS_LOCK: 'samsungce.kidsLock'>: dict({
        <Attribute.LOCK_STATE: 'lockState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 3, 7, 46, 10, 275000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'unlocked',
        }),
      }),
      <Capability.SAMSUNG_CE_KITCHEN_DEVICE_DEFAULTS: 'samsungce.kitchenDeviceDefaults'>: dict({
        <Attribute.DEFAULT_OPERATION_TIME: 'defaultOperationTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 48, 830000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 3600,
        }),
        <Attribute.DEFAULT_OVEN_MODE: 'defaultOvenMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 7, 52, 875000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ConvectionBake',
        }),
        <Attribute.DEFAULT_OVEN_SETPOINT: 'defaultOvenSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 48, 980000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 350,
        }),
      }),
      <Capability.SAMSUNG_CE_KITCHEN_DEVICE_IDENTIFICATION: 'samsungce.kitchenDeviceIdentification'>: dict({
        <Attribute.FUEL: 'fuel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_CODE: 'modelCode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 7, 52, 875000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'NE6516A-/AA0',
        }),
        <Attribute.REGION_CODE: 'regionCode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 7, 52, 875000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'US',
        }),
        <Attribute.REPRESENTATIVE_COMPONENT: 'representativeComponent'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TYPE: 'type'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 2, 487000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'range',
        }),
      }),
      <Capability.SAMSUNG_CE_KITCHEN_MODE_SPECIFICATION: 'samsungce.kitchenModeSpecification'>: dict({
        <Attribute.SPECIFICATION: 'specification'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 5, 14, 19, 0, 30, 62000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'single': list([
              dict({
                'mode': 'Bake',
                'supportedOperations': list([
                  'start',
                  'set',
                ]),
                'supportedOptions': dict({
                  'operationTime': dict({
                    'default': '01:00:00',
                    'max': '09:59:00',
                    'min': '00:01:00',
                    'resolution': '00:01:00',
                  }),
                  'temperature': dict({
                    'C': dict({
                      'default': 175,
                      'max': 285,
                      'min': 80,
                      'resolution': 0,
                    }),
                    'F': dict({
                      'default': 350,
                      'max': 550,
                      'min': 175,
                      'resolution': 0,
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'Broil',
                'supportedOperations': list([
                  'set',
                ]),
                'supportedOptions': dict({
                  'temperature': dict({
                    'C': dict({
                      'default': 61441,
                      'max': 61442,
                      'min': 61441,
                      'supportedValues': list([
                        61441,
                        61442,
                      ]),
                    }),
                    'F': dict({
                      'default': 61441,
                      'max': 61442,
                      'min': 61441,
                      'supportedValues': list([
                        61441,
                        61442,
                      ]),
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'ConvectionBake',
                'supportedOperations': list([
                  'start',
                  'set',
                ]),
                'supportedOptions': dict({
                  'operationTime': dict({
                    'default': '01:00:00',
                    'max': '09:59:00',
                    'min': '00:01:00',
                    'resolution': '00:01:00',
                  }),
                  'temperature': dict({
                    'C': dict({
                      'default': 160,
                      'max': 285,
                      'min': 80,
                      'resolution': 0,
                    }),
                    'F': dict({
                      'default': 325,
                      'max': 550,
                      'min': 175,
                      'resolution': 0,
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'ConvectionRoast',
                'supportedOperations': list([
                  'start',
                  'set',
                ]),
                'supportedOptions': dict({
                  'operationTime': dict({
                    'default': '01:00:00',
                    'max': '09:59:00',
                    'min': '00:01:00',
                    'resolution': '00:01:00',
                  }),
                  'temperature': dict({
                    'C': dict({
                      'default': 160,
                      'max': 285,
                      'min': 80,
                      'resolution': 0,
                    }),
                    'F': dict({
                      'default': 325,
                      'max': 550,
                      'min': 175,
                      'resolution': 0,
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'KeepWarm',
                'supportedOperations': list([
                  'set',
                ]),
                'supportedOptions': dict({
                  'temperature': dict({
                    'C': dict({
                      'default': 80,
                      'max': 80,
                      'min': 80,
                      'supportedValues': list([
                        80,
                      ]),
                    }),
                    'F': dict({
                      'default': 175,
                      'max': 175,
                      'min': 175,
                      'supportedValues': list([
                        175,
                      ]),
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'BreadProof',
                'supportedOperations': list([
                  'set',
                ]),
                'supportedOptions': dict({
                  'temperature': dict({
                    'C': dict({
                      'default': 35,
                      'max': 35,
                      'min': 35,
                      'supportedValues': list([
                        35,
                      ]),
                    }),
                    'F': dict({
                      'default': 95,
                      'max': 95,
                      'min': 95,
                      'supportedValues': list([
                        95,
                      ]),
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'AirFryer',
                'supportedOperations': list([
                  'start',
                  'set',
                ]),
                'supportedOptions': dict({
                  'operationTime': dict({
                    'default': '01:00:00',
                    'max': '09:59:00',
                    'min': '00:01:00',
                    'resolution': '00:01:00',
                  }),
                  'temperature': dict({
                    'C': dict({
                      'default': 220,
                      'max': 260,
                      'min': 175,
                      'resolution': 0,
                    }),
                    'F': dict({
                      'default': 425,
                      'max': 500,
                      'min': 350,
                      'resolution': 0,
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'Dehydrate',
                'supportedOperations': list([
                  'start',
                  'set',
                ]),
                'supportedOptions': dict({
                  'operationTime': dict({
                    'default': '01:00:00',
                    'max': '09:59:00',
                    'min': '00:01:00',
                    'resolution': '00:01:00',
                  }),
                  'temperature': dict({
                    'C': dict({
                      'default': 65,
                      'max': 105,
                      'min': 40,
                      'resolution': 0,
                    }),
                    'F': dict({
                      'default': 150,
                      'max': 225,
                      'min': 100,
                      'resolution': 0,
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'SelfClean',
                'supportedOperations': list([
                ]),
                'supportedOptions': dict({
                }),
              }),
              dict({
                'mode': 'SteamClean',
                'supportedOperations': list([
                ]),
                'supportedOptions': dict({
                }),
              }),
            ]),
          }),
        }),
      }),
      <Capability.SAMSUNG_CE_LAMP: 'samsungce.lamp'>: dict({
        <Attribute.BRIGHTNESS_LEVEL: 'brightnessLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 7, 52, 875000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
        <Attribute.SUPPORTED_BRIGHTNESS_LEVEL: 'supportedBrightnessLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 7, 52, 875000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'off',
            'high',
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_MEAT_PROBE: 'samsungce.meatProbe'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 2, 679000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'disconnected',
        }),
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 2, 619000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 0,
        }),
        <Attribute.TEMPERATURE_SETPOINT: 'temperatureSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 2, 619000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 0,
        }),
      }),
      <Capability.SAMSUNG_CE_OVEN_MODE: 'samsungce.ovenMode'>: dict({
        <Attribute.OVEN_MODE: 'ovenMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 7, 52, 875000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'NoOperation',
        }),
        <Attribute.SUPPORTED_OVEN_MODES: 'supportedOvenModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 3, 7, 46, 10, 165000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'Bake',
            'Broil',
            'ConvectionBake',
            'ConvectionRoast',
            'KeepWarm',
            'BreadProof',
            'AirFryer',
            'Dehydrate',
            'SelfClean',
            'SteamClean',
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_OVEN_OPERATING_STATE: 'samsungce.ovenOperatingState'>: dict({
        <Attribute.COMPLETION_TIME: 'completionTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 48, 830000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2025-02-07T00:50:48.803Z',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 48, 830000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.OPERATION_TIME: 'operationTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 48, 830000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '00:00:00',
        }),
        <Attribute.OVEN_JOB_STATE: 'ovenJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 49, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 48, 830000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 1,
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>: dict({
        <Attribute.AVAILABLE_MODULES: 'availableModules'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 3, 7, 46, 10, 124000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
        <Attribute.LAST_UPDATED_DATE: 'lastUpdatedDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEW_VERSION_AVAILABLE: 'newVersionAvailable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 3, 7, 46, 10, 124000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OTN_D_U_I_D: 'otnDUID'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 3, 7, 46, 10, 124000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ZPCNQWBWXI47Q',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TARGET_MODULE: 'targetModule'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 48, 980000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 175,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[da_ks_walloven_000003]
  dict({
    'cavity-01': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 9, 8, 5, 3, 53, 786000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.CUSTOM_OVEN_CAVITY_STATUS: 'custom.ovenCavityStatus'>: dict({
        <Attribute.OVEN_CAVITY_STATUS: 'ovenCavityStatus'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 44, 989000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'on',
        }),
      }),
      <Capability.OVEN_MODE: 'ovenMode'>: dict({
        <Attribute.OVEN_MODE: 'ovenMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 45, 821000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Others',
        }),
        <Attribute.SUPPORTED_OVEN_MODES: 'supportedOvenModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 28, 2, 59, 42, 83000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'Bake',
            'Others',
            'BottomHeat',
          ]),
        }),
      }),
      <Capability.OVEN_OPERATING_STATE: 'ovenOperatingState'>: dict({
        <Attribute.COMPLETION_TIME: 'completionTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 44, 903000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2025-02-07T19:04:44.900Z',
        }),
        <Attribute.MACHINE_STATE: 'machineState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 44, 903000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.OPERATION_TIME: 'operationTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 44, 903000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
        <Attribute.OVEN_JOB_STATE: 'ovenJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 45, 928000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 44, 903000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 0,
        }),
        <Attribute.SUPPORTED_MACHINE_STATES: 'supportedMachineStates'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 3, 2, 13, 12, 59, 472000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.OVEN_SETPOINT: 'ovenSetpoint'>: dict({
        <Attribute.OVEN_SETPOINT: 'ovenSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 46, 87000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
        <Attribute.OVEN_SETPOINT_RANGE: 'ovenSetpointRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_DEFINED_RECIPE: 'samsungce.definedRecipe'>: dict({
        <Attribute.DEFINED_RECIPE: 'definedRecipe'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 45, 928000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'browingLevel': 0,
            'categoryId': 0,
            'cavityId': '0',
            'itemId': 0,
            'option': 0,
            'recipeType': '0',
            'servingSize': 0,
          }),
        }),
      }),
      <Capability.SAMSUNG_CE_KITCHEN_DEVICE_DEFAULTS: 'samsungce.kitchenDeviceDefaults'>: dict({
        <Attribute.DEFAULT_OPERATION_TIME: 'defaultOperationTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DEFAULT_OVEN_MODE: 'defaultOvenMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 45, 821000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Convection',
        }),
        <Attribute.DEFAULT_OVEN_SETPOINT: 'defaultOvenSetpoint'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_OVEN_MODE: 'samsungce.ovenMode'>: dict({
        <Attribute.OVEN_MODE: 'ovenMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 45, 821000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'NoOperation',
        }),
        <Attribute.SUPPORTED_OVEN_MODES: 'supportedOvenModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 28, 2, 59, 42, 83000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'Convection',
            'BottomConvection',
            'Bottom',
            'EcoConvection',
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_OVEN_OPERATING_STATE: 'samsungce.ovenOperatingState'>: dict({
        <Attribute.COMPLETION_TIME: 'completionTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 44, 903000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2025-02-07T19:04:44.900Z',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 44, 903000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.OPERATION_TIME: 'operationTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 44, 903000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '00:00:00',
        }),
        <Attribute.OVEN_JOB_STATE: 'ovenJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 45, 928000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 44, 903000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 46, 87000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': 0,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
    'main': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 45, 634000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': dict({
            'href': '/rm/wifi/vs/0',
          }),
          'timestamp': datetime.datetime(2023, 7, 19, 0, 4, 40, 229000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'payload': dict({
              'if': list([
                'oic.if.baseline',
                'oic.if.s',
              ]),
              'rt': list([
                'x.com.samsung.da.rm.wifi',
              ]),
              'x.com.samsung.rm.rssi': list([
                -67,
              ]),
            }),
          }),
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2019, 9, 13, 5, 37, 11, 800000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'e3ffcb5a-294b-c68a-438d-9e27bb7660a0',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 5, 5, 15, 28, 37, 385000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '1.2.1',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2019, 9, 13, 5, 37, 11, 815000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 11, 4, 9, 51, 31, 711000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.OCF_FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 5, 5, 15, 28, 37, 385000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ARTIK051_GB_WO_003_40200913',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2019, 9, 13, 5, 37, 11, 731000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '1.0',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2019, 9, 13, 5, 37, 11, 762000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2019, 9, 13, 5, 37, 11, 770000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2019, 9, 13, 5, 37, 11, 755000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ARTIK051_GB_WO_003|40423141|50030018001211510200000000000000',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2019, 9, 13, 5, 37, 11, 740000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TizenRT2.0',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2019, 9, 13, 5, 37, 11, 748000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '0.1.0',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 11, 4, 7, 51, 23, 672000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2019, 9, 13, 5, 37, 11, 823000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[oven] Samsung',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2019, 9, 13, 5, 37, 11, 778000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'e3ffcb5a-294b-c68a-438d-9e27bb7660a0',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 11, 4, 4, 51, 10, 904000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2019, 9, 13, 5, 37, 11, 785000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA-KS-WALLOVEN-000003',
        }),
      }),
      <Capability.OVEN_MODE: 'ovenMode'>: dict({
        <Attribute.OVEN_MODE: 'ovenMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 45, 835000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Others',
        }),
        <Attribute.SUPPORTED_OVEN_MODES: 'supportedOvenModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 44, 989000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'Bake',
            'Broil',
            'Others',
          ]),
        }),
      }),
      <Capability.OVEN_OPERATING_STATE: 'ovenOperatingState'>: dict({
        <Attribute.COMPLETION_TIME: 'completionTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 44, 815000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2025-02-07T19:04:44.802Z',
        }),
        <Attribute.MACHINE_STATE: 'machineState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 44, 815000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.OPERATION_TIME: 'operationTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 44, 815000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
        <Attribute.OVEN_JOB_STATE: 'ovenJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 45, 910000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 44, 815000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 0,
        }),
        <Attribute.SUPPORTED_MACHINE_STATES: 'supportedMachineStates'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 11, 4, 3, 51, 1, 343000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.OVEN_SETPOINT: 'ovenSetpoint'>: dict({
        <Attribute.OVEN_SETPOINT: 'ovenSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 45, 954000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
        <Attribute.OVEN_SETPOINT_RANGE: 'ovenSetpointRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>: dict({
        <Attribute.REMOTE_CONTROL_ENABLED: 'remoteControlEnabled'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 46, 51000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'false',
        }),
      }),
      <Capability.SAMSUNG_CE_DEFINED_RECIPE: 'samsungce.definedRecipe'>: dict({
        <Attribute.DEFINED_RECIPE: 'definedRecipe'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 45, 910000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'browingLevel': 0,
            'categoryId': 0,
            'cavityId': '0',
            'itemId': 0,
            'option': 0,
            'recipeType': '0',
            'servingSize': 0,
          }),
        }),
      }),
      <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>: dict({
        <Attribute.BINARY_ID: 'binaryId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 45, 634000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ARTIK051_GB_WO_003',
        }),
        <Attribute.DESCRIPTION: 'description'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MICOM_ASSAY_CODE: 'micomAssayCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_CLASSIFICATION_CODE: 'modelClassificationCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_NAME: 'modelName'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RELEASE_YEAR: 'releaseYear'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER: 'serialNumber'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER_EXTRA: 'serialNumberExtra'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_DOOR_STATE: 'samsungce.doorState'>: dict({
        <Attribute.DOOR_STATE: 'doorState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 45, 445000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'closed',
        }),
      }),
      <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>: dict({
        <Attribute.VERSION_NUMBER: 'versionNumber'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 11, 1, 14, 15, 2, 215000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 22100101,
        }),
      }),
      <Capability.SAMSUNG_CE_KIDS_LOCK: 'samsungce.kidsLock'>: dict({
        <Attribute.LOCK_STATE: 'lockState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 45, 734000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'unlocked',
        }),
      }),
      <Capability.SAMSUNG_CE_KITCHEN_DEVICE_DEFAULTS: 'samsungce.kitchenDeviceDefaults'>: dict({
        <Attribute.DEFAULT_OPERATION_TIME: 'defaultOperationTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 44, 815000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 3600,
        }),
        <Attribute.DEFAULT_OVEN_MODE: 'defaultOvenMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 45, 835000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Convection',
        }),
        <Attribute.DEFAULT_OVEN_SETPOINT: 'defaultOvenSetpoint'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_KITCHEN_DEVICE_IDENTIFICATION: 'samsungce.kitchenDeviceIdentification'>: dict({
        <Attribute.FUEL: 'fuel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_CODE: 'modelCode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 45, 835000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'NE7000NP/EU0',
        }),
        <Attribute.REGION_CODE: 'regionCode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 45, 835000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'EU',
        }),
        <Attribute.REPRESENTATIVE_COMPONENT: 'representativeComponent'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TYPE: 'type'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 7, 14, 7, 25, 2, 969000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'oven',
        }),
      }),
      <Capability.SAMSUNG_CE_KITCHEN_MODE_SPECIFICATION: 'samsungce.kitchenModeSpecification'>: dict({
        <Attribute.SPECIFICATION: 'specification'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 28, 2, 59, 42, 83000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'lower': list([
              dict({
                'mode': 'Convection',
                'supportedOptions': dict({
                  'operationTime': dict({
                    'max': '09:59:59',
                  }),
                  'temperature': dict({
                    'C': dict({
                      'default': 160,
                      'max': 250,
                      'min': 40,
                      'resolution': 5,
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'BottomConvection',
                'supportedOptions': dict({
                  'operationTime': dict({
                    'max': '09:59:59',
                  }),
                  'temperature': dict({
                    'C': dict({
                      'default': 200,
                      'max': 250,
                      'min': 40,
                      'resolution': 5,
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'Bottom',
                'supportedOptions': dict({
                  'operationTime': dict({
                    'max': '09:59:59',
                  }),
                  'temperature': dict({
                    'C': dict({
                      'default': 150,
                      'max': 250,
                      'min': 40,
                      'resolution': 5,
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'EcoConvection',
                'supportedOptions': dict({
                  'operationTime': dict({
                    'max': '09:59:59',
                  }),
                  'temperature': dict({
                    'C': dict({
                      'default': 160,
                      'max': 250,
                      'min': 40,
                      'resolution': 5,
                    }),
                  }),
                }),
              }),
            ]),
            'single': list([
              dict({
                'mode': 'Convection',
                'supportedOptions': dict({
                  'operationTime': dict({
                    'max': '09:59:59',
                  }),
                  'temperature': dict({
                    'C': dict({
                      'default': 160,
                      'max': 250,
                      'min': 30,
                      'resolution': 5,
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'Conventional',
                'supportedOptions': dict({
                  'operationTime': dict({
                    'max': '09:59:59',
                  }),
                  'temperature': dict({
                    'C': dict({
                      'default': 180,
                      'max': 250,
                      'min': 30,
                      'resolution': 5,
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'LargeGrill',
                'supportedOptions': dict({
                  'operationTime': dict({
                    'max': '09:59:59',
                  }),
                  'temperature': dict({
                    'C': dict({
                      'default': 220,
                      'max': 270,
                      'min': 100,
                      'resolution': 5,
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'SmallGrill',
                'supportedOptions': dict({
                  'operationTime': dict({
                    'max': '09:59:59',
                  }),
                  'temperature': dict({
                    'C': dict({
                      'default': 220,
                      'max': 270,
                      'min': 100,
                      'resolution': 5,
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'TopHeatPluseConvection',
                'supportedOptions': dict({
                  'operationTime': dict({
                    'max': '09:59:59',
                  }),
                  'temperature': dict({
                    'C': dict({
                      'default': 180,
                      'max': 250,
                      'min': 40,
                      'resolution': 5,
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'BottomHeatPluseConvection',
                'supportedOptions': dict({
                  'operationTime': dict({
                    'max': '09:59:59',
                  }),
                  'temperature': dict({
                    'C': dict({
                      'default': 200,
                      'max': 250,
                      'min': 40,
                      'resolution': 5,
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'Bottom',
                'supportedOptions': dict({
                  'operationTime': dict({
                    'max': '09:59:59',
                  }),
                  'temperature': dict({
                    'C': dict({
                      'default': 150,
                      'max': 230,
                      'min': 100,
                      'resolution': 5,
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'ProRoasting',
                'supportedOptions': dict({
                  'operationTime': dict({
                    'max': '09:59:59',
                  }),
                  'temperature': dict({
                    'C': dict({
                      'default': 160,
                      'max': 200,
                      'min': 80,
                      'resolution': 5,
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'EcoConvection',
                'supportedOptions': dict({
                  'operationTime': dict({
                    'max': '09:59:59',
                  }),
                  'temperature': dict({
                    'C': dict({
                      'default': 160,
                      'max': 250,
                      'min': 30,
                      'resolution': 5,
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'KeepWarm',
                'supportedOptions': dict({
                  'operationTime': dict({
                    'max': '09:59:59',
                  }),
                  'temperature': dict({
                    'C': dict({
                      'default': 60,
                      'max': 100,
                      'min': 40,
                      'resolution': 5,
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'PlateWarm',
                'supportedOptions': dict({
                  'operationTime': dict({
                    'max': '09:59:59',
                  }),
                  'temperature': dict({
                    'C': dict({
                      'default': 50,
                      'max': 80,
                      'min': 30,
                      'resolution': 5,
                    }),
                  }),
                }),
              }),
            ]),
            'upper': list([
              dict({
                'mode': 'Convection',
                'supportedOptions': dict({
                  'operationTime': dict({
                    'max': '09:59:59',
                  }),
                  'temperature': dict({
                    'C': dict({
                      'default': 160,
                      'max': 250,
                      'min': 40,
                      'resolution': 5,
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'LargeGrill',
                'supportedOptions': dict({
                  'operationTime': dict({
                    'max': '09:59:59',
                  }),
                  'temperature': dict({
                    'C': dict({
                      'default': 220,
                      'max': 250,
                      'min': 40,
                      'resolution': 5,
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'TopConvection',
                'supportedOptions': dict({
                  'operationTime': dict({
                    'max': '09:59:59',
                  }),
                  'temperature': dict({
                    'C': dict({
                      'default': 180,
                      'max': 250,
                      'min': 40,
                      'resolution': 5,
                    }),
                  }),
                }),
              }),
            ]),
          }),
        }),
      }),
      <Capability.SAMSUNG_CE_LAMP: 'samsungce.lamp'>: dict({
        <Attribute.BRIGHTNESS_LEVEL: 'brightnessLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_BRIGHTNESS_LEVEL: 'supportedBrightnessLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_MEAT_PROBE: 'samsungce.meatProbe'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 45, 835000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'disconnected',
        }),
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 45, 954000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': 0,
        }),
        <Attribute.TEMPERATURE_SETPOINT: 'temperatureSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 45, 954000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': 0,
        }),
      }),
      <Capability.SAMSUNG_CE_OVEN_MODE: 'samsungce.ovenMode'>: dict({
        <Attribute.OVEN_MODE: 'ovenMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 45, 835000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'NoOperation',
        }),
        <Attribute.SUPPORTED_OVEN_MODES: 'supportedOvenModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 44, 989000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'Convection',
            'LargeGrill',
            'TopConvection',
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_OVEN_OPERATING_STATE: 'samsungce.ovenOperatingState'>: dict({
        <Attribute.COMPLETION_TIME: 'completionTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 44, 815000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2025-02-07T19:04:44.802Z',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 44, 815000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.OPERATION_TIME: 'operationTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 44, 815000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '00:00:00',
        }),
        <Attribute.OVEN_JOB_STATE: 'ovenJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 45, 910000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 44, 815000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>: dict({
        <Attribute.AVAILABLE_MODULES: 'availableModules'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 45, 634000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
        <Attribute.LAST_UPDATED_DATE: 'lastUpdatedDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEW_VERSION_AVAILABLE: 'newVersionAvailable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 45, 634000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OTN_D_U_I_D: 'otnDUID'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TARGET_MODULE: 'targetModule'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 19, 4, 45, 954000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': 0,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[da_ref_normal_000001]
  dict({
    'cooler': dict({
      <Capability.CONTACT_SENSOR: 'contactSensor'>: dict({
        <Attribute.CONTACT: 'contact'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 16, 26, 21, 425000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'closed',
        }),
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 12, 13, 55, 4, 8000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'custom.fridgeMode',
          ]),
        }),
      }),
      <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>: dict({
        <Attribute.FRIDGE_MODE: 'fridgeMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.FRIDGE_MODE_VALUE: 'fridgeModeValue'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_FRIDGE_MODES: 'supportedFridgeModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>: dict({
        <Attribute.MAXIMUM_SETPOINT: 'maximumSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 19, 21, 7, 55, 764000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 44,
        }),
        <Attribute.MINIMUM_SETPOINT: 'minimumSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 19, 21, 7, 55, 764000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 34,
        }),
      }),
      <Capability.SAMSUNG_CE_UNAVAILABLE_CAPABILITIES: 'samsungce.unavailableCapabilities'>: dict({
        <Attribute.UNAVAILABLE_COMMANDS: 'unavailableCommands'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 8, 4, 14, 59, 899000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 19, 21, 7, 55, 764000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 37,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>: dict({
        <Attribute.COOLING_SETPOINT: 'coolingSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 19, 21, 7, 55, 764000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 37,
        }),
        <Attribute.COOLING_SETPOINT_RANGE: 'coolingSetpointRange'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 19, 21, 7, 55, 764000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': dict({
            'maximum': 44,
            'minimum': 34,
            'step': 1,
          }),
        }),
      }),
    }),
    'cvroom': dict({
      <Capability.CONTACT_SENSOR: 'contactSensor'>: dict({
        <Attribute.CONTACT: 'contact'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 7, 11, 39, 42, 105000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'temperatureMeasurement',
            'thermostatCoolingSetpoint',
          ]),
        }),
      }),
      <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>: dict({
        <Attribute.FRIDGE_MODE: 'fridgeMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.FRIDGE_MODE_VALUE: 'fridgeModeValue'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_FRIDGE_MODES: 'supportedFridgeModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>: dict({
        <Attribute.COOLING_SETPOINT: 'coolingSetpoint'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.COOLING_SETPOINT_RANGE: 'coolingSetpointRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
    'freezer': dict({
      <Capability.CONTACT_SENSOR: 'contactSensor'>: dict({
        <Attribute.CONTACT: 'contact'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 14, 48, 16, 247000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'closed',
        }),
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 8, 1, 9, 17, 382000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'custom.fridgeMode',
            'samsungce.freezerConvertMode',
          ]),
        }),
      }),
      <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>: dict({
        <Attribute.FRIDGE_MODE: 'fridgeMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.FRIDGE_MODE_VALUE: 'fridgeModeValue'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_FRIDGE_MODES: 'supportedFridgeModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>: dict({
        <Attribute.MAXIMUM_SETPOINT: 'maximumSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 19, 21, 7, 55, 764000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 5,
        }),
        <Attribute.MINIMUM_SETPOINT: 'minimumSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 19, 21, 7, 55, 764000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': -8,
        }),
      }),
      <Capability.SAMSUNG_CE_FREEZER_CONVERT_MODE: 'samsungce.freezerConvertMode'>: dict({
        <Attribute.FREEZER_CONVERT_MODE: 'freezerConvertMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_FREEZER_CONVERT_MODES: 'supportedFreezerConvertModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_UNAVAILABLE_CAPABILITIES: 'samsungce.unavailableCapabilities'>: dict({
        <Attribute.UNAVAILABLE_COMMANDS: 'unavailableCommands'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 8, 4, 14, 59, 899000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 23, 4, 42, 18, 178000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 0,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>: dict({
        <Attribute.COOLING_SETPOINT: 'coolingSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 19, 21, 7, 55, 764000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 0,
        }),
        <Attribute.COOLING_SETPOINT_RANGE: 'coolingSetpointRange'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 19, 21, 7, 55, 764000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': dict({
            'maximum': 5,
            'minimum': -8,
            'step': 1,
          }),
        }),
      }),
    }),
    'icemaker': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 12, 13, 55, 4, 8000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 13, 55, 1, 720000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
    }),
    'icemaker-02': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 7, 11, 39, 42, 105000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
    'main': dict({
      <Capability.CONTACT_SENSOR: 'contactSensor'>: dict({
        <Attribute.CONTACT: 'contact'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 16, 26, 21, 425000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'closed',
        }),
      }),
      <Capability.CUSTOM_DEODOR_FILTER: 'custom.deodorFilter'>: dict({
        <Attribute.DEODOR_FILTER_CAPACITY: 'deodorFilterCapacity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DEODOR_FILTER_LAST_RESET_DATE: 'deodorFilterLastResetDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DEODOR_FILTER_RESET_TYPE: 'deodorFilterResetType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DEODOR_FILTER_STATUS: 'deodorFilterStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DEODOR_FILTER_USAGE: 'deodorFilterUsage'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DEODOR_FILTER_USAGE_STEP: 'deodorFilterUsageStep'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_DEVICE_REPORT_STATE_CONFIGURATION: 'custom.deviceReportStateConfiguration'>: dict({
        <Attribute.REPORT_STATE_PERIOD: 'reportStatePeriod'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 19, 21, 7, 55, 703000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'enabled',
        }),
        <Attribute.REPORT_STATE_REALTIME: 'reportStateRealtime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 19, 21, 7, 55, 703000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'state': 'disabled',
          }),
        }),
        <Attribute.REPORT_STATE_REALTIME_PERIOD: 'reportStateRealtimePeriod'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 13, 55, 1, 720000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'temperatureMeasurement',
            'thermostatCoolingSetpoint',
            'custom.fridgeMode',
            'custom.deodorFilter',
            'samsungce.dongleSoftwareInstallation',
            'samsungce.quickControl',
            'samsungce.deviceInfoPrivate',
            'demandResponseLoadControl',
            'samsungce.fridgeVacationMode',
            'sec.diagnosticsInformation',
          ]),
        }),
      }),
      <Capability.CUSTOM_DISABLED_COMPONENTS: 'custom.disabledComponents'>: dict({
        <Attribute.DISABLED_COMPONENTS: 'disabledComponents'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 8, 1, 9, 17, 382000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'icemaker-02',
            'pantry-01',
            'pantry-02',
            'cvroom',
            'onedoor',
          ]),
        }),
      }),
      <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>: dict({
        <Attribute.DR_MAX_DURATION: 'drMaxDuration'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 7, 11, 39, 47, 504000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 1440,
        }),
        <Attribute.ENERGY_SAVING_INFO: 'energySavingInfo'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_LEVEL: 'energySavingLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_OPERATION: 'energySavingOperation'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_OPERATION_SUPPORT: 'energySavingOperationSupport'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 7, 11, 39, 47, 504000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.ENERGY_SAVING_SUPPORT: 'energySavingSupport'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 7, 10, 47, 54, 524000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.ENERGY_TYPE: 'energyType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 7, 10, 47, 54, 524000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2.0',
        }),
        <Attribute.NOTIFICATION_TEMPLATE_I_D: 'notificationTemplateID'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_ENERGY_SAVING_LEVELS: 'supportedEnergySavingLevels'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>: dict({
        <Attribute.FRIDGE_MODE: 'fridgeMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.FRIDGE_MODE_VALUE: 'fridgeModeValue'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_FRIDGE_MODES: 'supportedFridgeModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_WATER_FILTER: 'custom.waterFilter'>: dict({
        <Attribute.WATER_FILTER_CAPACITY: 'waterFilterCapacity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WATER_FILTER_LAST_RESET_DATE: 'waterFilterLastResetDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WATER_FILTER_RESET_TYPE: 'waterFilterResetType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 19, 21, 7, 55, 758000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'replaceable',
          ]),
        }),
        <Attribute.WATER_FILTER_STATUS: 'waterFilterStatus'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 4, 2, 12, 910000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'replace',
        }),
        <Attribute.WATER_FILTER_USAGE: 'waterFilterUsage'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 4, 2, 12, 910000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 100,
        }),
        <Attribute.WATER_FILTER_USAGE_STEP: 'waterFilterUsageStep'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 19, 21, 7, 55, 758000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 1,
        }),
      }),
      <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>: dict({
        <Attribute.DEMAND_RESPONSE_LOAD_CONTROL_STATUS: 'drlcStatus'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 19, 21, 7, 55, 691000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'drlcLevel': 0,
            'drlcType': 1,
            'duration': 0,
            'override': False,
          }),
        }),
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': dict({
            'href': '/rm/micomdata/vs/0',
          }),
          'timestamp': datetime.datetime(2023, 7, 19, 5, 25, 39, 852000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'payload': dict({
              'if': list([
                'oic.if.baseline',
                'oic.if.a',
              ]),
              'rt': list([
                'x.com.samsung.da.rm.micomdata',
              ]),
              'x.com.samsung.rm.micomdata': 'D0C0022B00000000000DFE15051F5AA54400000000000000000000000000000000000000000000000001F04A00C5E0',
              'x.com.samsung.rm.micomdataLength': 94,
            }),
          }),
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 21, 22, 4, 22, 37000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '7db87911-7dce-1cf2-7119-b953432a2f09',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 21, 22, 4, 22, 37000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'res.1.1.0,sh.1.1.0',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 21, 22, 4, 22, 37000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OCF_FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 21, 22, 4, 22, 37000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'A-RFWW-TP2-21-COMMON_20220110',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 21, 22, 4, 22, 37000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'MediaTek',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 21, 22, 4, 22, 37000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 21, 22, 4, 22, 37000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 21, 22, 4, 22, 37000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TP2X_REF_20K|00115641|0004014D011411200103000020000000',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 21, 22, 4, 22, 37000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TizenRT 1.0 + IPv6',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 21, 22, 4, 22, 37000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DAWIT 2.0',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 21, 22, 4, 22, 37000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 21, 22, 4, 22, 37000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[refrigerator] Samsung',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 21, 22, 4, 22, 37000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '7db87911-7dce-1cf2-7119-b953432a2f09',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 21, 22, 4, 22, 37000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA-REF-NORMAL-000001',
        }),
      }),
      <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>: dict({
        <Attribute.POWER_CONSUMPTION: 'powerConsumption'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 49, 0, 507000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'deltaEnergy': 7,
            'end': '2025-02-09T17:49:00Z',
            'energy': 1568087,
            'energySaved': 0,
            'persistedEnergy': 0,
            'power': 6,
            'powerEnergy': 13.555977778169844,
            'start': '2025-02-09T17:38:01Z',
          }),
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.REFRIGERATION: 'refrigeration'>: dict({
        <Attribute.DEFROST: 'defrost'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 19, 21, 7, 55, 772000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
        <Attribute.RAPID_COOLING: 'rapidCooling'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 19, 21, 7, 55, 725000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
        <Attribute.RAPID_FREEZING: 'rapidFreezing'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 19, 21, 7, 55, 725000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>: dict({
        <Attribute.BINARY_ID: 'binaryId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 13, 55, 1, 720000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TP2X_REF_20K',
        }),
        <Attribute.DESCRIPTION: 'description'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MICOM_ASSAY_CODE: 'micomAssayCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_CLASSIFICATION_CODE: 'modelClassificationCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_NAME: 'modelName'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RELEASE_YEAR: 'releaseYear'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 8, 1, 9, 17, 382000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 20,
        }),
        <Attribute.SERIAL_NUMBER: 'serialNumber'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER_EXTRA: 'serialNumberExtra'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_DONGLE_SOFTWARE_INSTALLATION: 'samsungce.dongleSoftwareInstallation'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 7, 10, 47, 54, 524000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'completed',
        }),
      }),
      <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>: dict({
        <Attribute.VERSION_NUMBER: 'versionNumber'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 8, 4, 14, 59, 25000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 24100101,
        }),
      }),
      <Capability.SAMSUNG_CE_FRIDGE_VACATION_MODE: 'samsungce.fridgeVacationMode'>: dict({
        <Attribute.VACATION_MODE: 'vacationMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_POWER_COOL: 'samsungce.powerCool'>: dict({
        <Attribute.ACTIVATED: 'activated'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 19, 21, 7, 55, 725000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
      }),
      <Capability.SAMSUNG_CE_POWER_FREEZE: 'samsungce.powerFreeze'>: dict({
        <Attribute.ACTIVATED: 'activated'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 19, 21, 7, 55, 725000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
      }),
      <Capability.SAMSUNG_CE_QUICK_CONTROL: 'samsungce.quickControl'>: dict({
        <Attribute.VERSION: 'version'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_SABBATH_MODE: 'samsungce.sabbathMode'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 19, 21, 7, 55, 799000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
        <Attribute.SUPPORTED_ACTIONS: 'supportedActions'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 19, 21, 7, 55, 799000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'on',
            'off',
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>: dict({
        <Attribute.AVAILABLE_MODULES: 'availableModules'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 19, 21, 7, 55, 744000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
        <Attribute.LAST_UPDATED_DATE: 'lastUpdatedDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEW_VERSION_AVAILABLE: 'newVersionAvailable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 19, 21, 7, 55, 725000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OTN_D_U_I_D: 'otnDUID'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 19, 21, 7, 55, 744000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'P7CNQWBWM3XBW',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TARGET_MODULE: 'targetModule'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 19, 21, 7, 55, 725000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
          }),
        }),
      }),
      <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>: dict({
        <Attribute.DUMP_TYPE: 'dumpType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENDPOINT: 'endpoint'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LOG_TYPE: 'logType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MIN_VERSION: 'minVersion'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MN_ID: 'mnId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.PROTOCOL_TYPE: 'protocolType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SETUP_ID: 'setupId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SIGNIN_PERMISSION: 'signinPermission'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TS_ID: 'tsId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>: dict({
        <Attribute.COOLING_SETPOINT: 'coolingSetpoint'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.COOLING_SETPOINT_RANGE: 'coolingSetpointRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
    'onedoor': dict({
      <Capability.CONTACT_SENSOR: 'contactSensor'>: dict({
        <Attribute.CONTACT: 'contact'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 12, 8, 23, 59, 944000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'samsungce.freezerConvertMode',
            'custom.fridgeMode',
          ]),
        }),
      }),
      <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>: dict({
        <Attribute.FRIDGE_MODE: 'fridgeMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.FRIDGE_MODE_VALUE: 'fridgeModeValue'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_FRIDGE_MODES: 'supportedFridgeModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>: dict({
        <Attribute.MAXIMUM_SETPOINT: 'maximumSetpoint'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MINIMUM_SETPOINT: 'minimumSetpoint'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_FREEZER_CONVERT_MODE: 'samsungce.freezerConvertMode'>: dict({
        <Attribute.FREEZER_CONVERT_MODE: 'freezerConvertMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_FREEZER_CONVERT_MODES: 'supportedFreezerConvertModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_UNAVAILABLE_CAPABILITIES: 'samsungce.unavailableCapabilities'>: dict({
        <Attribute.UNAVAILABLE_COMMANDS: 'unavailableCommands'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 8, 4, 14, 59, 899000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>: dict({
        <Attribute.COOLING_SETPOINT: 'coolingSetpoint'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.COOLING_SETPOINT_RANGE: 'coolingSetpointRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
    'pantry-01': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 7, 10, 47, 54, 524000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_FRIDGE_PANTRY_INFO: 'samsungce.fridgePantryInfo'>: dict({
        <Attribute.NAME: 'name'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_FRIDGE_PANTRY_MODE: 'samsungce.fridgePantryMode'>: dict({
        <Attribute.MODE: 'mode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_MODES: 'supportedModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
    'pantry-02': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 7, 10, 47, 54, 524000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_FRIDGE_PANTRY_INFO: 'samsungce.fridgePantryInfo'>: dict({
        <Attribute.NAME: 'name'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_FRIDGE_PANTRY_MODE: 'samsungce.fridgePantryMode'>: dict({
        <Attribute.MODE: 'mode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_MODES: 'supportedModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[da_ref_normal_01001]
  dict({
    'camera-01': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 12, 17, 11, 19, 18, 845000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'switch',
          ]),
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
    'cooler': dict({
      <Capability.CONTACT_SENSOR: 'contactSensor'>: dict({
        <Attribute.CONTACT: 'contact'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 0, 23, 41, 655000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'closed',
        }),
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 6, 17, 6, 16, 33, 918000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>: dict({
        <Attribute.MAXIMUM_SETPOINT: 'maximumSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 493000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 44,
        }),
        <Attribute.MINIMUM_SETPOINT: 'minimumSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 493000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 34,
        }),
      }),
      <Capability.SAMSUNG_CE_UNAVAILABLE_CAPABILITIES: 'samsungce.unavailableCapabilities'>: dict({
        <Attribute.UNAVAILABLE_COMMANDS: 'unavailableCommands'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 6, 12, 35, 50, 411000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 493000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 37,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>: dict({
        <Attribute.COOLING_SETPOINT: 'coolingSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 493000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 37,
        }),
        <Attribute.COOLING_SETPOINT_RANGE: 'coolingSetpointRange'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 493000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': dict({
            'maximum': 44,
            'minimum': 34,
            'step': 1,
          }),
        }),
      }),
    }),
    'cvroom': dict({
      <Capability.CONTACT_SENSOR: 'contactSensor'>: dict({
        <Attribute.CONTACT: 'contact'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 23, 22, 4, 631000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'closed',
        }),
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 7, 27, 1, 19, 43, 145000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>: dict({
        <Attribute.FRIDGE_MODE: 'fridgeMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 448000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'CV_FDR_DELI',
        }),
        <Attribute.FRIDGE_MODE_VALUE: 'fridgeModeValue'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_FRIDGE_MODES: 'supportedFridgeModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 448000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'CV_FDR_WINE',
            'CV_FDR_DELI',
            'CV_FDR_BEVERAGE',
            'CV_FDR_MEAT',
          ]),
        }),
      }),
    }),
    'freezer': dict({
      <Capability.CONTACT_SENSOR: 'contactSensor'>: dict({
        <Attribute.CONTACT: 'contact'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 0, 0, 44, 267000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'closed',
        }),
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 6, 9, 0, 29, 743000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'samsungce.freezerConvertMode',
          ]),
        }),
      }),
      <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>: dict({
        <Attribute.MAXIMUM_SETPOINT: 'maximumSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 493000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 5,
        }),
        <Attribute.MINIMUM_SETPOINT: 'minimumSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 493000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': -8,
        }),
      }),
      <Capability.SAMSUNG_CE_FREEZER_CONVERT_MODE: 'samsungce.freezerConvertMode'>: dict({
        <Attribute.FREEZER_CONVERT_MODE: 'freezerConvertMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_FREEZER_CONVERT_MODES: 'supportedFreezerConvertModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 448000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_UNAVAILABLE_CAPABILITIES: 'samsungce.unavailableCapabilities'>: dict({
        <Attribute.UNAVAILABLE_COMMANDS: 'unavailableCommands'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 6, 12, 35, 50, 411000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 493000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 0,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>: dict({
        <Attribute.COOLING_SETPOINT: 'coolingSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 493000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 0,
        }),
        <Attribute.COOLING_SETPOINT_RANGE: 'coolingSetpointRange'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 493000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': dict({
            'maximum': 5,
            'minimum': -8,
            'step': 1,
          }),
        }),
      }),
    }),
    'icemaker': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 7, 10, 54, 5, 580000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 12, 1, 52, 528000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'on',
        }),
      }),
    }),
    'icemaker-02': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 7, 28, 18, 47, 7, 39000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
    'icemaker-03': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 12, 15, 1, 5, 9, 803000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
    'main': dict({
      <Capability.CONTACT_SENSOR: 'contactSensor'>: dict({
        <Attribute.CONTACT: 'contact'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 0, 23, 41, 655000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'closed',
        }),
      }),
      <Capability.CUSTOM_DEVICE_REPORT_STATE_CONFIGURATION: 'custom.deviceReportStateConfiguration'>: dict({
        <Attribute.REPORT_STATE_PERIOD: 'reportStatePeriod'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 345000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'enabled',
        }),
        <Attribute.REPORT_STATE_REALTIME: 'reportStateRealtime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 345000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'state': 'disabled',
          }),
        }),
        <Attribute.REPORT_STATE_REALTIME_PERIOD: 'reportStateRealtimePeriod'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 23, 57, 45, 739000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'thermostatCoolingSetpoint',
            'temperatureMeasurement',
            'custom.fridgeMode',
            'custom.deviceReportStateConfiguration',
            'samsungce.fridgeFoodList',
            'samsungce.runestoneHomeContext',
            'demandResponseLoadControl',
            'samsungce.fridgeVacationMode',
            'samsungce.sabbathMode',
          ]),
        }),
      }),
      <Capability.CUSTOM_DISABLED_COMPONENTS: 'custom.disabledComponents'>: dict({
        <Attribute.DISABLED_COMPONENTS: 'disabledComponents'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 12, 1, 52, 638000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'icemaker-02',
            'icemaker-03',
            'pantry-01',
            'camera-01',
            'scale-10',
            'scale-11',
          ]),
        }),
      }),
      <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>: dict({
        <Attribute.DR_MAX_DURATION: 'drMaxDuration'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 7, 11, 50, 40, 228000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 1440,
        }),
        <Attribute.ENERGY_SAVING_INFO: 'energySavingInfo'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_LEVEL: 'energySavingLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_OPERATION: 'energySavingOperation'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_OPERATION_SUPPORT: 'energySavingOperationSupport'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 7, 11, 50, 40, 228000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.ENERGY_SAVING_SUPPORT: 'energySavingSupport'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 7, 10, 57, 35, 490000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.ENERGY_TYPE: 'energyType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 7, 10, 54, 5, 580000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2.0',
        }),
        <Attribute.NOTIFICATION_TEMPLATE_I_D: 'notificationTemplateID'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_ENERGY_SAVING_LEVELS: 'supportedEnergySavingLevels'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>: dict({
        <Attribute.FRIDGE_MODE: 'fridgeMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.FRIDGE_MODE_VALUE: 'fridgeModeValue'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_FRIDGE_MODES: 'supportedFridgeModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_WATER_FILTER: 'custom.waterFilter'>: dict({
        <Attribute.WATER_FILTER_CAPACITY: 'waterFilterCapacity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WATER_FILTER_LAST_RESET_DATE: 'waterFilterLastResetDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WATER_FILTER_RESET_TYPE: 'waterFilterResetType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 38, 59, 973000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'replaceable',
          ]),
        }),
        <Attribute.WATER_FILTER_STATUS: 'waterFilterStatus'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 38, 59, 973000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'normal',
        }),
        <Attribute.WATER_FILTER_USAGE: 'waterFilterUsage'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 5, 6, 45, 769000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 52,
        }),
        <Attribute.WATER_FILTER_USAGE_STEP: 'waterFilterUsageStep'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 38, 59, 973000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 1,
        }),
      }),
      <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>: dict({
        <Attribute.DEMAND_RESPONSE_LOAD_CONTROL_STATUS: 'drlcStatus'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 38, 59, 899000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'drlcLevel': 0,
            'drlcType': 1,
            'duration': 0,
            'override': False,
          }),
        }),
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': dict({
            'href': '/refrigeration/vs/0',
          }),
          'timestamp': datetime.datetime(2024, 3, 26, 9, 6, 17, 169000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'payload': dict({
              'if': list([
                'oic.if.a',
              ]),
              'rt': list([
                'x.com.samsung.da.fridge',
              ]),
              'x.com.samsung.da.rapidFreezing': 'Off',
              'x.com.samsung.da.rapidFridge': 'Off',
            }),
          }),
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 2, 12, 37, 43, 756000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '7d3feb98-8a36-4351-c362-5e21ad3a78dd',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 2, 12, 37, 43, 756000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'res.1.1.0,sh.1.1.0',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 2, 12, 37, 43, 756000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 2, 12, 37, 43, 756000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.OCF_FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 2, 12, 37, 43, 756000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '20240616.213423',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 2, 12, 37, 43, 756000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 2, 12, 37, 43, 756000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 2, 12, 37, 43, 756000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 2, 12, 37, 43, 756000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '24K_REF_LCD_FHUB9.0|00113141|0002034e051324200103000000000000',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 2, 12, 37, 43, 756000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Tizen',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 2, 12, 37, 43, 756000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '7.0',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 2, 12, 37, 43, 756000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 2, 12, 37, 43, 756000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Family Hub',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 2, 12, 37, 43, 756000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '7d3feb98-8a36-4351-c362-5e21ad3a78dd',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 2, 12, 37, 43, 756000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2024-11-08T11:56:59Z',
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 2, 12, 37, 43, 756000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA-REF-NORMAL-01001',
        }),
      }),
      <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>: dict({
        <Attribute.POWER_CONSUMPTION: 'powerConsumption'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 0, 25, 23, 843000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'deltaEnergy': 27,
            'end': '2025-02-09T00:25:23Z',
            'energy': 4381422,
            'energySaved': 0,
            'persistedEnergy': 0,
            'power': 144,
            'powerEnergy': 27.01890500307083,
            'start': '2025-02-09T00:13:39Z',
          }),
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.REFRIGERATION: 'refrigeration'>: dict({
        <Attribute.DEFROST: 'defrost'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 38, 59, 276000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
        <Attribute.RAPID_COOLING: 'rapidCooling'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 497000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
        <Attribute.RAPID_FREEZING: 'rapidFreezing'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 497000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>: dict({
        <Attribute.BINARY_ID: 'binaryId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 12, 1, 53, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '24K_REF_LCD_FHUB9.0',
        }),
        <Attribute.DESCRIPTION: 'description'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MICOM_ASSAY_CODE: 'micomAssayCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_CLASSIFICATION_CODE: 'modelClassificationCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_NAME: 'modelName'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RELEASE_YEAR: 'releaseYear'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 6, 9, 0, 29, 743000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 19,
        }),
        <Attribute.SERIAL_NUMBER: 'serialNumber'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER_EXTRA: 'serialNumberExtra'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>: dict({
        <Attribute.VERSION_NUMBER: 'versionNumber'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 6, 9, 0, 29, 743000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 24090102,
        }),
      }),
      <Capability.SAMSUNG_CE_FRIDGE_FOOD_LIST: 'samsungce.fridgeFoodList'>: dict({
        <Attribute.OUT_OF_SYNC_CHANGES: 'outOfSyncChanges'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REFRESH_RESULT: 'refreshResult'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_FRIDGE_VACATION_MODE: 'samsungce.fridgeVacationMode'>: dict({
        <Attribute.VACATION_MODE: 'vacationMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_POWER_COOL: 'samsungce.powerCool'>: dict({
        <Attribute.ACTIVATED: 'activated'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 497000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
      }),
      <Capability.SAMSUNG_CE_POWER_FREEZE: 'samsungce.powerFreeze'>: dict({
        <Attribute.ACTIVATED: 'activated'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 497000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
      }),
      <Capability.SAMSUNG_CE_QUICK_CONTROL: 'samsungce.quickControl'>: dict({
        <Attribute.VERSION: 'version'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 1, 848000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '1.0',
        }),
      }),
      <Capability.SAMSUNG_CE_RUNESTONE_HOME_CONTEXT: 'samsungce.runestoneHomeContext'>: dict({
        <Attribute.SUPPORTED_CONTEXTS: 'supportedContexts'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 2, 150000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'context': 'HOME_IN',
              'endTime': '99:99',
              'place': 'HOME',
              'startTime': '99:99',
            }),
            dict({
              'context': 'ASLEEP',
              'endTime': '99:99',
              'place': 'HOME',
              'startTime': '99:99',
            }),
            dict({
              'context': 'AWAKE',
              'endTime': '99:99',
              'place': 'HOME',
              'startTime': '99:99',
            }),
            dict({
              'context': 'COOKING',
              'endTime': '99:99',
              'place': 'HOME',
              'startTime': '99:99',
            }),
            dict({
              'context': 'FINISH_COOKING',
              'endTime': '99:99',
              'place': 'HOME',
              'startTime': '99:99',
            }),
            dict({
              'context': 'EATING',
              'endTime': '99:99',
              'place': 'HOME',
              'startTime': '99:99',
            }),
            dict({
              'context': 'FINISH_EATING',
              'endTime': '99:99',
              'place': 'HOME',
              'startTime': '99:99',
            }),
            dict({
              'context': 'DOING_LAUNDRY',
              'endTime': '99:99',
              'place': 'HOME',
              'startTime': '99:99',
            }),
            dict({
              'context': 'FINISH_DOING_LAUNDRY',
              'endTime': '99:99',
              'place': 'HOME',
              'startTime': '99:99',
            }),
            dict({
              'context': 'CLEANING_HOUSE',
              'endTime': '99:99',
              'place': 'HOME',
              'startTime': '99:99',
            }),
            dict({
              'context': 'FINISH_CLEANING_HOUSE',
              'endTime': '99:99',
              'place': 'HOME',
              'startTime': '99:99',
            }),
            dict({
              'context': 'MUSIC_LISTENING',
              'endTime': '99:99',
              'place': 'HOME',
              'startTime': '99:99',
            }),
            dict({
              'context': 'FINISH_MUSIC_LISTENING',
              'endTime': '99:99',
              'place': 'HOME',
              'startTime': '99:99',
            }),
            dict({
              'context': 'AIR_CONDITIONING',
              'endTime': '99:99',
              'place': 'HOME',
              'startTime': '99:99',
            }),
            dict({
              'context': 'FINISH_AIR_CONDITIONING',
              'endTime': '99:99',
              'place': 'HOME',
              'startTime': '99:99',
            }),
            dict({
              'context': 'WASHING_DISHES',
              'endTime': '99:99',
              'place': 'HOME',
              'startTime': '99:99',
            }),
            dict({
              'context': 'FINISH_WASHING_DISHES',
              'endTime': '99:99',
              'place': 'HOME',
              'startTime': '99:99',
            }),
            dict({
              'context': 'CARING_CLOTHING',
              'endTime': '99:99',
              'place': 'HOME',
              'startTime': '99:99',
            }),
            dict({
              'context': 'FINISH_CARING_CLOTHING',
              'endTime': '99:99',
              'place': 'HOME',
              'startTime': '99:99',
            }),
            dict({
              'context': 'WATCHING_TV',
              'endTime': '99:99',
              'place': 'HOME',
              'startTime': '99:99',
            }),
            dict({
              'context': 'FINISH_WATCHING_TV',
              'endTime': '99:99',
              'place': 'HOME',
              'startTime': '99:99',
            }),
            dict({
              'context': 'BEFORE_BEDTIME',
              'endTime': '99:99',
              'place': 'HOME',
              'startTime': '99:99',
            }),
            dict({
              'context': 'BEFORE_COOKING',
              'endTime': '99:99',
              'place': 'HOME',
              'startTime': '99:99',
            }),
            dict({
              'context': 'BEFORE_HOME_OUT',
              'endTime': '99:99',
              'place': 'HOME',
              'startTime': '99:99',
            }),
            dict({
              'context': 'ORDERING_DELIVERY_FOOD',
              'endTime': '99:99',
              'place': 'HOME',
              'startTime': '99:99',
            }),
            dict({
              'context': 'FINISH_ORDERING_DELIVERY_FOOD',
              'endTime': '99:99',
              'place': 'HOME',
              'startTime': '99:99',
            }),
            dict({
              'context': 'ONLINE_GROCERY_SHOPPING',
              'endTime': '99:99',
              'place': 'HOME',
              'startTime': '99:99',
            }),
            dict({
              'context': 'FINISH_ONLINE_GROCERY_SHOPPING',
              'endTime': '99:99',
              'place': 'HOME',
              'startTime': '99:99',
            }),
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_SABBATH_MODE: 'samsungce.sabbathMode'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_ACTIONS: 'supportedActions'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>: dict({
        <Attribute.AVAILABLE_MODULES: 'availableModules'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 523000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
        <Attribute.LAST_UPDATED_DATE: 'lastUpdatedDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEW_VERSION_AVAILABLE: 'newVersionAvailable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 200000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OTN_D_U_I_D: 'otnDUID'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 523000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2DCEZFTFQZPMO',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TARGET_MODULE: 'targetModule'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 200000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
          }),
        }),
      }),
      <Capability.SAMSUNG_CE_VIEW_INSIDE: 'samsungce.viewInside'>: dict({
        <Attribute.CONTENTS: 'contents'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 20, 16, 7, 5, 423000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'expiredTime': '2025-01-20T16:17:04Z',
              'fileId': 'd3e1f875-f8b3-a031-737b-366eaa227773',
              'focusArea': 'mainShelves',
              'mimeType': 'image/jpeg',
            }),
            dict({
              'expiredTime': '2025-01-20T16:17:04Z',
              'fileId': '9fccb6b4-e71f-6c7f-9935-f6082bb6ccfe',
              'focusArea': 'mainShelves',
              'mimeType': 'image/jpeg',
            }),
            dict({
              'expiredTime': '2025-01-20T16:17:05Z',
              'fileId': '20b57a4d-b7fc-17fc-3a03-0fb84fb4efab',
              'focusArea': 'mainShelves',
              'mimeType': 'image/jpeg',
            }),
          ]),
        }),
        <Attribute.LAST_UPDATED_TIME: 'lastUpdatedTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 12, 1, 52, 585000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2025-02-07T12:01:52Z',
        }),
        <Attribute.SUPPORTED_FOCUS_AREAS: 'supportedFocusAreas'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 946000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'mainShelves',
          ]),
        }),
      }),
      <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>: dict({
        <Attribute.DUMP_TYPE: 'dumpType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 523000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'file',
        }),
        <Attribute.ENDPOINT: 'endpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 523000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'SSM',
        }),
        <Attribute.LOG_TYPE: 'logType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 523000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'errCode',
            'dump',
          ]),
        }),
        <Attribute.MIN_VERSION: 'minVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 523000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '1.0',
        }),
        <Attribute.MN_ID: 'mnId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 523000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '0AJT',
        }),
        <Attribute.PROTOCOL_TYPE: 'protocolType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 523000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'wifi_https',
        }),
        <Attribute.SETUP_ID: 'setupId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 523000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '500',
        }),
        <Attribute.SIGNIN_PERMISSION: 'signinPermission'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TS_ID: 'tsId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>: dict({
        <Attribute.AUTO_RECONNECTION: 'autoReconnection'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 1, 951000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
        <Attribute.MIN_VERSION: 'minVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 1, 951000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '1.0',
        }),
        <Attribute.PROTOCOL_TYPE: 'protocolType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 1, 951000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'helper_hotspot',
          ]),
        }),
        <Attribute.SUPPORTED_AUTH_TYPE: 'supportedAuthType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 1, 951000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'OPEN',
            'WEP',
            'WPA-PSK',
            'WPA2-PSK',
          ]),
        }),
        <Attribute.SUPPORTED_WI_FI_FREQ: 'supportedWiFiFreq'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 1, 951000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            '2.4G',
            '5G',
          ]),
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>: dict({
        <Attribute.COOLING_SETPOINT: 'coolingSetpoint'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.COOLING_SETPOINT_RANGE: 'coolingSetpointRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
    'pantry-01': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 7, 10, 54, 5, 580000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'samsungce.meatAging',
            'samsungce.foodDefrost',
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_FOOD_DEFROST: 'samsungce.foodDefrost'>: dict({
        <Attribute.FOOD_TYPE: 'foodType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OPERATION_TIME: 'operationTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REMAINING_TIME: 'remainingTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_OPTIONS: 'supportedOptions'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WEIGHT: 'weight'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_FRIDGE_PANTRY_INFO: 'samsungce.fridgePantryInfo'>: dict({
        <Attribute.NAME: 'name'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_FRIDGE_PANTRY_MODE: 'samsungce.fridgePantryMode'>: dict({
        <Attribute.MODE: 'mode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_MODES: 'supportedModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_MEAT_AGING: 'samsungce.meatAging'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_AGING_METHODS: 'supportedAgingMethods'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_MEAT_TYPES: 'supportedMeatTypes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ZONE_INFO: 'zoneInfo'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
    'scale-10': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 7, 10, 54, 5, 580000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_CONNECTION_STATE: 'samsungce.connectionState'>: dict({
        <Attribute.CONNECTION_STATE: 'connectionState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_SCALE_SETTINGS: 'samsungce.scaleSettings'>: dict({
        <Attribute.ENABLED: 'enabled'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WEIGHT_MEASUREMENT: 'samsungce.weightMeasurement'>: dict({
        <Attribute.WEIGHT: 'weight'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WEIGHT_MEASUREMENT_CALIBRATION: 'samsungce.weightMeasurementCalibration'>: dict({
      }),
    }),
    'scale-11': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 7, 10, 54, 5, 580000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_WEIGHT_MEASUREMENT: 'samsungce.weightMeasurement'>: dict({
        <Attribute.WEIGHT: 'weight'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[da_ref_normal_01011]
  dict({
    'cooler': dict({
      <Capability.CONTACT_SENSOR: 'contactSensor'>: dict({
        <Attribute.CONTACT: 'contact'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 9, 18, 48, 798000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'closed',
        }),
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 51, 343000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'custom.fridgeMode',
            'samsungce.temperatureSetting',
          ]),
        }),
      }),
      <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>: dict({
        <Attribute.FRIDGE_MODE: 'fridgeMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.FRIDGE_MODE_VALUE: 'fridgeModeValue'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_FRIDGE_MODES: 'supportedFridgeModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>: dict({
        <Attribute.MAXIMUM_SETPOINT: 'maximumSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 62000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': 7,
        }),
        <Attribute.MINIMUM_SETPOINT: 'minimumSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 62000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': 1,
        }),
      }),
      <Capability.SAMSUNG_CE_TEMPERATURE_SETTING: 'samsungce.temperatureSetting'>: dict({
        <Attribute.DESIRED_TEMPERATURE: 'desiredTemperature'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_DESIRED_TEMPERATURES: 'supportedDesiredTemperatures'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_UNAVAILABLE_CAPABILITIES: 'samsungce.unavailableCapabilities'>: dict({
        <Attribute.UNAVAILABLE_COMMANDS: 'unavailableCommands'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 62000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': 4,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>: dict({
        <Attribute.COOLING_SETPOINT: 'coolingSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 62000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': 4,
        }),
        <Attribute.COOLING_SETPOINT_RANGE: 'coolingSetpointRange'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 62000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': dict({
            'maximum': 7,
            'minimum': 1,
            'step': 1,
          }),
        }),
      }),
    }),
    'cvroom': dict({
      <Capability.CONTACT_SENSOR: 'contactSensor'>: dict({
        <Attribute.CONTACT: 'contact'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>: dict({
        <Attribute.FRIDGE_MODE: 'fridgeMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.FRIDGE_MODE_VALUE: 'fridgeModeValue'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_FRIDGE_MODES: 'supportedFridgeModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>: dict({
        <Attribute.COOLING_SETPOINT: 'coolingSetpoint'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.COOLING_SETPOINT_RANGE: 'coolingSetpointRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
    'freezer': dict({
      <Capability.CONTACT_SENSOR: 'contactSensor'>: dict({
        <Attribute.CONTACT: 'contact'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 8, 45, 49, 322000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'closed',
        }),
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 51, 343000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'custom.fridgeMode',
            'samsungce.temperatureSetting',
            'samsungce.freezerConvertMode',
          ]),
        }),
      }),
      <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>: dict({
        <Attribute.FRIDGE_MODE: 'fridgeMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.FRIDGE_MODE_VALUE: 'fridgeModeValue'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_FRIDGE_MODES: 'supportedFridgeModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>: dict({
        <Attribute.MAXIMUM_SETPOINT: 'maximumSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': -15,
        }),
        <Attribute.MINIMUM_SETPOINT: 'minimumSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': -23,
        }),
      }),
      <Capability.SAMSUNG_CE_FREEZER_CONVERT_MODE: 'samsungce.freezerConvertMode'>: dict({
        <Attribute.FREEZER_CONVERT_MODE: 'freezerConvertMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_FREEZER_CONVERT_MODES: 'supportedFreezerConvertModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_TEMPERATURE_SETTING: 'samsungce.temperatureSetting'>: dict({
        <Attribute.DESIRED_TEMPERATURE: 'desiredTemperature'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_DESIRED_TEMPERATURES: 'supportedDesiredTemperatures'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_UNAVAILABLE_CAPABILITIES: 'samsungce.unavailableCapabilities'>: dict({
        <Attribute.UNAVAILABLE_COMMANDS: 'unavailableCommands'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': -18,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>: dict({
        <Attribute.COOLING_SETPOINT: 'coolingSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': -18,
        }),
        <Attribute.COOLING_SETPOINT_RANGE: 'coolingSetpointRange'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': dict({
            'maximum': -15,
            'minimum': -23,
            'step': 1,
          }),
        }),
      }),
    }),
    'icemaker': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 7, 25, 45, 714000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'on',
        }),
      }),
    }),
    'icemaker-02': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
    'icemaker-03': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
    'main': dict({
      <Capability.CONTACT_SENSOR: 'contactSensor'>: dict({
        <Attribute.CONTACT: 'contact'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 9, 18, 48, 798000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'closed',
        }),
      }),
      <Capability.CUSTOM_DEODOR_FILTER: 'custom.deodorFilter'>: dict({
        <Attribute.DEODOR_FILTER_CAPACITY: 'deodorFilterCapacity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DEODOR_FILTER_LAST_RESET_DATE: 'deodorFilterLastResetDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DEODOR_FILTER_RESET_TYPE: 'deodorFilterResetType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DEODOR_FILTER_STATUS: 'deodorFilterStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DEODOR_FILTER_USAGE: 'deodorFilterUsage'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DEODOR_FILTER_USAGE_STEP: 'deodorFilterUsageStep'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_DEVICE_REPORT_STATE_CONFIGURATION: 'custom.deviceReportStateConfiguration'>: dict({
        <Attribute.REPORT_STATE_PERIOD: 'reportStatePeriod'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'enabled',
        }),
        <Attribute.REPORT_STATE_REALTIME: 'reportStateRealtime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'state': 'disabled',
          }),
        }),
        <Attribute.REPORT_STATE_REALTIME_PERIOD: 'reportStateRealtimePeriod'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 51, 343000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'temperatureMeasurement',
            'thermostatCoolingSetpoint',
            'custom.fridgeMode',
            'custom.deodorFilter',
            'custom.dustFilter',
            'samsungce.viewInside',
            'samsungce.fridgeWelcomeLighting',
            'samsungce.sabbathMode',
          ]),
        }),
      }),
      <Capability.CUSTOM_DISABLED_COMPONENTS: 'custom.disabledComponents'>: dict({
        <Attribute.DISABLED_COMPONENTS: 'disabledComponents'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'icemaker-02',
            'icemaker-03',
            'pantry-01',
            'pantry-02',
            'scale-10',
            'scale-11',
            'cvroom',
            'onedoor',
          ]),
        }),
      }),
      <Capability.CUSTOM_DUST_FILTER: 'custom.dustFilter'>: dict({
        <Attribute.DUST_FILTER_CAPACITY: 'dustFilterCapacity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DUST_FILTER_LAST_RESET_DATE: 'dustFilterLastResetDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DUST_FILTER_RESET_TYPE: 'dustFilterResetType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DUST_FILTER_STATUS: 'dustFilterStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DUST_FILTER_USAGE: 'dustFilterUsage'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DUST_FILTER_USAGE_STEP: 'dustFilterUsageStep'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>: dict({
        <Attribute.DR_MAX_DURATION: 'drMaxDuration'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 49, 679000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 99999999,
        }),
        <Attribute.ENERGY_SAVING_INFO: 'energySavingInfo'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_LEVEL: 'energySavingLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 1,
        }),
        <Attribute.ENERGY_SAVING_OPERATION: 'energySavingOperation'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.ENERGY_SAVING_OPERATION_SUPPORT: 'energySavingOperationSupport'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
        <Attribute.ENERGY_SAVING_SUPPORT: 'energySavingSupport'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
        <Attribute.ENERGY_TYPE: 'energyType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2.0',
        }),
        <Attribute.NOTIFICATION_TEMPLATE_I_D: 'notificationTemplateID'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_ENERGY_SAVING_LEVELS: 'supportedEnergySavingLevels'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            1,
            2,
          ]),
        }),
      }),
      <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>: dict({
        <Attribute.FRIDGE_MODE: 'fridgeMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.FRIDGE_MODE_VALUE: 'fridgeModeValue'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_FRIDGE_MODES: 'supportedFridgeModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_WATER_FILTER: 'custom.waterFilter'>: dict({
        <Attribute.WATER_FILTER_CAPACITY: 'waterFilterCapacity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WATER_FILTER_LAST_RESET_DATE: 'waterFilterLastResetDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WATER_FILTER_RESET_TYPE: 'waterFilterResetType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'replaceable',
          ]),
        }),
        <Attribute.WATER_FILTER_STATUS: 'waterFilterStatus'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'normal',
        }),
        <Attribute.WATER_FILTER_USAGE: 'waterFilterUsage'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 10, 14, 16, 505000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 5,
        }),
        <Attribute.WATER_FILTER_USAGE_STEP: 'waterFilterUsageStep'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 1,
        }),
      }),
      <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>: dict({
        <Attribute.DEMAND_RESPONSE_LOAD_CONTROL_STATUS: 'drlcStatus'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'drlcLevel': 0,
            'drlcType': 1,
            'duration': 0,
            'override': False,
          }),
        }),
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 920000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'aafdee8c-4ede-2ed7-9d29-d596b84d65aa',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 920000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'res.1.1.0,sh.1.1.0',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 920000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OCF_FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 920000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'A-RFWW-TP1-24-T4-COM_20240908',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 920000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Realtek',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 920000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 920000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 920000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TP1X_REF_21K|00175041|00040141041811304104000020010000',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 920000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TizenRT 4.0',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 920000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'SYSTEM 2.0',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 920000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 920000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung-Refrigerator',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 920000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'aafdee8c-4ede-2ed7-9d29-d596b84d65aa',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 920000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA-REF-NORMAL-01011',
        }),
      }),
      <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>: dict({
        <Attribute.POWER_CONSUMPTION: 'powerConsumption'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 11, 32, 26, 61000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'deltaEnergy': 7,
            'end': '2025-02-10T11:32:26Z',
            'energy': 12123,
            'energySaved': 0,
            'persistedEnergy': 0,
            'persistedSavedEnergy': 0,
            'power': 3,
            'powerEnergy': 7.828951666355133,
            'start': '2025-02-10T11:21:15Z',
          }),
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.REFRIGERATION: 'refrigeration'>: dict({
        <Attribute.DEFROST: 'defrost'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RAPID_COOLING: 'rapidCooling'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
        <Attribute.RAPID_FREEZING: 'rapidFreezing'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>: dict({
        <Attribute.BINARY_ID: 'binaryId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 19, 35, 11, 422000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TP1X_REF_21K',
        }),
        <Attribute.DESCRIPTION: 'description'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MICOM_ASSAY_CODE: 'micomAssayCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_CLASSIFICATION_CODE: 'modelClassificationCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_NAME: 'modelName'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RELEASE_YEAR: 'releaseYear'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER: 'serialNumber'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER_EXTRA: 'serialNumberExtra'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>: dict({
        <Attribute.VERSION_NUMBER: 'versionNumber'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 24090102,
        }),
      }),
      <Capability.SAMSUNG_CE_FRIDGE_VACATION_MODE: 'samsungce.fridgeVacationMode'>: dict({
        <Attribute.VACATION_MODE: 'vacationMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.SAMSUNG_CE_FRIDGE_WELCOME_LIGHTING: 'samsungce.fridgeWelcomeLighting'>: dict({
        <Attribute.DETECTION_PROXIMITY: 'detectionProximity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_DETECTION_PROXIMITIES: 'supportedDetectionProximities'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_POWER_COOL: 'samsungce.powerCool'>: dict({
        <Attribute.ACTIVATED: 'activated'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
      }),
      <Capability.SAMSUNG_CE_POWER_FREEZE: 'samsungce.powerFreeze'>: dict({
        <Attribute.ACTIVATED: 'activated'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
      }),
      <Capability.SAMSUNG_CE_QUICK_CONTROL: 'samsungce.quickControl'>: dict({
        <Attribute.VERSION: 'version'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 62000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '1.0',
        }),
      }),
      <Capability.SAMSUNG_CE_SABBATH_MODE: 'samsungce.sabbathMode'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_ACTIONS: 'supportedActions'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_SELF_CHECK: 'samsungce.selfCheck'>: dict({
        <Attribute.ERRORS: 'errors'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RESULT: 'result'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'passed',
        }),
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.SUPPORTED_ACTIONS: 'supportedActions'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'start',
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>: dict({
        <Attribute.AVAILABLE_MODULES: 'availableModules'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
        <Attribute.LAST_UPDATED_DATE: 'lastUpdatedDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEW_VERSION_AVAILABLE: 'newVersionAvailable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 49, 502000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
        <Attribute.OTN_D_U_I_D: 'otnDUID'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'RLCFUCFW3Q724',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 49, 502000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 0,
        }),
        <Attribute.TARGET_MODULE: 'targetModule'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 49, 502000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
          }),
        }),
      }),
      <Capability.SAMSUNG_CE_VIEW_INSIDE: 'samsungce.viewInside'>: dict({
        <Attribute.CONTENTS: 'contents'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_UPDATED_TIME: 'lastUpdatedTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_FOCUS_AREAS: 'supportedFocusAreas'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>: dict({
        <Attribute.DUMP_TYPE: 'dumpType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'file',
        }),
        <Attribute.ENDPOINT: 'endpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'SSM',
        }),
        <Attribute.LOG_TYPE: 'logType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'errCode',
            'dump',
          ]),
        }),
        <Attribute.MIN_VERSION: 'minVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '3.0',
        }),
        <Attribute.MN_ID: 'mnId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '0AJT',
        }),
        <Attribute.PROTOCOL_TYPE: 'protocolType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ble_ocf',
        }),
        <Attribute.SETUP_ID: 'setupId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'RA2',
        }),
        <Attribute.SIGNIN_PERMISSION: 'signinPermission'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TS_ID: 'tsId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA01',
        }),
      }),
      <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>: dict({
        <Attribute.AUTO_RECONNECTION: 'autoReconnection'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 62000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
        <Attribute.MIN_VERSION: 'minVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 62000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '1.0',
        }),
        <Attribute.PROTOCOL_TYPE: 'protocolType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 62000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'helper_hotspot',
            'ble_ocf',
          ]),
        }),
        <Attribute.SUPPORTED_AUTH_TYPE: 'supportedAuthType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 62000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'OPEN',
            'WEP',
            'WPA-PSK',
            'WPA2-PSK',
            'SAE',
          ]),
        }),
        <Attribute.SUPPORTED_WI_FI_FREQ: 'supportedWiFiFreq'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 62000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            '2.4G',
          ]),
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>: dict({
        <Attribute.COOLING_SETPOINT: 'coolingSetpoint'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.COOLING_SETPOINT_RANGE: 'coolingSetpointRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
    'onedoor': dict({
      <Capability.CONTACT_SENSOR: 'contactSensor'>: dict({
        <Attribute.CONTACT: 'contact'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 49, 569000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'samsungce.freezerConvertMode',
            'custom.fridgeMode',
          ]),
        }),
      }),
      <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>: dict({
        <Attribute.FRIDGE_MODE: 'fridgeMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.FRIDGE_MODE_VALUE: 'fridgeModeValue'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_FRIDGE_MODES: 'supportedFridgeModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>: dict({
        <Attribute.MAXIMUM_SETPOINT: 'maximumSetpoint'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MINIMUM_SETPOINT: 'minimumSetpoint'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_FREEZER_CONVERT_MODE: 'samsungce.freezerConvertMode'>: dict({
        <Attribute.FREEZER_CONVERT_MODE: 'freezerConvertMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_FREEZER_CONVERT_MODES: 'supportedFreezerConvertModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_TEMPERATURE_SETTING: 'samsungce.temperatureSetting'>: dict({
        <Attribute.DESIRED_TEMPERATURE: 'desiredTemperature'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_DESIRED_TEMPERATURES: 'supportedDesiredTemperatures'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_UNAVAILABLE_CAPABILITIES: 'samsungce.unavailableCapabilities'>: dict({
        <Attribute.UNAVAILABLE_COMMANDS: 'unavailableCommands'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 13, 55, 47, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>: dict({
        <Attribute.COOLING_SETPOINT: 'coolingSetpoint'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.COOLING_SETPOINT_RANGE: 'coolingSetpointRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
    'pantry-01': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_FOOD_DEFROST: 'samsungce.foodDefrost'>: dict({
        <Attribute.FOOD_TYPE: 'foodType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OPERATION_TIME: 'operationTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REMAINING_TIME: 'remainingTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_OPTIONS: 'supportedOptions'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WEIGHT: 'weight'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_FRIDGE_PANTRY_INFO: 'samsungce.fridgePantryInfo'>: dict({
        <Attribute.NAME: 'name'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_FRIDGE_PANTRY_MODE: 'samsungce.fridgePantryMode'>: dict({
        <Attribute.MODE: 'mode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_MODES: 'supportedModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_MEAT_AGING: 'samsungce.meatAging'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_AGING_METHODS: 'supportedAgingMethods'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_MEAT_TYPES: 'supportedMeatTypes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ZONE_INFO: 'zoneInfo'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
    'pantry-02': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_FOOD_DEFROST: 'samsungce.foodDefrost'>: dict({
        <Attribute.FOOD_TYPE: 'foodType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OPERATION_TIME: 'operationTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REMAINING_TIME: 'remainingTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_OPTIONS: 'supportedOptions'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WEIGHT: 'weight'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_FRIDGE_PANTRY_INFO: 'samsungce.fridgePantryInfo'>: dict({
        <Attribute.NAME: 'name'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_FRIDGE_PANTRY_MODE: 'samsungce.fridgePantryMode'>: dict({
        <Attribute.MODE: 'mode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_MODES: 'supportedModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_MEAT_AGING: 'samsungce.meatAging'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_AGING_METHODS: 'supportedAgingMethods'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_MEAT_TYPES: 'supportedMeatTypes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ZONE_INFO: 'zoneInfo'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
    'scale-10': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_CONNECTION_STATE: 'samsungce.connectionState'>: dict({
        <Attribute.CONNECTION_STATE: 'connectionState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WEIGHT_MEASUREMENT: 'samsungce.weightMeasurement'>: dict({
        <Attribute.WEIGHT: 'weight'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WEIGHT_MEASUREMENT_CALIBRATION: 'samsungce.weightMeasurementCalibration'>: dict({
      }),
    }),
    'scale-11': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WEIGHT_MEASUREMENT: 'samsungce.weightMeasurement'>: dict({
        <Attribute.WEIGHT: 'weight'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[da_ref_normal_01011_1]
  dict({
    'cooler': dict({
      <Capability.CONTACT_SENSOR: 'contactSensor'>: dict({
        <Attribute.CONTACT: 'contact'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 19, 15, 11, 911000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'closed',
        }),
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 5, 26, 9, 29, 5, 144000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'custom.fridgeMode',
            'samsungce.temperatureSetting',
          ]),
        }),
      }),
      <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>: dict({
        <Attribute.FRIDGE_MODE: 'fridgeMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.FRIDGE_MODE_VALUE: 'fridgeModeValue'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_FRIDGE_MODES: 'supportedFridgeModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>: dict({
        <Attribute.MAXIMUM_SETPOINT: 'maximumSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 41, 80000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': 7,
        }),
        <Attribute.MINIMUM_SETPOINT: 'minimumSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 41, 80000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': 1,
        }),
      }),
      <Capability.SAMSUNG_CE_TEMPERATURE_SETTING: 'samsungce.temperatureSetting'>: dict({
        <Attribute.DESIRED_TEMPERATURE: 'desiredTemperature'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_DESIRED_TEMPERATURES: 'supportedDesiredTemperatures'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_UNAVAILABLE_CAPABILITIES: 'samsungce.unavailableCapabilities'>: dict({
        <Attribute.UNAVAILABLE_COMMANDS: 'unavailableCommands'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 8, 3, 20, 51, 831000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 41, 80000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': 4,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>: dict({
        <Attribute.COOLING_SETPOINT: 'coolingSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 41, 80000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': 4,
        }),
        <Attribute.COOLING_SETPOINT_RANGE: 'coolingSetpointRange'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 41, 80000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': dict({
            'maximum': 7,
            'minimum': 1,
            'step': 1,
          }),
        }),
      }),
    }),
    'cvroom': dict({
      <Capability.CONTACT_SENSOR: 'contactSensor'>: dict({
        <Attribute.CONTACT: 'contact'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>: dict({
        <Attribute.FRIDGE_MODE: 'fridgeMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.FRIDGE_MODE_VALUE: 'fridgeModeValue'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_FRIDGE_MODES: 'supportedFridgeModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>: dict({
        <Attribute.COOLING_SETPOINT: 'coolingSetpoint'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.COOLING_SETPOINT_RANGE: 'coolingSetpointRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
    'freezer': dict({
      <Capability.CONTACT_SENSOR: 'contactSensor'>: dict({
        <Attribute.CONTACT: 'contact'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 5, 26, 9, 29, 2, 882000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'closed',
        }),
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 8, 3, 20, 51, 831000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'custom.fridgeMode',
            'samsungce.temperatureSetting',
            'samsungce.freezerConvertMode',
          ]),
        }),
      }),
      <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>: dict({
        <Attribute.FRIDGE_MODE: 'fridgeMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.FRIDGE_MODE_VALUE: 'fridgeModeValue'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_FRIDGE_MODES: 'supportedFridgeModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>: dict({
        <Attribute.MAXIMUM_SETPOINT: 'maximumSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 41, 80000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': -15,
        }),
        <Attribute.MINIMUM_SETPOINT: 'minimumSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 41, 80000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': -23,
        }),
      }),
      <Capability.SAMSUNG_CE_FREEZER_CONVERT_MODE: 'samsungce.freezerConvertMode'>: dict({
        <Attribute.FREEZER_CONVERT_MODE: 'freezerConvertMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_FREEZER_CONVERT_MODES: 'supportedFreezerConvertModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_TEMPERATURE_SETTING: 'samsungce.temperatureSetting'>: dict({
        <Attribute.DESIRED_TEMPERATURE: 'desiredTemperature'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_DESIRED_TEMPERATURES: 'supportedDesiredTemperatures'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_UNAVAILABLE_CAPABILITIES: 'samsungce.unavailableCapabilities'>: dict({
        <Attribute.UNAVAILABLE_COMMANDS: 'unavailableCommands'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 8, 3, 20, 51, 831000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 41, 80000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': -19,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>: dict({
        <Attribute.COOLING_SETPOINT: 'coolingSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 41, 80000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': -19,
        }),
        <Attribute.COOLING_SETPOINT_RANGE: 'coolingSetpointRange'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 41, 80000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': dict({
            'maximum': -15,
            'minimum': -23,
            'step': 1,
          }),
        }),
      }),
    }),
    'icemaker': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
    'icemaker-02': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
    'icemaker-03': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
    'main': dict({
      <Capability.CONTACT_SENSOR: 'contactSensor'>: dict({
        <Attribute.CONTACT: 'contact'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 19, 15, 11, 911000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'closed',
        }),
      }),
      <Capability.CUSTOM_DEODOR_FILTER: 'custom.deodorFilter'>: dict({
        <Attribute.DEODOR_FILTER_CAPACITY: 'deodorFilterCapacity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DEODOR_FILTER_LAST_RESET_DATE: 'deodorFilterLastResetDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DEODOR_FILTER_RESET_TYPE: 'deodorFilterResetType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DEODOR_FILTER_STATUS: 'deodorFilterStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DEODOR_FILTER_USAGE: 'deodorFilterUsage'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DEODOR_FILTER_USAGE_STEP: 'deodorFilterUsageStep'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_DEVICE_REPORT_STATE_CONFIGURATION: 'custom.deviceReportStateConfiguration'>: dict({
        <Attribute.REPORT_STATE_PERIOD: 'reportStatePeriod'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 40, 961000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'enabled',
        }),
        <Attribute.REPORT_STATE_REALTIME: 'reportStateRealtime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 40, 961000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'state': 'disabled',
          }),
        }),
        <Attribute.REPORT_STATE_REALTIME_PERIOD: 'reportStateRealtimePeriod'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 8, 22, 20, 12, 270000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'temperatureMeasurement',
            'thermostatCoolingSetpoint',
            'custom.fridgeMode',
            'custom.deodorFilter',
            'custom.waterFilter',
            'custom.dustFilter',
            'samsungce.viewInside',
            'samsungce.fridgeWelcomeLighting',
            'samsungce.quickControl',
            'samsungce.deviceInfoPrivate',
            'samsungce.sabbathMode',
          ]),
        }),
      }),
      <Capability.CUSTOM_DISABLED_COMPONENTS: 'custom.disabledComponents'>: dict({
        <Attribute.DISABLED_COMPONENTS: 'disabledComponents'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 8, 3, 20, 51, 831000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'icemaker',
            'icemaker-02',
            'icemaker-03',
            'pantry-01',
            'pantry-02',
            'scale-10',
            'scale-11',
            'cvroom',
            'onedoor',
          ]),
        }),
      }),
      <Capability.CUSTOM_DUST_FILTER: 'custom.dustFilter'>: dict({
        <Attribute.DUST_FILTER_CAPACITY: 'dustFilterCapacity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DUST_FILTER_LAST_RESET_DATE: 'dustFilterLastResetDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DUST_FILTER_RESET_TYPE: 'dustFilterResetType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DUST_FILTER_STATUS: 'dustFilterStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DUST_FILTER_USAGE: 'dustFilterUsage'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DUST_FILTER_USAGE_STEP: 'dustFilterUsageStep'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>: dict({
        <Attribute.DR_MAX_DURATION: 'drMaxDuration'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 5, 26, 9, 29, 3, 768000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 99999999,
        }),
        <Attribute.ENERGY_SAVING_INFO: 'energySavingInfo'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_LEVEL: 'energySavingLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 5, 26, 9, 29, 2, 882000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 1,
        }),
        <Attribute.ENERGY_SAVING_OPERATION: 'energySavingOperation'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 40, 812000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.ENERGY_SAVING_OPERATION_SUPPORT: 'energySavingOperationSupport'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 5, 26, 9, 29, 2, 882000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
        <Attribute.ENERGY_SAVING_SUPPORT: 'energySavingSupport'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 31, 11, 55, 32, 553000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
        <Attribute.ENERGY_TYPE: 'energyType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 5, 26, 9, 29, 2, 882000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2.0',
        }),
        <Attribute.NOTIFICATION_TEMPLATE_I_D: 'notificationTemplateID'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_ENERGY_SAVING_LEVELS: 'supportedEnergySavingLevels'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 5, 26, 9, 29, 2, 882000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            1,
            2,
          ]),
        }),
      }),
      <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>: dict({
        <Attribute.FRIDGE_MODE: 'fridgeMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.FRIDGE_MODE_VALUE: 'fridgeModeValue'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_FRIDGE_MODES: 'supportedFridgeModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_WATER_FILTER: 'custom.waterFilter'>: dict({
        <Attribute.WATER_FILTER_CAPACITY: 'waterFilterCapacity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WATER_FILTER_LAST_RESET_DATE: 'waterFilterLastResetDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WATER_FILTER_RESET_TYPE: 'waterFilterResetType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WATER_FILTER_STATUS: 'waterFilterStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WATER_FILTER_USAGE: 'waterFilterUsage'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WATER_FILTER_USAGE_STEP: 'waterFilterUsageStep'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>: dict({
        <Attribute.DEMAND_RESPONSE_LOAD_CONTROL_STATUS: 'drlcStatus'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 40, 812000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'drlcLevel': 0,
            'drlcType': 1,
            'duration': 0,
            'override': False,
          }),
        }),
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 9, 3, 4, 29, 566000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '8d2d636b-8e36-e97b-5628-5f2fa27bc344',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 9, 3, 4, 29, 566000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'res.1.1.0,sh.1.1.0',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 9, 3, 4, 29, 566000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OCF_FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 9, 3, 4, 29, 566000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'A-RFWW-TP1-22-REV1_20240912',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 9, 3, 4, 29, 566000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Realtek',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 9, 3, 4, 29, 566000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 9, 3, 4, 29, 566000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 9, 3, 4, 29, 566000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TP1X_REF_21K|00156941|00050126001611304100000030010000',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 9, 3, 4, 29, 566000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TizenRT 3.1',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 9, 3, 4, 29, 566000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DAWIT 2.0',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 9, 3, 4, 29, 566000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 9, 3, 4, 29, 566000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung-Refrigerator',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 9, 3, 4, 29, 566000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '8d2d636b-8e36-e97b-5628-5f2fa27bc344',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 9, 3, 4, 29, 566000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA-REF-NORMAL-01011',
        }),
      }),
      <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>: dict({
        <Attribute.POWER_CONSUMPTION: 'powerConsumption'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 19, 4, 49, 761000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'deltaEnergy': 1,
            'end': '2025-02-11T19:04:49Z',
            'energy': 165156,
            'energySaved': 0,
            'persistedEnergy': 0,
            'persistedSavedEnergy': 0,
            'power': 1,
            'powerEnergy': 10.563493334319856,
            'start': '2025-02-11T18:48:09Z',
          }),
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.REFRIGERATION: 'refrigeration'>: dict({
        <Attribute.DEFROST: 'defrost'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RAPID_COOLING: 'rapidCooling'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 40, 861000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
        <Attribute.RAPID_FREEZING: 'rapidFreezing'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 40, 861000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>: dict({
        <Attribute.BINARY_ID: 'binaryId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 617000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TP1X_REF_21K',
        }),
        <Attribute.DESCRIPTION: 'description'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MICOM_ASSAY_CODE: 'micomAssayCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_CLASSIFICATION_CODE: 'modelClassificationCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_NAME: 'modelName'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RELEASE_YEAR: 'releaseYear'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 8, 3, 20, 51, 831000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 22,
        }),
        <Attribute.SERIAL_NUMBER: 'serialNumber'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER_EXTRA: 'serialNumberExtra'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>: dict({
        <Attribute.VERSION_NUMBER: 'versionNumber'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 8, 3, 20, 51, 831000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 24090102,
        }),
      }),
      <Capability.SAMSUNG_CE_FRIDGE_VACATION_MODE: 'samsungce.fridgeVacationMode'>: dict({
        <Attribute.VACATION_MODE: 'vacationMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 40, 989000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.SAMSUNG_CE_FRIDGE_WELCOME_LIGHTING: 'samsungce.fridgeWelcomeLighting'>: dict({
        <Attribute.DETECTION_PROXIMITY: 'detectionProximity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_DETECTION_PROXIMITIES: 'supportedDetectionProximities'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_POWER_COOL: 'samsungce.powerCool'>: dict({
        <Attribute.ACTIVATED: 'activated'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 40, 861000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
      }),
      <Capability.SAMSUNG_CE_POWER_FREEZE: 'samsungce.powerFreeze'>: dict({
        <Attribute.ACTIVATED: 'activated'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 40, 861000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
      }),
      <Capability.SAMSUNG_CE_QUICK_CONTROL: 'samsungce.quickControl'>: dict({
        <Attribute.VERSION: 'version'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_SABBATH_MODE: 'samsungce.sabbathMode'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_ACTIONS: 'supportedActions'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_SELF_CHECK: 'samsungce.selfCheck'>: dict({
        <Attribute.ERRORS: 'errors'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 40, 995000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RESULT: 'result'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 40, 995000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'passed',
        }),
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 40, 995000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.SUPPORTED_ACTIONS: 'supportedActions'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 40, 995000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'start',
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>: dict({
        <Attribute.AVAILABLE_MODULES: 'availableModules'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 40, 904000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
        <Attribute.LAST_UPDATED_DATE: 'lastUpdatedDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEW_VERSION_AVAILABLE: 'newVersionAvailable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 40, 904000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 40, 989000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
        <Attribute.OTN_D_U_I_D: 'otnDUID'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 40, 904000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'U7CPH4AITNP5W',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 6, 3, 9, 57, 26, 337000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 0,
        }),
        <Attribute.TARGET_MODULE: 'targetModule'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 40, 989000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
          }),
        }),
      }),
      <Capability.SAMSUNG_CE_VIEW_INSIDE: 'samsungce.viewInside'>: dict({
        <Attribute.CONTENTS: 'contents'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_UPDATED_TIME: 'lastUpdatedTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_FOCUS_AREAS: 'supportedFocusAreas'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>: dict({
        <Attribute.DUMP_TYPE: 'dumpType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 40, 904000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'file',
        }),
        <Attribute.ENDPOINT: 'endpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 40, 904000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'SSM',
        }),
        <Attribute.LOG_TYPE: 'logType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 40, 904000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'errCode',
            'dump',
          ]),
        }),
        <Attribute.MIN_VERSION: 'minVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 40, 904000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '1.0',
        }),
        <Attribute.MN_ID: 'mnId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 40, 904000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '0AJT',
        }),
        <Attribute.PROTOCOL_TYPE: 'protocolType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 40, 904000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'wifi_https',
        }),
        <Attribute.SETUP_ID: 'setupId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 40, 904000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'RB0',
        }),
        <Attribute.SIGNIN_PERMISSION: 'signinPermission'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TS_ID: 'tsId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>: dict({
        <Attribute.AUTO_RECONNECTION: 'autoReconnection'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 41, 979000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
        <Attribute.MIN_VERSION: 'minVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 41, 979000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '1.0',
        }),
        <Attribute.PROTOCOL_TYPE: 'protocolType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 41, 979000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'helper_hotspot',
          ]),
        }),
        <Attribute.SUPPORTED_AUTH_TYPE: 'supportedAuthType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 41, 979000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'OPEN',
            'WEP',
            'WPA-PSK',
            'WPA2-PSK',
            'SAE',
          ]),
        }),
        <Attribute.SUPPORTED_WI_FI_FREQ: 'supportedWiFiFreq'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 7, 30, 41, 979000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            '2.4G',
          ]),
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>: dict({
        <Attribute.COOLING_SETPOINT: 'coolingSetpoint'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.COOLING_SETPOINT_RANGE: 'coolingSetpointRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
    'onedoor': dict({
      <Capability.CONTACT_SENSOR: 'contactSensor'>: dict({
        <Attribute.CONTACT: 'contact'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 9, 3, 4, 30, 800000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'samsungce.freezerConvertMode',
            'custom.fridgeMode',
          ]),
        }),
      }),
      <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>: dict({
        <Attribute.FRIDGE_MODE: 'fridgeMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.FRIDGE_MODE_VALUE: 'fridgeModeValue'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_FRIDGE_MODES: 'supportedFridgeModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>: dict({
        <Attribute.MAXIMUM_SETPOINT: 'maximumSetpoint'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MINIMUM_SETPOINT: 'minimumSetpoint'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_FREEZER_CONVERT_MODE: 'samsungce.freezerConvertMode'>: dict({
        <Attribute.FREEZER_CONVERT_MODE: 'freezerConvertMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_FREEZER_CONVERT_MODES: 'supportedFreezerConvertModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_TEMPERATURE_SETTING: 'samsungce.temperatureSetting'>: dict({
        <Attribute.DESIRED_TEMPERATURE: 'desiredTemperature'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_DESIRED_TEMPERATURES: 'supportedDesiredTemperatures'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_UNAVAILABLE_CAPABILITIES: 'samsungce.unavailableCapabilities'>: dict({
        <Attribute.UNAVAILABLE_COMMANDS: 'unavailableCommands'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 8, 3, 20, 51, 831000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>: dict({
        <Attribute.COOLING_SETPOINT: 'coolingSetpoint'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.COOLING_SETPOINT_RANGE: 'coolingSetpointRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
    'pantry-01': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_FOOD_DEFROST: 'samsungce.foodDefrost'>: dict({
        <Attribute.FOOD_TYPE: 'foodType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OPERATION_TIME: 'operationTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REMAINING_TIME: 'remainingTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_OPTIONS: 'supportedOptions'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WEIGHT: 'weight'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_FRIDGE_PANTRY_INFO: 'samsungce.fridgePantryInfo'>: dict({
        <Attribute.NAME: 'name'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_FRIDGE_PANTRY_MODE: 'samsungce.fridgePantryMode'>: dict({
        <Attribute.MODE: 'mode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_MODES: 'supportedModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_MEAT_AGING: 'samsungce.meatAging'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_AGING_METHODS: 'supportedAgingMethods'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_MEAT_TYPES: 'supportedMeatTypes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ZONE_INFO: 'zoneInfo'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
    'pantry-02': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_FOOD_DEFROST: 'samsungce.foodDefrost'>: dict({
        <Attribute.FOOD_TYPE: 'foodType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OPERATION_TIME: 'operationTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REMAINING_TIME: 'remainingTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_OPTIONS: 'supportedOptions'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WEIGHT: 'weight'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_FRIDGE_PANTRY_INFO: 'samsungce.fridgePantryInfo'>: dict({
        <Attribute.NAME: 'name'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_FRIDGE_PANTRY_MODE: 'samsungce.fridgePantryMode'>: dict({
        <Attribute.MODE: 'mode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_MODES: 'supportedModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_MEAT_AGING: 'samsungce.meatAging'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_AGING_METHODS: 'supportedAgingMethods'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_MEAT_TYPES: 'supportedMeatTypes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ZONE_INFO: 'zoneInfo'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
    'scale-10': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_CONNECTION_STATE: 'samsungce.connectionState'>: dict({
        <Attribute.CONNECTION_STATE: 'connectionState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WEIGHT_MEASUREMENT: 'samsungce.weightMeasurement'>: dict({
        <Attribute.WEIGHT: 'weight'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WEIGHT_MEASUREMENT_CALIBRATION: 'samsungce.weightMeasurementCalibration'>: dict({
      }),
    }),
    'scale-11': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WEIGHT_MEASUREMENT: 'samsungce.weightMeasurement'>: dict({
        <Attribute.WEIGHT: 'weight'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[da_rvc_normal_000001]
  dict({
    'main': dict({
      <Capability.BATTERY: 'battery'>: dict({
        <Attribute.BATTERY: 'battery'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 9, 9, 22, 55, 13, 962000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 100,
        }),
        <Attribute.QUANTITY: 'quantity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TYPE: 'type'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 9, 8, 1, 3, 48, 820000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'samsungce.robotCleanerMapAreaInfo',
            'samsungce.robotCleanerMapCleaningInfo',
            'samsungce.robotCleanerPatrol',
            'samsungce.robotCleanerPetMonitoring',
            'samsungce.robotCleanerPetMonitoringReport',
            'samsungce.robotCleanerPetCleaningSchedule',
            'soundDetection',
            'samsungce.soundDetectionSensitivity',
            'samsungce.musicPlaylist',
            'mediaPlayback',
            'mediaTrackControl',
            'imageCapture',
            'videoCapture',
            'audioVolume',
            'audioMute',
            'audioNotification',
            'powerConsumptionReport',
            'custom.hepaFilter',
            'samsungce.robotCleanerMotorFilter',
            'samsungce.robotCleanerRelayCleaning',
            'audioTrackAddressing',
            'samsungce.robotCleanerWelcome',
          ]),
        }),
      }),
      <Capability.CUSTOM_DISABLED_COMPONENTS: 'custom.disabledComponents'>: dict({
        <Attribute.DISABLED_COMPONENTS: 'disabledComponents'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 11, 3, 4, 43, 7, 114000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'station',
          ]),
        }),
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': dict({
            'href': '/alarms/vs/0',
          }),
          'timestamp': datetime.datetime(2023, 6, 18, 15, 59, 28, 267000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'payload': dict({
              'if': list([
                'oic.if.baseline',
                'oic.if.a',
              ]),
              'rt': list([
                'x.com.samsung.da.alarms',
              ]),
              'x.com.samsung.da.items': list([
                dict({
                  'x.com.samsung.da.alarmType': 'Device',
                  'x.com.samsung.da.code': '4',
                  'x.com.samsung.da.state': 'deleted',
                  'x.com.samsung.da.triggeredTime': '2023-06-18T15:59:30',
                }),
              ]),
            }),
          }),
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2019, 7, 7, 19, 45, 19, 771000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '3442dfc6-17c0-a65f-dae0-4c6e01786f44',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 12, 23, 7, 9, 40, 610000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'res.1.1.0,sh.1.1.0',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2019, 7, 7, 19, 45, 19, 771000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 6, 3, 13, 34, 18, 508000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.OCF_FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2019, 7, 7, 19, 45, 19, 771000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '1.0',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2019, 7, 7, 19, 45, 19, 771000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '1.0',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2019, 7, 7, 19, 45, 19, 771000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2019, 7, 7, 19, 45, 19, 771000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 9, 7, 6, 42, 36, 551000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'powerbot_7000_17M|50016055|80010404011141000100000000000000',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2019, 7, 7, 19, 45, 19, 771000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Tizen(3/0)',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2019, 7, 7, 19, 45, 19, 771000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '00',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 6, 3, 0, 49, 53, 813000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2019, 7, 7, 19, 45, 19, 771000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[robot vacuum] Samsung',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2019, 7, 7, 19, 45, 19, 771000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '3442dfc6-17c0-a65f-dae0-4c6e01786f44',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 6, 2, 23, 30, 52, 793000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2019, 7, 7, 19, 45, 19, 771000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA-RVC-NORMAL-000001',
        }),
      }),
      <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>: dict({
        <Attribute.POWER_CONSUMPTION: 'powerConsumption'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 11, 3, 4, 43, 7, 92000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.ROBOT_CLEANER_CLEANING_MODE: 'robotCleanerCleaningMode'>: dict({
        <Attribute.ROBOT_CLEANER_CLEANING_MODE: 'robotCleanerCleaningMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 9, 9, 21, 25, 20, 601000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'stop',
        }),
      }),
      <Capability.ROBOT_CLEANER_MOVEMENT: 'robotCleanerMovement'>: dict({
        <Attribute.ROBOT_CLEANER_MOVEMENT: 'robotCleanerMovement'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 6, 18, 15, 59, 24, 580000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'idle',
        }),
      }),
      <Capability.ROBOT_CLEANER_TURBO_MODE: 'robotCleanerTurboMode'>: dict({
        <Attribute.ROBOT_CLEANER_TURBO_MODE: 'robotCleanerTurboMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 9, 8, 2, 53, 49, 826000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>: dict({
        <Attribute.BINARY_ID: 'binaryId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DESCRIPTION: 'description'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MICOM_ASSAY_CODE: 'micomAssayCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_CLASSIFICATION_CODE: 'modelClassificationCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_NAME: 'modelName'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RELEASE_YEAR: 'releaseYear'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER: 'serialNumber'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER_EXTRA: 'serialNumberExtra'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>: dict({
        <Attribute.VERSION_NUMBER: 'versionNumber'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 11, 1, 9, 26, 7, 107000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 22100101,
        }),
      }),
      <Capability.SAMSUNG_CE_ROBOT_CLEANER_CLEANING_MODE: 'samsungce.robotCleanerCleaningMode'>: dict({
        <Attribute.CLEANING_MODE: 'cleaningMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 9, 9, 21, 25, 20, 601000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'stop',
        }),
        <Attribute.REPEAT_MODE_ENABLED: 'repeatModeEnabled'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 12, 21, 1, 32, 56, 245000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.SUPPORT_REPEAT_MODE: 'supportRepeatMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 11, 3, 4, 43, 6, 547000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
        <Attribute.SUPPORTED_CLEANING_MODE: 'supportedCleaningMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 11, 3, 4, 43, 6, 547000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'auto',
            'spot',
            'manual',
            'stop',
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_ROBOT_CLEANER_OPERATING_STATE: 'samsungce.robotCleanerOperatingState'>: dict({
        <Attribute.CLEANING_STEP: 'cleaningStep'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.HOMING_REASON: 'homingReason'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 11, 3, 4, 43, 22, 926000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
        <Attribute.IS_MAP_BASED_OPERATION_AVAILABLE: 'isMapBasedOperationAvailable'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 6, 18, 15, 59, 24, 580000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'idle',
        }),
        <Attribute.SUPPORTED_OPERATING_STATE: 'supportedOperatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 11, 3, 4, 43, 6, 547000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'homing',
            'error',
            'idle',
            'charging',
            'chargingForRemainingJob',
            'paused',
            'cleaning',
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>: dict({
        <Attribute.AVAILABLE_MODULES: 'availableModules'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_UPDATED_DATE: 'lastUpdatedDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEW_VERSION_AVAILABLE: 'newVersionAvailable'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OTN_D_U_I_D: 'otnDUID'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TARGET_MODULE: 'targetModule'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 6, 18, 15, 59, 27, 658000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[da_sac_wifikit_000001]
  dict({
    'main': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 12, 955000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 29, 22, 0, 56, 209000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '0e168539-061a-5f02-2beb-cc5cb6bb3b7b',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 29, 22, 0, 56, 209000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'res.1.1.0,sh.1.1.0',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 29, 22, 0, 56, 209000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 29, 22, 0, 56, 209000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.OCF_FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 29, 22, 0, 56, 209000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '20240611.1',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 29, 22, 0, 56, 209000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 29, 22, 0, 56, 209000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 29, 22, 0, 56, 209000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 29, 22, 0, 56, 209000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'MIM-H04N|240611|61FFFF00001411000000000000000000',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 29, 22, 0, 56, 209000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Tizen',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 29, 22, 0, 56, 209000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '4.0',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 29, 22, 0, 56, 209000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 29, 22, 0, 56, 209000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[system a/c] Samsung',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 29, 22, 0, 56, 209000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '0e168539-061a-5f02-2beb-cc5cb6bb3b7b',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 29, 22, 0, 56, 209000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2021-01-01T00:01:01Z',
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 29, 22, 0, 56, 209000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA-SAC-WIFIKIT-000001',
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>: dict({
        <Attribute.BINARY_ID: 'binaryId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 12, 955000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'MIM-H04N',
        }),
        <Attribute.DESCRIPTION: 'description'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MICOM_ASSAY_CODE: 'micomAssayCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_CLASSIFICATION_CODE: 'modelClassificationCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_NAME: 'modelName'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RELEASE_YEAR: 'releaseYear'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER: 'serialNumber'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER_EXTRA: 'serialNumberExtra'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>: dict({
        <Attribute.VERSION_NUMBER: 'versionNumber'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 29, 22, 0, 56, 311000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 22100101,
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>: dict({
        <Attribute.AVAILABLE_MODULES: 'availableModules'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 12, 955000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
        <Attribute.LAST_UPDATED_DATE: 'lastUpdatedDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEW_VERSION_AVAILABLE: 'newVersionAvailable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 12, 955000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OTN_D_U_I_D: 'otnDUID'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TARGET_MODULE: 'targetModule'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WIFI_KIT_SUB_DEVICES: 'samsungce.wifiKitSubDevices'>: dict({
        <Attribute.NUMBER_OF_CONNECTED_DEVICES: 'numberOfConnectedDevices'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 12, 955000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 1,
        }),
        <Attribute.SUB_DEVICES: 'subDevices'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 12, 955000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'connected': True,
              'description': 'RAC',
              'deviceId': '0e168539-061a-5f02-2beb-000001200000',
              'name': 'Air Conditioner',
            }),
          ]),
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 12, 955000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[da_wm_dw_00001]
  dict({
    'main': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 19, 29, 32, 447000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'samsungce.waterConsumptionReport',
            'sec.wifiConfiguration',
            'samsungce.quickControl',
            'samsungce.deviceInfoPrivate',
            'demandResponseLoadControl',
            'sec.diagnosticsInformation',
            'custom.waterFilter',
          ]),
        }),
      }),
      <Capability.CUSTOM_DISHWASHER_DELAY_START_TIME: 'custom.dishwasherDelayStartTime'>: dict({
        <Attribute.DISHWASHER_DELAY_START_TIME: 'dishwasherDelayStartTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 0, 37, 482000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '00:00:00',
        }),
      }),
      <Capability.CUSTOM_DISHWASHER_OPERATING_PERCENTAGE: 'custom.dishwasherOperatingPercentage'>: dict({
        <Attribute.DISHWASHER_OPERATING_PERCENTAGE: 'dishwasherOperatingPercentage'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 20, 21, 26, 452000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 1,
        }),
      }),
      <Capability.CUSTOM_DISHWASHER_OPERATING_PROGRESS: 'custom.dishwasherOperatingProgress'>: dict({
        <Attribute.DISHWASHER_OPERATING_PROGRESS: 'dishwasherOperatingProgress'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 20, 21, 26, 452000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
      }),
      <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>: dict({
        <Attribute.DR_MAX_DURATION: 'drMaxDuration'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_INFO: 'energySavingInfo'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_LEVEL: 'energySavingLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_OPERATION: 'energySavingOperation'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_OPERATION_SUPPORT: 'energySavingOperationSupport'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_SUPPORT: 'energySavingSupport'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 1, 0, 8, 9, 813000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
        <Attribute.ENERGY_TYPE: 'energyType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 8, 25, 3, 23, 6, 667000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2.0',
        }),
        <Attribute.NOTIFICATION_TEMPLATE_I_D: 'notificationTemplateID'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_ENERGY_SAVING_LEVELS: 'supportedEnergySavingLevels'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_SUPPORTED_OPTIONS: 'custom.supportedOptions'>: dict({
        <Attribute.COURSE: 'course'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REFERENCE_TABLE: 'referenceTable'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_COURSES: 'supportedCourses'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 0, 37, 194000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            '82',
            '83',
            '84',
            '85',
            '86',
            '87',
            '88',
          ]),
        }),
      }),
      <Capability.CUSTOM_WATER_FILTER: 'custom.waterFilter'>: dict({
        <Attribute.WATER_FILTER_CAPACITY: 'waterFilterCapacity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WATER_FILTER_LAST_RESET_DATE: 'waterFilterLastResetDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WATER_FILTER_RESET_TYPE: 'waterFilterResetType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WATER_FILTER_STATUS: 'waterFilterStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WATER_FILTER_USAGE: 'waterFilterUsage'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WATER_FILTER_USAGE_STEP: 'waterFilterUsageStep'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>: dict({
        <Attribute.DEMAND_RESPONSE_LOAD_CONTROL_STATUS: 'drlcStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.DISHWASHER_OPERATING_STATE: 'dishwasherOperatingState'>: dict({
        <Attribute.COMPLETION_TIME: 'completionTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 20, 21, 26, 452000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2025-02-08T22:49:26Z',
        }),
        <Attribute.DISHWASHER_JOB_STATE: 'dishwasherJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 20, 21, 26, 452000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'unknown',
        }),
        <Attribute.MACHINE_STATE: 'machineState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 20, 21, 26, 452000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'stop',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_MACHINE_STATES: 'supportedMachineStates'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 10, 10, 21, 2, 853000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'stop',
            'run',
            'pause',
          ]),
        }),
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': dict({
            'href': '/operational/state/0',
          }),
          'timestamp': datetime.datetime(2023, 7, 19, 4, 23, 15, 606000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'payload': dict({
              'currentJobState': 'None',
              'currentMachineState': 'idle',
              'if': list([
                'oic.if.baseline',
                'oic.if.a',
              ]),
              'jobStates': list([
                'None',
                'Predrain',
                'Prewash',
                'Wash',
                'Rinse',
                'Drying',
                'Finish',
              ]),
              'machineStates': list([
                'pause',
                'active',
                'idle',
              ]),
              'progressPercentage': '1',
              'remainingTime': '02:16:00',
              'rt': list([
                'oic.r.operational.state',
              ]),
            }),
          }),
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 27, 1, 19, 37, 615000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'f36dc7ce-cac0-0667-dc14-a3704eb5e676',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 7, 4, 13, 53, 32, 32000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'res.1.1.0,sh.1.1.0',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 27, 1, 19, 37, 615000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OCF_FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 11, 2, 15, 58, 55, 699000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_DW_A51_20_COMMON_30230714',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 27, 1, 19, 37, 615000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ARTIK051',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 27, 1, 19, 37, 615000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 27, 1, 19, 37, 615000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 27, 1, 19, 37, 615000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_DW_A51_20_COMMON|30007242|40010201001311000101000000000000',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 27, 1, 19, 37, 615000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TizenRT 1.0 + IPv6',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 27, 1, 19, 37, 615000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DAWIT 2.0',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 27, 1, 19, 37, 615000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 27, 1, 19, 37, 615000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[dishwasher] Samsung',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 27, 1, 19, 37, 615000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'f36dc7ce-cac0-0667-dc14-a3704eb5e676',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 27, 1, 19, 37, 615000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA-WM-DW-000001',
        }),
      }),
      <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>: dict({
        <Attribute.POWER_CONSUMPTION: 'powerConsumption'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 20, 21, 26, 596000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'deltaEnergy': 0,
            'end': '2025-02-08T20:21:26Z',
            'energy': 101600,
            'energySaved': 0,
            'persistedEnergy': 0,
            'persistedSavedEnergy': 0,
            'power': 0,
            'powerEnergy': 0.0,
            'start': '2025-02-08T20:21:21Z',
          }),
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>: dict({
        <Attribute.REMOTE_CONTROL_ENABLED: 'remoteControlEnabled'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 0, 37, 555000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'false',
        }),
      }),
      <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>: dict({
        <Attribute.BINARY_ID: 'binaryId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 19, 29, 30, 987000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_DW_A51_20_COMMON',
        }),
        <Attribute.DESCRIPTION: 'description'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MICOM_ASSAY_CODE: 'micomAssayCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_CLASSIFICATION_CODE: 'modelClassificationCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_NAME: 'modelName'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RELEASE_YEAR: 'releaseYear'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER: 'serialNumber'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER_EXTRA: 'serialNumberExtra'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_DISHWASHER_JOB_STATE: 'samsungce.dishwasherJobState'>: dict({
        <Attribute.DISHWASHER_JOB_STATE: 'dishwasherJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 20, 21, 26, 452000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
        <Attribute.SCHEDULED_JOBS: 'scheduledJobs'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 20, 21, 26, 928000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'jobName': 'washing',
              'timeInSec': 3600,
            }),
            dict({
              'jobName': 'rinsing',
              'timeInSec': 1020,
            }),
            dict({
              'jobName': 'drying',
              'timeInSec': 1200,
            }),
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_DISHWASHER_OPERATION: 'samsungce.dishwasherOperation'>: dict({
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 20, 21, 26, 452000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.OPERATION_TIME: 'operationTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.PROGRESS_PERCENTAGE: 'progressPercentage'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 20, 21, 26, 452000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 1,
        }),
        <Attribute.REMAINING_TIME: 'remainingTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 20, 21, 26, 452000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 148.0,
        }),
        <Attribute.REMAINING_TIME_STR: 'remainingTimeStr'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 20, 21, 26, 452000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '02:28',
        }),
        <Attribute.RESERVABLE: 'reservable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 0, 37, 194000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.SUPPORTED_OPERATING_STATE: 'supportedOperatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 10, 10, 21, 2, 853000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'ready',
            'running',
            'paused',
          ]),
        }),
        <Attribute.TIME_LEFT_TO_START: 'timeLeftToStart'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 0, 37, 482000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 0.0,
        }),
      }),
      <Capability.SAMSUNG_CE_DISHWASHER_WASHING_COURSE: 'samsungce.dishwasherWashingCourse'>: dict({
        <Attribute.CUSTOM_COURSE_CANDIDATES: 'customCourseCandidates'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_COURSES: 'supportedCourses'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 0, 37, 194000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'auto',
            'normal',
            'heavy',
            'delicate',
            'express',
            'rinseOnly',
            'selfClean',
          ]),
        }),
        <Attribute.WASHING_COURSE: 'washingCourse'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 20, 21, 26, 497000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'normal',
        }),
      }),
      <Capability.SAMSUNG_CE_DISHWASHER_WASHING_COURSE_DETAILS: 'samsungce.dishwasherWashingCourseDetails'>: dict({
        <Attribute.ENERGY_USAGE_MAX: 'energyUsageMax'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 0, 37, 194000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 5,
        }),
        <Attribute.PREDEFINED_COURSES: 'predefinedCourses'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 0, 37, 194000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'courseName': 'auto',
              'energyUsage': 3,
              'expectedTime': dict({
                'time': 136,
                'unit': 'min',
              }),
              'options': dict({
                'highTempWash': dict({
                  'default': False,
                  'settable': list([
                    False,
                    True,
                  ]),
                }),
                'sanitize': dict({
                  'default': False,
                  'settable': list([
                    False,
                    True,
                  ]),
                }),
                'selectedZone': dict({
                  'default': 'all',
                  'settable': list([
                    'none',
                    'lower',
                    'all',
                  ]),
                }),
                'speedBooster': dict({
                  'default': False,
                  'settable': list([
                    False,
                    True,
                  ]),
                }),
                'zoneBooster': dict({
                  'default': 'none',
                  'settable': list([
                    'none',
                    'left',
                  ]),
                }),
              }),
              'temperature': dict({
                'max': 60,
                'min': 50,
                'unit': 'C',
              }),
              'waterUsage': 3,
            }),
            dict({
              'courseName': 'normal',
              'energyUsage': 3,
              'expectedTime': dict({
                'time': 148,
                'unit': 'min',
              }),
              'options': dict({
                'highTempWash': dict({
                  'default': False,
                  'settable': list([
                    False,
                    True,
                  ]),
                }),
                'sanitize': dict({
                  'default': False,
                  'settable': list([
                    False,
                    True,
                  ]),
                }),
                'selectedZone': dict({
                  'default': 'all',
                  'settable': list([
                    'none',
                    'lower',
                    'all',
                  ]),
                }),
                'speedBooster': dict({
                  'default': False,
                  'settable': list([
                    False,
                    True,
                  ]),
                }),
                'zoneBooster': dict({
                  'default': 'none',
                  'settable': list([
                    'none',
                    'left',
                  ]),
                }),
              }),
              'temperature': dict({
                'max': 62,
                'min': 45,
                'unit': 'C',
              }),
              'waterUsage': 4,
            }),
            dict({
              'courseName': 'heavy',
              'energyUsage': 4,
              'expectedTime': dict({
                'time': 155,
                'unit': 'min',
              }),
              'options': dict({
                'highTempWash': dict({
                  'default': False,
                  'settable': list([
                    False,
                    True,
                  ]),
                }),
                'sanitize': dict({
                  'default': False,
                  'settable': list([
                    False,
                    True,
                  ]),
                }),
                'selectedZone': dict({
                  'default': 'all',
                  'settable': list([
                    'none',
                    'lower',
                    'all',
                  ]),
                }),
                'speedBooster': dict({
                  'default': False,
                  'settable': list([
                    False,
                    True,
                  ]),
                }),
                'zoneBooster': dict({
                  'default': 'none',
                  'settable': list([
                    'none',
                    'left',
                  ]),
                }),
              }),
              'temperature': dict({
                'max': 65,
                'min': 65,
                'unit': 'C',
              }),
              'waterUsage': 5,
            }),
            dict({
              'courseName': 'delicate',
              'energyUsage': 2,
              'expectedTime': dict({
                'time': 112,
                'unit': 'min',
              }),
              'options': dict({
                'highTempWash': dict({
                  'default': False,
                  'settable': list([
                  ]),
                }),
                'sanitize': dict({
                  'default': False,
                  'settable': list([
                  ]),
                }),
                'selectedZone': dict({
                  'default': 'all',
                  'settable': list([
                    'none',
                    'lower',
                    'all',
                  ]),
                }),
                'speedBooster': dict({
                  'default': False,
                  'settable': list([
                    False,
                    True,
                  ]),
                }),
                'zoneBooster': dict({
                  'default': 'none',
                  'settable': list([
                  ]),
                }),
              }),
              'temperature': dict({
                'max': 50,
                'min': 50,
                'unit': 'C',
              }),
              'waterUsage': 3,
            }),
            dict({
              'courseName': 'express',
              'energyUsage': 2,
              'expectedTime': dict({
                'time': 60,
                'unit': 'min',
              }),
              'options': dict({
                'highTempWash': dict({
                  'default': False,
                  'settable': list([
                    False,
                    True,
                  ]),
                }),
                'sanitize': dict({
                  'default': False,
                  'settable': list([
                    False,
                    True,
                  ]),
                }),
                'selectedZone': dict({
                  'default': 'all',
                  'settable': list([
                    'none',
                    'lower',
                    'all',
                  ]),
                }),
                'speedBooster': dict({
                  'default': False,
                  'settable': list([
                  ]),
                }),
                'zoneBooster': dict({
                  'default': 'none',
                  'settable': list([
                    'none',
                    'left',
                  ]),
                }),
              }),
              'temperature': dict({
                'max': 52,
                'min': 52,
                'unit': 'C',
              }),
              'waterUsage': 2,
            }),
            dict({
              'courseName': 'rinseOnly',
              'energyUsage': 1,
              'expectedTime': dict({
                'time': 14,
                'unit': 'min',
              }),
              'options': dict({
                'highTempWash': dict({
                  'default': False,
                  'settable': list([
                  ]),
                }),
                'sanitize': dict({
                  'default': False,
                  'settable': list([
                  ]),
                }),
                'selectedZone': dict({
                  'default': 'all',
                  'settable': list([
                    'none',
                    'lower',
                    'all',
                  ]),
                }),
                'speedBooster': dict({
                  'default': False,
                  'settable': list([
                  ]),
                }),
                'zoneBooster': dict({
                  'default': 'none',
                  'settable': list([
                  ]),
                }),
              }),
              'temperature': dict({
                'max': 40,
                'min': 40,
                'unit': 'C',
              }),
              'waterUsage': 1,
            }),
            dict({
              'courseName': 'selfClean',
              'energyUsage': 5,
              'expectedTime': dict({
                'time': 139,
                'unit': 'min',
              }),
              'options': dict({
                'highTempWash': dict({
                  'default': False,
                  'settable': list([
                  ]),
                }),
                'sanitize': dict({
                  'default': False,
                  'settable': list([
                  ]),
                }),
                'selectedZone': dict({
                  'default': 'all',
                  'settable': list([
                    'none',
                    'all',
                  ]),
                }),
                'speedBooster': dict({
                  'default': False,
                  'settable': list([
                  ]),
                }),
                'zoneBooster': dict({
                  'default': 'none',
                  'settable': list([
                  ]),
                }),
              }),
              'temperature': dict({
                'max': 70,
                'min': 70,
                'unit': 'C',
              }),
              'waterUsage': 4,
            }),
          ]),
        }),
        <Attribute.WATER_USAGE_MAX: 'waterUsageMax'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 0, 37, 194000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 5,
        }),
      }),
      <Capability.SAMSUNG_CE_DISHWASHER_WASHING_OPTIONS: 'samsungce.dishwasherWashingOptions'>: dict({
        <Attribute.ADD_RINSE: 'addRinse'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DRY_PLUS: 'dryPlus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.HEATED_DRY: 'heatedDry'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.HIGH_TEMP_WASH: 'highTempWash'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 7, 39, 54, 739000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'settable': list([
              False,
              True,
            ]),
            'value': False,
          }),
        }),
        <Attribute.HOT_AIR_DRY: 'hotAirDry'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RINSE_PLUS: 'rinsePlus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SANITIZE: 'sanitize'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 18, 23, 49, 9, 964000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'settable': list([
              False,
              True,
            ]),
            'value': False,
          }),
        }),
        <Attribute.SANITIZING_WASH: 'sanitizingWash'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SELECTED_ZONE: 'selectedZone'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 11, 9, 0, 20, 42, 461000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'settable': list([
              'none',
              'upper',
              'lower',
              'all',
            ]),
            'value': 'all',
          }),
        }),
        <Attribute.SPEED_BOOSTER: 'speedBooster'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 11, 24, 14, 46, 55, 375000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'settable': list([
              False,
              True,
            ]),
            'value': False,
          }),
        }),
        <Attribute.STEAM_SOAK: 'steamSoak'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.STORM_WASH: 'stormWash'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_LIST: 'supportedList'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 27, 1, 19, 38, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'selectedZone',
            'zoneBooster',
            'speedBooster',
            'sanitize',
            'highTempWash',
          ]),
        }),
        <Attribute.ZONE_BOOSTER: 'zoneBooster'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 11, 20, 7, 10, 27, 445000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'settable': list([
              'none',
              'left',
              'right',
              'all',
            ]),
            'value': 'none',
          }),
        }),
      }),
      <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>: dict({
        <Attribute.VERSION_NUMBER: 'versionNumber'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 7, 2, 2, 56, 22, 508000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 24040105,
        }),
      }),
      <Capability.SAMSUNG_CE_KIDS_LOCK: 'samsungce.kidsLock'>: dict({
        <Attribute.LOCK_STATE: 'lockState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 0, 37, 450000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'unlocked',
        }),
      }),
      <Capability.SAMSUNG_CE_QUICK_CONTROL: 'samsungce.quickControl'>: dict({
        <Attribute.VERSION: 'version'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>: dict({
        <Attribute.AVAILABLE_MODULES: 'availableModules'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 7, 20, 3, 37, 30, 706000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
        <Attribute.LAST_UPDATED_DATE: 'lastUpdatedDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEW_VERSION_AVAILABLE: 'newVersionAvailable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 0, 37, 538000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OTN_D_U_I_D: 'otnDUID'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 0, 37, 538000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'MTCNQWBWIV6TS',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TARGET_MODULE: 'targetModule'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WATER_CONSUMPTION_REPORT: 'samsungce.waterConsumptionReport'>: dict({
        <Attribute.WATER_CONSUMPTION: 'waterConsumption'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>: dict({
        <Attribute.DUMP_TYPE: 'dumpType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENDPOINT: 'endpoint'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LOG_TYPE: 'logType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MIN_VERSION: 'minVersion'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MN_ID: 'mnId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.PROTOCOL_TYPE: 'protocolType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SETUP_ID: 'setupId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SIGNIN_PERMISSION: 'signinPermission'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TS_ID: 'tsId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>: dict({
        <Attribute.AUTO_RECONNECTION: 'autoReconnection'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MIN_VERSION: 'minVersion'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.PROTOCOL_TYPE: 'protocolType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_AUTH_TYPE: 'supportedAuthType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_WI_FI_FREQ: 'supportedWiFiFreq'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 20, 21, 26, 386000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[da_wm_sc_000001]
  dict({
    'main': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'custom.steamClosetWrinklePrevent',
            'custom.veryFineDustFilter',
            'demandResponseLoadControl',
            'sec.wifiConfiguration',
            'samsungce.quickControl',
            'samsungce.deviceInfoPrivate',
          ]),
        }),
      }),
      <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>: dict({
        <Attribute.DR_MAX_DURATION: 'drMaxDuration'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_INFO: 'energySavingInfo'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_LEVEL: 'energySavingLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_OPERATION: 'energySavingOperation'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_OPERATION_SUPPORT: 'energySavingOperationSupport'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_SUPPORT: 'energySavingSupport'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 3, 6, 11, 24, 6, 106000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.ENERGY_TYPE: 'energyType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 3, 6, 11, 24, 6, 106000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2.0',
        }),
        <Attribute.NOTIFICATION_TEMPLATE_I_D: 'notificationTemplateID'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_ENERGY_SAVING_LEVELS: 'supportedEnergySavingLevels'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_JOB_BEGINNING_STATUS: 'custom.jobBeginningStatus'>: dict({
        <Attribute.JOB_BEGINNING_STATUS: 'jobBeginningStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_STEAM_CLOSET_OPERATING_STATE: 'custom.steamClosetOperatingState'>: dict({
        <Attribute.COMPLETION_TIME: 'completionTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2025-02-11T09:00:17Z',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 22, 53, 25, 928000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 1,
        }),
        <Attribute.REMAINING_TIME: 'remainingTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 22, 53, 25, 928000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 39,
        }),
        <Attribute.REMAINING_TIME_STR: 'remainingTimeStr'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 22, 53, 25, 928000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '00:39',
        }),
        <Attribute.STEAM_CLOSET_DELAY_END_TIME: 'steamClosetDelayEndTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.STEAM_CLOSET_JOB_STATE: 'steamClosetJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
        <Attribute.STEAM_CLOSET_MACHINE_STATE: 'steamClosetMachineState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'stop',
        }),
        <Attribute.SUPPORTED_STEAM_CLOSET_JOB_STATE: 'supportedSteamClosetJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 22, 16, 19, 221000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'none',
            'steaming',
            'airwashing',
            'drying',
            'finish',
          ]),
        }),
        <Attribute.SUPPORTED_STEAM_CLOSET_MACHINE_STATE: 'supportedSteamClosetMachineState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 6, 23, 16, 0, 41, 238000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'stop',
            'run',
            'pause',
          ]),
        }),
      }),
      <Capability.CUSTOM_STEAM_CLOSET_WRINKLE_PREVENT: 'custom.steamClosetWrinklePrevent'>: dict({
        <Attribute.STEAM_CLOSET_WRINKLE_PREVENT: 'steamClosetWrinklePrevent'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.CUSTOM_SUPPORTED_OPTIONS: 'custom.supportedOptions'>: dict({
        <Attribute.COURSE: 'course'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REFERENCE_TABLE: 'referenceTable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'id': 'Table_00',
          }),
        }),
        <Attribute.SUPPORTED_COURSES: 'supportedCourses'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            '22',
            '23',
            '32',
            '09',
            '12',
            '0C',
            '31',
            '0B',
            '10',
            '0A',
            '14',
            '13',
            '16',
            '24',
            '25',
            '2F',
            '20',
            '0F',
            '27',
            '30',
            '15',
            '1A',
            '1B',
            '1C',
            '2D',
            '07',
            '08',
          ]),
        }),
      }),
      <Capability.CUSTOM_VERY_FINE_DUST_FILTER: 'custom.veryFineDustFilter'>: dict({
        <Attribute.VERY_FINE_DUST_FILTER_CAPACITY: 'veryFineDustFilterCapacity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.VERY_FINE_DUST_FILTER_LAST_RESET_DATE: 'veryFineDustFilterLastResetDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.VERY_FINE_DUST_FILTER_RESET_TYPE: 'veryFineDustFilterResetType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.VERY_FINE_DUST_FILTER_STATUS: 'veryFineDustFilterStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.VERY_FINE_DUST_FILTER_USAGE: 'veryFineDustFilterUsage'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.VERY_FINE_DUST_FILTER_USAGE_STEP: 'veryFineDustFilterUsageStep'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>: dict({
        <Attribute.DEMAND_RESPONSE_LOAD_CONTROL_STATUS: 'drlcStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.DRYER_OPERATING_STATE: 'dryerOperatingState'>: dict({
        <Attribute.COMPLETION_TIME: 'completionTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2025-02-11T09:00:17Z',
        }),
        <Attribute.DRYER_JOB_STATE: 'dryerJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
        <Attribute.MACHINE_STATE: 'machineState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'stop',
        }),
        <Attribute.SUPPORTED_MACHINE_STATES: 'supportedMachineStates'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'stop',
            'run',
            'pause',
          ]),
        }),
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': dict({
            'href': '/information/vs/0',
          }),
          'timestamp': datetime.datetime(2024, 3, 6, 11, 24, 5, 312000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'payload': dict({
              'if': list([
                'oic.if.baseline',
                'oic.if.a',
              ]),
              'rt': list([
                'x.com.samsung.da.information',
              ]),
              'x.com.samsung.da.description': 'DA_DF_TP2_20_COMMON_DF8500A/DC92-02995A_0010',
              'x.com.samsung.da.diagDumpType': 'file',
              'x.com.samsung.da.diagEndPoint': 'SSM',
              'x.com.samsung.da.diagLogType': list([
                'errCode',
                'dump',
              ]),
              'x.com.samsung.da.diagMinVersion': '1.0',
              'x.com.samsung.da.diagMnid': '0AJT',
              'x.com.samsung.da.diagProtocolType': 'WIFI_HTTPS',
              'x.com.samsung.da.diagSetupid': 'A00',
              'x.com.samsung.da.items': list([
                dict({
                  'x.com.samsung.da.description': 'DA_DF_TP2_20_COMMON|20299141|3801010200151107020100FF00000000',
                  'x.com.samsung.da.id': '0',
                  'x.com.samsung.da.newVersionAvailable': '0',
                  'x.com.samsung.da.number': '02673A230807(F821)',
                  'x.com.samsung.da.type': 'Software',
                }),
                dict({
                  'x.com.samsung.da.description': 'Firmware_1_DB_20299141210618090FFFFF202995412203111604FFFF(015E2029914120299541_30000000)(FileDown:0)(Type:0)',
                  'x.com.samsung.da.id': '1',
                  'x.com.samsung.da.newVersionAvailable': '0',
                  'x.com.samsung.da.number': '21061809,22031116',
                  'x.com.samsung.da.type': 'Firmware',
                }),
                dict({
                  'x.com.samsung.da.description': 'Firmware_2_DB_2023564319111852041FFFFFFFFFFFFFFFFFFFFFFFFE(015E20235643FFFFFFFF_30000000)(FileDown:0)(Type:0)',
                  'x.com.samsung.da.id': '2',
                  'x.com.samsung.da.number': '19111852,FFFFFFFF',
                  'x.com.samsung.da.type': 'Firmware',
                }),
              ]),
              'x.com.samsung.da.modelNum': 'DA_DF_TP2_20_COMMON|20299141|3801010200151107020100FF00000000',
              'x.com.samsung.da.otnDUID': 'MTCHUODP5V4FA',
              'x.com.samsung.da.serialNum': '1EG158TW400002M',
            }),
          }),
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 1, 42, 53, 834000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'b93211bf-9d96-bd21-3b2f-964fcc87f5cc',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 1, 42, 53, 834000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'res.1.1.0,sh.1.1.0',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 1, 42, 53, 834000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OCF_FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 1, 42, 53, 834000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_DF_TP2_20_COMMON_30230807',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 1, 42, 53, 834000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'MediaTek',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 1, 42, 53, 834000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 1, 42, 53, 834000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 1, 42, 53, 834000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_DF_TP2_20_COMMON|20299141|3801010200151107020100FF00000000',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 1, 42, 53, 834000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TizenRT 2.0 + IPv6',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 1, 42, 53, 834000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DAWIT 2.0',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 1, 42, 53, 834000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 1, 42, 53, 834000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[airdresser] Samsung',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 1, 42, 53, 834000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'b93211bf-9d96-bd21-3b2f-964fcc87f5cc',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 1, 42, 53, 834000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA-WM-SC-000001',
        }),
      }),
      <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>: dict({
        <Attribute.POWER_CONSUMPTION: 'powerConsumption'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'deltaEnergy': 0,
            'end': '2025-02-11T08:21:17Z',
            'energy': 207500,
            'energySaved': 0,
            'persistedEnergy': 0,
            'power': 0,
            'powerEnergy': 0.0,
            'start': '2025-02-10T22:51:59Z',
          }),
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>: dict({
        <Attribute.REMOTE_CONTROL_ENABLED: 'remoteControlEnabled'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'false',
        }),
      }),
      <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>: dict({
        <Attribute.BINARY_ID: 'binaryId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_DF_TP2_20_COMMON',
        }),
        <Attribute.DESCRIPTION: 'description'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_DF_TP2_20_COMMON_DF8500A/DC92-02995A_0010',
        }),
        <Attribute.MICOM_ASSAY_CODE: 'micomAssayCode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '20299141',
        }),
        <Attribute.MODEL_CLASSIFICATION_CODE: 'modelClassificationCode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '3801010200151107020100FF00000000',
        }),
        <Attribute.MODEL_NAME: 'modelName'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RELEASE_YEAR: 'releaseYear'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER: 'serialNumber'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER_EXTRA: 'serialNumberExtra'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>: dict({
        <Attribute.VERSION_NUMBER: 'versionNumber'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 2, 7, 55, 47, 237000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 24110101,
        }),
      }),
      <Capability.SAMSUNG_CE_KIDS_LOCK: 'samsungce.kidsLock'>: dict({
        <Attribute.LOCK_STATE: 'lockState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'unlocked',
        }),
      }),
      <Capability.SAMSUNG_CE_QUICK_CONTROL: 'samsungce.quickControl'>: dict({
        <Attribute.VERSION: 'version'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>: dict({
        <Attribute.AVAILABLE_MODULES: 'availableModules'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 6, 23, 16, 0, 41, 636000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
        <Attribute.LAST_UPDATED_DATE: 'lastUpdatedDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEW_VERSION_AVAILABLE: 'newVersionAvailable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 33, 28, 19000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OTN_D_U_I_D: 'otnDUID'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'MTCHUODP5V4FA',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TARGET_MODULE: 'targetModule'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 33, 28, 19000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
          }),
        }),
      }),
      <Capability.SAMSUNG_CE_STEAM_CLOSET_AUTO_CYCLE_LINK: 'samsungce.steamClosetAutoCycleLink'>: dict({
        <Attribute.STEAM_CLOSET_AUTO_CYCLE_LINK: 'steamClosetAutoCycleLink'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'on',
        }),
      }),
      <Capability.SAMSUNG_CE_STEAM_CLOSET_CYCLE: 'samsungce.steamClosetCycle'>: dict({
        <Attribute.REFERENCE_TABLE: 'referenceTable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'id': 'Table_00',
          }),
        }),
        <Attribute.STEAM_CLOSET_CYCLE: 'steamClosetCycle'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Table_00_Course_22',
        }),
        <Attribute.SUPPORTED_CYCLES: 'supportedCycles'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'cycle': '22',
              'supportedOptions': dict({
                'keepFresh': dict({
                  'default': 'on',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '660F',
                }),
                'sanitize': dict({
                  'default': 'off',
                  'options': list([
                    'off',
                    'on',
                  ]),
                  'raw': '6106',
                }),
              }),
            }),
            dict({
              'cycle': '23',
              'supportedOptions': dict({
                'keepFresh': dict({
                  'default': 'on',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '660F',
                }),
                'sanitize': dict({
                  'default': 'off',
                  'options': list([
                    'off',
                  ]),
                  'raw': '6102',
                }),
              }),
            }),
            dict({
              'cycle': '32',
              'supportedOptions': dict({
                'keepFresh': dict({
                  'default': 'on',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '660F',
                }),
                'sanitize': dict({
                  'default': 'off',
                  'options': list([
                    'off',
                  ]),
                  'raw': '6102',
                }),
              }),
            }),
            dict({
              'cycle': '09',
              'supportedOptions': dict({
                'keepFresh': dict({
                  'default': 'on',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '660F',
                }),
                'sanitize': dict({
                  'default': 'off',
                  'options': list([
                    'off',
                  ]),
                  'raw': '6102',
                }),
              }),
            }),
            dict({
              'cycle': '12',
              'supportedOptions': dict({
                'keepFresh': dict({
                  'default': 'on',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '660F',
                }),
                'sanitize': dict({
                  'default': 'off',
                  'options': list([
                    'off',
                  ]),
                  'raw': '6102',
                }),
              }),
            }),
            dict({
              'cycle': '0C',
              'supportedOptions': dict({
                'keepFresh': dict({
                  'default': 'on',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '660F',
                }),
                'sanitize': dict({
                  'default': 'off',
                  'options': list([
                    'off',
                  ]),
                  'raw': '6102',
                }),
              }),
            }),
            dict({
              'cycle': '31',
              'supportedOptions': dict({
                'keepFresh': dict({
                  'default': 'on',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '660F',
                }),
                'sanitize': dict({
                  'default': 'off',
                  'options': list([
                    'off',
                  ]),
                  'raw': '6102',
                }),
              }),
            }),
            dict({
              'cycle': '0B',
              'supportedOptions': dict({
                'keepFresh': dict({
                  'default': 'on',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '660F',
                }),
                'sanitize': dict({
                  'default': 'off',
                  'options': list([
                    'off',
                  ]),
                  'raw': '6102',
                }),
              }),
            }),
            dict({
              'cycle': '10',
              'supportedOptions': dict({
                'keepFresh': dict({
                  'default': 'on',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '660F',
                }),
                'sanitize': dict({
                  'default': 'off',
                  'options': list([
                    'off',
                  ]),
                  'raw': '6102',
                }),
              }),
            }),
            dict({
              'cycle': '0A',
              'supportedOptions': dict({
                'keepFresh': dict({
                  'default': 'on',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '660F',
                }),
                'sanitize': dict({
                  'default': 'off',
                  'options': list([
                    'off',
                    'on',
                  ]),
                  'raw': '6106',
                }),
              }),
            }),
            dict({
              'cycle': '14',
              'supportedOptions': dict({
                'keepFresh': dict({
                  'default': 'on',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '660F',
                }),
                'sanitize': dict({
                  'default': 'off',
                  'options': list([
                    'off',
                  ]),
                  'raw': '6102',
                }),
              }),
            }),
            dict({
              'cycle': '13',
              'supportedOptions': dict({
                'keepFresh': dict({
                  'default': 'on',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '660F',
                }),
                'sanitize': dict({
                  'default': 'off',
                  'options': list([
                    'off',
                    'on',
                  ]),
                  'raw': '6106',
                }),
              }),
            }),
            dict({
              'cycle': '16',
              'supportedOptions': dict({
                'keepFresh': dict({
                  'default': 'on',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '660F',
                }),
                'sanitize': dict({
                  'default': 'off',
                  'options': list([
                    'off',
                  ]),
                  'raw': '6102',
                }),
              }),
            }),
            dict({
              'cycle': '24',
              'supportedOptions': dict({
                'keepFresh': dict({
                  'default': 'on',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '660F',
                }),
                'sanitize': dict({
                  'default': 'on',
                  'options': list([
                    'off',
                    'on',
                  ]),
                  'raw': '6206',
                }),
              }),
            }),
            dict({
              'cycle': '25',
              'supportedOptions': dict({
                'keepFresh': dict({
                  'default': 'on',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '660F',
                }),
                'sanitize': dict({
                  'default': 'on',
                  'options': list([
                    'off',
                    'on',
                  ]),
                  'raw': '6206',
                }),
              }),
            }),
            dict({
              'cycle': '2F',
              'supportedOptions': dict({
                'keepFresh': dict({
                  'default': 'on',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '660F',
                }),
                'sanitize': dict({
                  'default': 'on',
                  'options': list([
                    'off',
                    'on',
                  ]),
                  'raw': '6206',
                }),
              }),
            }),
            dict({
              'cycle': '20',
              'supportedOptions': dict({
                'keepFresh': dict({
                  'default': 'on',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '660F',
                }),
                'sanitize': dict({
                  'default': 'on',
                  'options': list([
                    'on',
                  ]),
                  'raw': '6204',
                }),
              }),
            }),
            dict({
              'cycle': '0F',
              'supportedOptions': dict({
                'keepFresh': dict({
                  'default': 'off',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '66F0',
                }),
                'sanitize': dict({
                  'default': 'on',
                  'options': list([
                    'on',
                  ]),
                  'raw': '6204',
                }),
              }),
            }),
            dict({
              'cycle': '27',
              'supportedOptions': dict({
                'keepFresh': dict({
                  'default': 'on',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '660F',
                }),
                'sanitize': dict({
                  'default': 'off',
                  'options': list([
                    'off',
                  ]),
                  'raw': '6102',
                }),
              }),
            }),
            dict({
              'cycle': '30',
              'supportedOptions': dict({
                'keepFresh': dict({
                  'default': 'on',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '660F',
                }),
                'sanitize': dict({
                  'default': 'off',
                  'options': list([
                    'off',
                  ]),
                  'raw': '6102',
                }),
              }),
            }),
            dict({
              'cycle': '15',
              'supportedOptions': dict({
                'keepFresh': dict({
                  'default': 'on',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '660F',
                }),
                'sanitize': dict({
                  'default': 'off',
                  'options': list([
                    'off',
                  ]),
                  'raw': '6102',
                }),
              }),
            }),
            dict({
              'cycle': '1A',
              'supportedOptions': dict({
                'keepFresh': dict({
                  'default': 'on',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '660F',
                }),
                'sanitize': dict({
                  'default': 'off',
                  'options': list([
                    'off',
                  ]),
                  'raw': '6102',
                }),
              }),
            }),
            dict({
              'cycle': '1B',
              'supportedOptions': dict({
                'keepFresh': dict({
                  'default': 'on',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '660F',
                }),
                'sanitize': dict({
                  'default': 'off',
                  'options': list([
                    'off',
                  ]),
                  'raw': '6102',
                }),
              }),
            }),
            dict({
              'cycle': '1C',
              'supportedOptions': dict({
                'keepFresh': dict({
                  'default': 'on',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '660F',
                }),
                'sanitize': dict({
                  'default': 'off',
                  'options': list([
                    'off',
                  ]),
                  'raw': '6102',
                }),
              }),
            }),
            dict({
              'cycle': '2D',
              'supportedOptions': dict({
                'keepFresh': dict({
                  'default': 'on',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '660F',
                }),
                'sanitize': dict({
                  'default': 'off',
                  'options': list([
                    'off',
                  ]),
                  'raw': '6102',
                }),
              }),
            }),
            dict({
              'cycle': '07',
              'supportedOptions': dict({
                'keepFresh': dict({
                  'default': 'off',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '66F0',
                }),
                'sanitize': dict({
                  'default': 'off',
                  'options': list([
                    'off',
                  ]),
                  'raw': '6102',
                }),
              }),
            }),
            dict({
              'cycle': '08',
              'supportedOptions': dict({
                'keepFresh': dict({
                  'default': 'off',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '66F0',
                }),
                'sanitize': dict({
                  'default': 'off',
                  'options': list([
                    'off',
                  ]),
                  'raw': '6102',
                }),
              }),
            }),
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_STEAM_CLOSET_CYCLE_PRESET: 'samsungce.steamClosetCyclePreset'>: dict({
        <Attribute.MAX_NUMBER_OF_PRESETS: 'maxNumberOfPresets'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 10,
        }),
        <Attribute.PRESETS: 'presets'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'F1': dict({
            }),
            'F2': dict({
            }),
            'F3': dict({
            }),
            'F4': dict({
            }),
            'F5': dict({
            }),
            'F6': dict({
            }),
            'F7': dict({
            }),
            'F8': dict({
            }),
            'F9': dict({
            }),
            'FA': dict({
            }),
          }),
        }),
      }),
      <Capability.SAMSUNG_CE_STEAM_CLOSET_DELAY_END: 'samsungce.steamClosetDelayEnd'>: dict({
        <Attribute.REMAINING_TIME: 'remainingTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 0,
        }),
      }),
      <Capability.SAMSUNG_CE_STEAM_CLOSET_KEEP_FRESH_MODE: 'samsungce.steamClosetKeepFreshMode'>: dict({
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.SAMSUNG_CE_STEAM_CLOSET_SANITIZE_MODE: 'samsungce.steamClosetSanitizeMode'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.SAMSUNG_CE_WELCOME_MESSAGE: 'samsungce.welcomeMessage'>: dict({
        <Attribute.WELCOME_MESSAGE: 'welcomeMessage'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>: dict({
        <Attribute.DUMP_TYPE: 'dumpType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'file',
        }),
        <Attribute.ENDPOINT: 'endpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'SSM',
        }),
        <Attribute.LOG_TYPE: 'logType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'errCode',
            'dump',
          ]),
        }),
        <Attribute.MIN_VERSION: 'minVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '1.0',
        }),
        <Attribute.MN_ID: 'mnId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '0AJT',
        }),
        <Attribute.PROTOCOL_TYPE: 'protocolType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'wifi_https',
        }),
        <Attribute.SETUP_ID: 'setupId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'A00',
        }),
        <Attribute.SIGNIN_PERMISSION: 'signinPermission'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TS_ID: 'tsId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>: dict({
        <Attribute.AUTO_RECONNECTION: 'autoReconnection'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MIN_VERSION: 'minVersion'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.PROTOCOL_TYPE: 'protocolType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_AUTH_TYPE: 'supportedAuthType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_WI_FI_FREQ: 'supportedWiFiFreq'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[da_wm_wd_00001]
  dict({
    'hca.main': dict({
      <Capability.HCA_DRYER_MODE: 'hca.dryerMode'>: dict({
        <Attribute.MODE: 'mode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 11, 23000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'normal',
        }),
        <Attribute.SUPPORTED_MODES: 'supportedModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 497000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'normal',
            'timeDry',
            'quickDry',
          ]),
        }),
      }),
    }),
    'main': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 7, 5, 16, 4, 6, 674000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'samsungce.dryerCyclePreset',
            'samsungce.welcomeMessage',
            'samsungce.dongleSoftwareInstallation',
            'sec.wifiConfiguration',
            'samsungce.quickControl',
            'samsungce.deviceInfoPrivate',
            'demandResponseLoadControl',
            'samsungce.dryerFreezePrevent',
            'sec.diagnosticsInformation',
          ]),
        }),
      }),
      <Capability.CUSTOM_DRYER_DRY_LEVEL: 'custom.dryerDryLevel'>: dict({
        <Attribute.DRYER_DRY_LEVEL: 'dryerDryLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 840000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'normal',
        }),
        <Attribute.SUPPORTED_DRYER_DRY_LEVEL: 'supportedDryerDryLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 1, 22, 54, 28, 224000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'none',
            'damp',
            'less',
            'normal',
            'more',
            'very',
          ]),
        }),
      }),
      <Capability.CUSTOM_DRYER_WRINKLE_PREVENT: 'custom.dryerWrinklePrevent'>: dict({
        <Attribute.DRYER_WRINKLE_PREVENT: 'dryerWrinklePrevent'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 840000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 497000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
      }),
      <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>: dict({
        <Attribute.DR_MAX_DURATION: 'drMaxDuration'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_INFO: 'energySavingInfo'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_LEVEL: 'energySavingLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_OPERATION: 'energySavingOperation'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_OPERATION_SUPPORT: 'energySavingOperationSupport'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_SUPPORT: 'energySavingSupport'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 6, 14, 6, 49, 2, 721000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.ENERGY_TYPE: 'energyType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 6, 14, 6, 49, 2, 183000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2.0',
        }),
        <Attribute.NOTIFICATION_TEMPLATE_I_D: 'notificationTemplateID'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_ENERGY_SAVING_LEVELS: 'supportedEnergySavingLevels'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_JOB_BEGINNING_STATUS: 'custom.jobBeginningStatus'>: dict({
        <Attribute.JOB_BEGINNING_STATUS: 'jobBeginningStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_SUPPORTED_OPTIONS: 'custom.supportedOptions'>: dict({
        <Attribute.COURSE: 'course'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REFERENCE_TABLE: 'referenceTable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 11, 23000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'id': 'Table_00',
          }),
        }),
        <Attribute.SUPPORTED_COURSES: 'supportedCourses'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 497000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            '01',
            '9C',
            'A5',
            '9E',
            '9B',
            '27',
            'E5',
            'A0',
            'A4',
            'A6',
            'A3',
            'A2',
          ]),
        }),
      }),
      <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>: dict({
        <Attribute.DEMAND_RESPONSE_LOAD_CONTROL_STATUS: 'drlcStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.DRYER_OPERATING_STATE: 'dryerOperatingState'>: dict({
        <Attribute.COMPLETION_TIME: 'completionTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 962000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2025-02-08T19:25:10Z',
        }),
        <Attribute.DRYER_JOB_STATE: 'dryerJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 962000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
        <Attribute.MACHINE_STATE: 'machineState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 962000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'stop',
        }),
        <Attribute.SUPPORTED_MACHINE_STATES: 'supportedMachineStates'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 962000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'stop',
            'run',
            'pause',
          ]),
        }),
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': dict({
            'href': '/information/vs/0',
          }),
          'timestamp': datetime.datetime(2023, 8, 6, 22, 48, 43, 192000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'payload': dict({
              'if': list([
                'oic.if.baseline',
                'oic.if.a',
              ]),
              'rt': list([
                'x.com.samsung.da.information',
              ]),
              'x.com.samsung.da.description': 'DA_WM_A51_20_COMMON_DV6300R/DC92-02385A_0090',
              'x.com.samsung.da.items': list([
                dict({
                  'x.com.samsung.da.description': 'DA_WM_A51_20_COMMON|20233741|3000000100111100020B000000000000',
                  'x.com.samsung.da.id': '0',
                  'x.com.samsung.da.newVersionAvailable': '0',
                  'x.com.samsung.da.number': '02198A220728(E256)',
                  'x.com.samsung.da.type': 'Software',
                }),
                dict({
                  'x.com.samsung.da.description': 'DA_WM_A51_20_COMMON',
                  'x.com.samsung.da.id': '1',
                  'x.com.samsung.da.newVersionAvailable': '0',
                  'x.com.samsung.da.number': '18112816,20112625',
                  'x.com.samsung.da.type': 'Firmware',
                }),
              ]),
              'x.com.samsung.da.modelNum': 'DA_WM_A51_20_COMMON|20233741|3000000100111100020B000000000000',
              'x.com.samsung.da.otnDUID': '7XCDM6YAIRCGM',
              'x.com.samsung.da.serialNum': 'FFFFFFFFFFFFFFF',
            }),
          }),
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '02f7256e-8353-5bdd-547f-bd5b1647e01b',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'res.1.1.0,sh.1.1.0',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OCF_FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_WM_A51_20_COMMON_30230708',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ARTIK051',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_WM_A51_20_COMMON|20233741|3000000100111100020B000000000000',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TizenRT 1.0 + IPv6',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DAWIT 2.0',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[dryer] Samsung',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '02f7256e-8353-5bdd-547f-bd5b1647e01b',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA-WM-WD-000001',
        }),
      }),
      <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>: dict({
        <Attribute.POWER_CONSUMPTION: 'powerConsumption'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 11, 53000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'deltaEnergy': 0,
            'end': '2025-02-08T18:10:11Z',
            'energy': 4495500,
            'energySaved': 0,
            'persistedEnergy': 0,
            'power': 0,
            'powerEnergy': 0.0,
            'start': '2025-02-07T04:00:19Z',
          }),
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>: dict({
        <Attribute.REMOTE_CONTROL_ENABLED: 'remoteControlEnabled'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 970000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'false',
        }),
      }),
      <Capability.SAMSUNG_CE_DETERGENT_ORDER: 'samsungce.detergentOrder'>: dict({
        <Attribute.ALARM_ENABLED: 'alarmEnabled'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 497000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.ORDER_THRESHOLD: 'orderThreshold'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 497000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
      }),
      <Capability.SAMSUNG_CE_DETERGENT_STATE: 'samsungce.detergentState'>: dict({
        <Attribute.DETERGENT_TYPE: 'detergentType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 1, 22, 54, 28, 372000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
        <Attribute.DOSAGE: 'dosage'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 497000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.INITIAL_AMOUNT: 'initialAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 497000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.REMAINING_AMOUNT: 'remainingAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 497000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
      }),
      <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>: dict({
        <Attribute.BINARY_ID: 'binaryId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 11, 113000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_WM_A51_20_COMMON',
        }),
        <Attribute.DESCRIPTION: 'description'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 11, 113000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_WM_A51_20_COMMON_DV6300R/DC92-02385A_0090',
        }),
        <Attribute.MICOM_ASSAY_CODE: 'micomAssayCode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 11, 113000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '20233741',
        }),
        <Attribute.MODEL_CLASSIFICATION_CODE: 'modelClassificationCode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 11, 113000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '3000000100111100020B000000000000',
        }),
        <Attribute.MODEL_NAME: 'modelName'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RELEASE_YEAR: 'releaseYear'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER: 'serialNumber'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER_EXTRA: 'serialNumberExtra'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_DONGLE_SOFTWARE_INSTALLATION: 'samsungce.dongleSoftwareInstallation'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 6, 14, 6, 49, 2, 183000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'completed',
        }),
      }),
      <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>: dict({
        <Attribute.VERSION_NUMBER: 'versionNumber'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 3, 2, 59, 11, 115000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 24110101,
        }),
      }),
      <Capability.SAMSUNG_CE_DRYER_AUTO_CYCLE_LINK: 'samsungce.dryerAutoCycleLink'>: dict({
        <Attribute.DRYER_AUTO_CYCLE_LINK: 'dryerAutoCycleLink'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 11, 986000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'on',
        }),
      }),
      <Capability.SAMSUNG_CE_DRYER_CYCLE: 'samsungce.dryerCycle'>: dict({
        <Attribute.DRYER_CYCLE: 'dryerCycle'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 11, 23000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Table_00_Course_01',
        }),
        <Attribute.REFERENCE_TABLE: 'referenceTable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 11, 23000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'id': 'Table_00',
          }),
        }),
        <Attribute.SPECIALIZED_FUNCTION_CLASSIFICATION: 'specializedFunctionClassification'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 497000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 4,
        }),
        <Attribute.SUPPORTED_CYCLES: 'supportedCycles'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 884000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'cycle': '01',
              'supportedOptions': dict({
                'dryingLevel': dict({
                  'default': 'normal',
                  'options': list([
                    'damp',
                    'less',
                    'normal',
                    'more',
                    'very',
                  ]),
                  'raw': 'D33E',
                }),
                'dryingTemperature': dict({
                  'default': 'medium',
                  'options': list([
                    'medium',
                  ]),
                  'raw': '8410',
                }),
              }),
            }),
            dict({
              'cycle': '9C',
              'supportedOptions': dict({
                'dryingLevel': dict({
                  'default': 'normal',
                  'options': list([
                    'damp',
                    'less',
                    'normal',
                    'more',
                    'very',
                  ]),
                  'raw': 'D33E',
                }),
                'dryingTemperature': dict({
                  'default': 'high',
                  'options': list([
                    'high',
                  ]),
                  'raw': '8520',
                }),
              }),
            }),
            dict({
              'cycle': 'A5',
              'supportedOptions': dict({
                'dryingLevel': dict({
                  'default': 'normal',
                  'options': list([
                    'damp',
                    'less',
                    'normal',
                    'more',
                    'very',
                  ]),
                  'raw': 'D33E',
                }),
                'dryingTemperature': dict({
                  'default': 'high',
                  'options': list([
                    'high',
                  ]),
                  'raw': '8520',
                }),
              }),
            }),
            dict({
              'cycle': '9E',
              'supportedOptions': dict({
                'dryingLevel': dict({
                  'default': 'normal',
                  'options': list([
                    'damp',
                    'less',
                    'normal',
                    'more',
                    'very',
                  ]),
                  'raw': 'D33E',
                }),
                'dryingTemperature': dict({
                  'default': 'mediumLow',
                  'options': list([
                    'mediumLow',
                  ]),
                  'raw': '8308',
                }),
              }),
            }),
            dict({
              'cycle': '9B',
              'supportedOptions': dict({
                'dryingLevel': dict({
                  'default': 'very',
                  'options': list([
                    'very',
                  ]),
                  'raw': 'D520',
                }),
                'dryingTemperature': dict({
                  'default': 'high',
                  'options': list([
                    'high',
                  ]),
                  'raw': '8520',
                }),
              }),
            }),
            dict({
              'cycle': '27',
              'supportedOptions': dict({
                'dryingLevel': dict({
                  'default': 'none',
                  'options': list([
                  ]),
                  'raw': 'D000',
                }),
                'dryingTemperature': dict({
                  'default': 'high',
                  'options': list([
                    'high',
                  ]),
                  'raw': '8520',
                }),
              }),
            }),
            dict({
              'cycle': 'E5',
              'supportedOptions': dict({
                'dryingLevel': dict({
                  'default': 'none',
                  'options': list([
                  ]),
                  'raw': 'D000',
                }),
                'dryingTemperature': dict({
                  'default': 'none',
                  'options': list([
                  ]),
                  'raw': '8000',
                }),
              }),
            }),
            dict({
              'cycle': 'A0',
              'supportedOptions': dict({
                'dryingLevel': dict({
                  'default': 'none',
                  'options': list([
                  ]),
                  'raw': 'D000',
                }),
                'dryingTemperature': dict({
                  'default': 'none',
                  'options': list([
                  ]),
                  'raw': '8000',
                }),
              }),
            }),
            dict({
              'cycle': 'A4',
              'supportedOptions': dict({
                'dryingLevel': dict({
                  'default': 'none',
                  'options': list([
                  ]),
                  'raw': 'D000',
                }),
                'dryingTemperature': dict({
                  'default': 'high',
                  'options': list([
                    'extraLow',
                    'low',
                    'mediumLow',
                    'medium',
                    'high',
                  ]),
                  'raw': '853E',
                }),
              }),
            }),
            dict({
              'cycle': 'A6',
              'supportedOptions': dict({
                'dryingLevel': dict({
                  'default': 'none',
                  'options': list([
                  ]),
                  'raw': 'D000',
                }),
                'dryingTemperature': dict({
                  'default': 'high',
                  'options': list([
                    'high',
                  ]),
                  'raw': '8520',
                }),
              }),
            }),
            dict({
              'cycle': 'A3',
              'supportedOptions': dict({
                'dryingLevel': dict({
                  'default': 'normal',
                  'options': list([
                    'normal',
                  ]),
                  'raw': 'D308',
                }),
                'dryingTemperature': dict({
                  'default': 'medium',
                  'options': list([
                    'medium',
                  ]),
                  'raw': '8410',
                }),
              }),
            }),
            dict({
              'cycle': 'A2',
              'supportedOptions': dict({
                'dryingLevel': dict({
                  'default': 'normal',
                  'options': list([
                    'damp',
                    'less',
                    'normal',
                    'more',
                    'very',
                  ]),
                  'raw': 'D33E',
                }),
                'dryingTemperature': dict({
                  'default': 'extraLow',
                  'options': list([
                    'extraLow',
                  ]),
                  'raw': '8102',
                }),
              }),
            }),
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_DRYER_CYCLE_PRESET: 'samsungce.dryerCyclePreset'>: dict({
        <Attribute.MAX_NUMBER_OF_PRESETS: 'maxNumberOfPresets'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 990000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 10,
        }),
        <Attribute.PRESETS: 'presets'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_DRYER_DELAY_END: 'samsungce.dryerDelayEnd'>: dict({
        <Attribute.REMAINING_TIME: 'remainingTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 962000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 0,
        }),
      }),
      <Capability.SAMSUNG_CE_DRYER_DRYING_TEMPERATURE: 'samsungce.dryerDryingTemperature'>: dict({
        <Attribute.DRYING_TEMPERATURE: 'dryingTemperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 840000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'medium',
        }),
        <Attribute.SUPPORTED_DRYING_TEMPERATURE: 'supportedDryingTemperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 884000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'none',
            'extraLow',
            'low',
            'mediumLow',
            'medium',
            'high',
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_DRYER_DRYING_TIME: 'samsungce.dryerDryingTime'>: dict({
        <Attribute.DRYING_TIME: 'dryingTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 840000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': '0',
        }),
        <Attribute.SUPPORTED_DRYING_TIME: 'supportedDryingTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 1, 22, 54, 28, 224000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            '0',
            '20',
            '30',
            '40',
            '50',
            '60',
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_DRYER_FREEZE_PREVENT: 'samsungce.dryerFreezePrevent'>: dict({
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_DRYER_OPERATING_STATE: 'samsungce.dryerOperatingState'>: dict({
        <Attribute.DRYER_JOB_STATE: 'dryerJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 4, 0, 18, 186000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 4, 0, 18, 186000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 4, 0, 18, 186000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 1,
        }),
        <Attribute.REMAINING_TIME: 'remainingTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 4, 0, 18, 186000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 75,
        }),
        <Attribute.REMAINING_TIME_STR: 'remainingTimeStr'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 4, 0, 18, 186000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '01:15',
        }),
        <Attribute.SCHEDULED_JOBS: 'scheduledJobs'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 497000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'jobName': 'drying',
              'timeInMin': 57,
            }),
            dict({
              'jobName': 'cooling',
              'timeInMin': 3,
            }),
          ]),
        }),
        <Attribute.SUPPORTED_OPERATING_STATES: 'supportedOperatingStates'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 11, 1, 13, 43, 26, 961000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'ready',
            'running',
            'paused',
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_KIDS_LOCK: 'samsungce.kidsLock'>: dict({
        <Attribute.LOCK_STATE: 'lockState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 825000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'unlocked',
        }),
      }),
      <Capability.SAMSUNG_CE_QUICK_CONTROL: 'samsungce.quickControl'>: dict({
        <Attribute.VERSION: 'version'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>: dict({
        <Attribute.AVAILABLE_MODULES: 'availableModules'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 2, 0, 29, 53, 432000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
        <Attribute.LAST_UPDATED_DATE: 'lastUpdatedDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEW_VERSION_AVAILABLE: 'newVersionAvailable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 2, 0, 29, 53, 432000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OTN_D_U_I_D: 'otnDUID'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 11, 113000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '7XCDM6YAIRCGM',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TARGET_MODULE: 'targetModule'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WELCOME_MESSAGE: 'samsungce.welcomeMessage'>: dict({
        <Attribute.WELCOME_MESSAGE: 'welcomeMessage'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>: dict({
        <Attribute.DUMP_TYPE: 'dumpType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENDPOINT: 'endpoint'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LOG_TYPE: 'logType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MIN_VERSION: 'minVersion'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MN_ID: 'mnId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.PROTOCOL_TYPE: 'protocolType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SETUP_ID: 'setupId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SIGNIN_PERMISSION: 'signinPermission'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TS_ID: 'tsId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>: dict({
        <Attribute.AUTO_RECONNECTION: 'autoReconnection'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MIN_VERSION: 'minVersion'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.PROTOCOL_TYPE: 'protocolType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_AUTH_TYPE: 'supportedAuthType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_WI_FI_FREQ: 'supportedWiFiFreq'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 911000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[da_wm_wm_000001]
  dict({
    'hca.main': dict({
      <Capability.HCA_WASHER_MODE: 'hca.washerMode'>: dict({
        <Attribute.MODE: 'mode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 623000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'normal',
        }),
        <Attribute.SUPPORTED_MODES: 'supportedModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 152000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'normal',
            'quickWash',
          ]),
        }),
      }),
    }),
    'main': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 7, 1, 16, 13, 35, 173000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'samsungce.autoDispenseDetergent',
            'samsungce.autoDispenseSoftener',
            'samsungce.waterConsumptionReport',
            'samsungce.washerCyclePreset',
            'samsungce.welcomeMessage',
            'samsungce.dongleSoftwareInstallation',
            'sec.wifiConfiguration',
            'samsungce.quickControl',
            'samsungce.deviceInfoPrivate',
            'samsungce.energyPlanner',
            'demandResponseLoadControl',
            'samsungce.softenerAutoReplenishment',
            'samsungce.softenerOrder',
            'samsungce.softenerState',
            'samsungce.washerBubbleSoak',
            'samsungce.washerFreezePrevent',
            'custom.dryerDryLevel',
            'samsungce.washerWaterLevel',
            'samsungce.washerWaterValve',
            'samsungce.washerWashingTime',
            'custom.washerAutoDetergent',
            'custom.washerAutoSoftener',
          ]),
        }),
      }),
      <Capability.CUSTOM_DRYER_DRY_LEVEL: 'custom.dryerDryLevel'>: dict({
        <Attribute.DRYER_DRY_LEVEL: 'dryerDryLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_DRYER_DRY_LEVEL: 'supportedDryerDryLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>: dict({
        <Attribute.DR_MAX_DURATION: 'drMaxDuration'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 6, 15, 14, 11, 37, 255000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 99999999,
        }),
        <Attribute.ENERGY_SAVING_INFO: 'energySavingInfo'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_LEVEL: 'energySavingLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_OPERATION: 'energySavingOperation'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_OPERATION_SUPPORT: 'energySavingOperationSupport'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 6, 15, 14, 11, 37, 255000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.ENERGY_SAVING_SUPPORT: 'energySavingSupport'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 6, 15, 14, 26, 38, 584000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.ENERGY_TYPE: 'energyType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 6, 15, 14, 11, 34, 909000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2.0',
        }),
        <Attribute.NOTIFICATION_TEMPLATE_I_D: 'notificationTemplateID'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_ENERGY_SAVING_LEVELS: 'supportedEnergySavingLevels'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_JOB_BEGINNING_STATUS: 'custom.jobBeginningStatus'>: dict({
        <Attribute.JOB_BEGINNING_STATUS: 'jobBeginningStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_SUPPORTED_OPTIONS: 'custom.supportedOptions'>: dict({
        <Attribute.COURSE: 'course'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REFERENCE_TABLE: 'referenceTable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 623000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'id': 'Table_00',
          }),
        }),
        <Attribute.SUPPORTED_COURSES: 'supportedCourses'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 152000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            '01',
            '70',
            '55',
            '71',
            '72',
            '77',
            'E5',
            '57',
            '73',
            '74',
            '75',
            '78',
          ]),
        }),
      }),
      <Capability.CUSTOM_WASHER_AUTO_DETERGENT: 'custom.washerAutoDetergent'>: dict({
        <Attribute.WASHER_AUTO_DETERGENT: 'washerAutoDetergent'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_WASHER_AUTO_SOFTENER: 'custom.washerAutoSoftener'>: dict({
        <Attribute.WASHER_AUTO_SOFTENER: 'washerAutoSoftener'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_WASHER_RINSE_CYCLES: 'custom.washerRinseCycles'>: dict({
        <Attribute.SUPPORTED_WASHER_RINSE_CYCLES: 'supportedWasherRinseCycles'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 760000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            '0',
            '1',
            '2',
            '3',
            '4',
            '5',
          ]),
        }),
        <Attribute.WASHER_RINSE_CYCLES: 'washerRinseCycles'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 691000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2',
        }),
      }),
      <Capability.CUSTOM_WASHER_SOIL_LEVEL: 'custom.washerSoilLevel'>: dict({
        <Attribute.SUPPORTED_WASHER_SOIL_LEVEL: 'supportedWasherSoilLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 760000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'none',
            'extraLight',
            'light',
            'normal',
            'heavy',
            'extraHeavy',
          ]),
        }),
        <Attribute.WASHER_SOIL_LEVEL: 'washerSoilLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 691000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'normal',
        }),
      }),
      <Capability.CUSTOM_WASHER_SPIN_LEVEL: 'custom.washerSpinLevel'>: dict({
        <Attribute.SUPPORTED_WASHER_SPIN_LEVEL: 'supportedWasherSpinLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 760000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'rinseHold',
            'noSpin',
            'low',
            'medium',
            'high',
            'extraHigh',
          ]),
        }),
        <Attribute.WASHER_SPIN_LEVEL: 'washerSpinLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 691000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'high',
        }),
      }),
      <Capability.CUSTOM_WASHER_WATER_TEMPERATURE: 'custom.washerWaterTemperature'>: dict({
        <Attribute.SUPPORTED_WASHER_WATER_TEMPERATURE: 'supportedWasherWaterTemperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 760000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'none',
            'tapCold',
            'cold',
            'warm',
            'hot',
            'extraHot',
          ]),
        }),
        <Attribute.WASHER_WATER_TEMPERATURE: 'washerWaterTemperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 691000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'warm',
        }),
      }),
      <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>: dict({
        <Attribute.DEMAND_RESPONSE_LOAD_CONTROL_STATUS: 'drlcStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': dict({
            'href': '/information/vs/0',
          }),
          'timestamp': datetime.datetime(2023, 8, 6, 16, 52, 15, 994000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'payload': dict({
              'if': list([
                'oic.if.baseline',
                'oic.if.a',
              ]),
              'rt': list([
                'x.com.samsung.da.information',
              ]),
              'x.com.samsung.da.description': 'DA_WM_TP2_20_COMMON_WF6300R/DC92-02338B_0080',
              'x.com.samsung.da.diagDumpType': 'file',
              'x.com.samsung.da.diagEndPoint': 'SSM',
              'x.com.samsung.da.diagLogType': list([
                'errCode',
                'dump',
              ]),
              'x.com.samsung.da.diagMinVersion': '1.0',
              'x.com.samsung.da.diagMnid': '0AJT',
              'x.com.samsung.da.diagProtocolType': 'WIFI_HTTPS',
              'x.com.samsung.da.diagSetupid': '210',
              'x.com.samsung.da.items': list([
                dict({
                  'x.com.samsung.da.description': 'DA_WM_TP2_20_COMMON|20233741|2001000100131100022B010000000000',
                  'x.com.samsung.da.id': '0',
                  'x.com.samsung.da.newVersionAvailable': '0',
                  'x.com.samsung.da.number': '02674A220725(F541)',
                  'x.com.samsung.da.type': 'Software',
                }),
                dict({
                  'x.com.samsung.da.description': 'DA_WM_TP2_20_COMMON',
                  'x.com.samsung.da.id': '1',
                  'x.com.samsung.da.newVersionAvailable': '0',
                  'x.com.samsung.da.number': '18112816,20050607',
                  'x.com.samsung.da.type': 'Firmware',
                }),
              ]),
              'x.com.samsung.da.modelNum': 'DA_WM_TP2_20_COMMON|20233741|2001000100131100022B010000000000',
              'x.com.samsung.da.otnDUID': 'U7CNQWBWJM5U4',
              'x.com.samsung.da.serialNum': '01FW57AR401623N',
            }),
          }),
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 131000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'f984b91d-f250-9d42-3436-33f09a422a47',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 131000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'res.1.1.0,sh.1.1.0',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 131000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OCF_FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 131000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_WM_TP2_20_COMMON_30230804',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 131000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'MediaTek',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 131000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 131000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 131000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_WM_TP2_20_COMMON|20233741|2001000100131100022B010000000000',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 131000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TizenRT 2.0 + IPv6',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 131000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DAWIT 2.0',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 131000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 131000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[washer] Samsung',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 131000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'f984b91d-f250-9d42-3436-33f09a422a47',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 131000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA-WM-WM-000001',
        }),
      }),
      <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>: dict({
        <Attribute.POWER_CONSUMPTION: 'powerConsumption'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 9, 45, 703000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'deltaEnergy': 0,
            'end': '2025-02-07T03:09:45Z',
            'energy': 352800,
            'energySaved': 0,
            'persistedEnergy': 0,
            'power': 0,
            'powerEnergy': 0.0,
            'start': '2025-02-07T03:09:24Z',
          }),
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>: dict({
        <Attribute.REMOTE_CONTROL_ENABLED: 'remoteControlEnabled'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 634000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'false',
        }),
      }),
      <Capability.SAMSUNG_CE_AUTO_DISPENSE_DETERGENT: 'samsungce.autoDispenseDetergent'>: dict({
        <Attribute.AMOUNT: 'amount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.AVAILABLE_TYPES: 'availableTypes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DENSITY: 'density'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RECOMMENDED_AMOUNT: 'recommendedAmount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REMAINING_AMOUNT: 'remainingAmount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_AMOUNT: 'supportedAmount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_DENSITY: 'supportedDensity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TYPE: 'type'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_AUTO_DISPENSE_SOFTENER: 'samsungce.autoDispenseSoftener'>: dict({
        <Attribute.AMOUNT: 'amount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DENSITY: 'density'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REMAINING_AMOUNT: 'remainingAmount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_AMOUNT: 'supportedAmount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_DENSITY: 'supportedDensity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_DETERGENT_AUTO_REPLENISHMENT: 'samsungce.detergentAutoReplenishment'>: dict({
        <Attribute.BABY_DETERGENT_ALARM_ENABLED: 'babyDetergentAlarmEnabled'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.BABY_DETERGENT_DOSAGE: 'babyDetergentDosage'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.BABY_DETERGENT_INITIAL_AMOUNT: 'babyDetergentInitialAmount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.BABY_DETERGENT_ORDER_THRESHOLD: 'babyDetergentOrderThreshold'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.BABY_DETERGENT_REMAINING_AMOUNT: 'babyDetergentRemainingAmount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.BABY_DETERGENT_TYPE: 'babyDetergentType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEUTRAL_DETERGENT_ALARM_ENABLED: 'neutralDetergentAlarmEnabled'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEUTRAL_DETERGENT_DOSAGE: 'neutralDetergentDosage'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEUTRAL_DETERGENT_INITIAL_AMOUNT: 'neutralDetergentInitialAmount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEUTRAL_DETERGENT_ORDER_THRESHOLD: 'neutralDetergentOrderThreshold'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEUTRAL_DETERGENT_REMAINING_AMOUNT: 'neutralDetergentRemainingAmount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEUTRAL_DETERGENT_TYPE: 'neutralDetergentType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REGULAR_DETERGENT_ALARM_ENABLED: 'regularDetergentAlarmEnabled'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 152000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.REGULAR_DETERGENT_DOSAGE: 'regularDetergentDosage'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 152000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.REGULAR_DETERGENT_INITIAL_AMOUNT: 'regularDetergentInitialAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 152000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.REGULAR_DETERGENT_ORDER_THRESHOLD: 'regularDetergentOrderThreshold'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 152000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.REGULAR_DETERGENT_REMAINING_AMOUNT: 'regularDetergentRemainingAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 152000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.REGULAR_DETERGENT_TYPE: 'regularDetergentType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 152000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
      }),
      <Capability.SAMSUNG_CE_DETERGENT_ORDER: 'samsungce.detergentOrder'>: dict({
        <Attribute.ALARM_ENABLED: 'alarmEnabled'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 152000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.ORDER_THRESHOLD: 'orderThreshold'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 152000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
      }),
      <Capability.SAMSUNG_CE_DETERGENT_STATE: 'samsungce.detergentState'>: dict({
        <Attribute.DETERGENT_TYPE: 'detergentType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 1, 22, 52, 19, 999000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
        <Attribute.DOSAGE: 'dosage'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 152000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.INITIAL_AMOUNT: 'initialAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 152000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.REMAINING_AMOUNT: 'remainingAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 152000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
      }),
      <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>: dict({
        <Attribute.BINARY_ID: 'binaryId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 453000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_WM_TP2_20_COMMON',
        }),
        <Attribute.DESCRIPTION: 'description'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 453000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_WM_TP2_20_COMMON_WF6300R/DC92-02338B_0080',
        }),
        <Attribute.MICOM_ASSAY_CODE: 'micomAssayCode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 453000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '20233741',
        }),
        <Attribute.MODEL_CLASSIFICATION_CODE: 'modelClassificationCode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 453000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2001000100131100022B010000000000',
        }),
        <Attribute.MODEL_NAME: 'modelName'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RELEASE_YEAR: 'releaseYear'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER: 'serialNumber'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER_EXTRA: 'serialNumberExtra'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_DONGLE_SOFTWARE_INSTALLATION: 'samsungce.dongleSoftwareInstallation'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 6, 15, 14, 11, 34, 909000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'completed',
        }),
      }),
      <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>: dict({
        <Attribute.VERSION_NUMBER: 'versionNumber'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 3, 2, 14, 52, 963000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 24110101,
        }),
      }),
      <Capability.SAMSUNG_CE_ENERGY_PLANNER: 'samsungce.energyPlanner'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.PLAN: 'plan'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_KIDS_LOCK: 'samsungce.kidsLock'>: dict({
        <Attribute.LOCK_STATE: 'lockState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 407000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'unlocked',
        }),
      }),
      <Capability.SAMSUNG_CE_QUICK_CONTROL: 'samsungce.quickControl'>: dict({
        <Attribute.VERSION: 'version'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTENER_AUTO_REPLENISHMENT: 'samsungce.softenerAutoReplenishment'>: dict({
        <Attribute.REGULAR_SOFTENER_ALARM_ENABLED: 'regularSoftenerAlarmEnabled'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REGULAR_SOFTENER_DOSAGE: 'regularSoftenerDosage'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REGULAR_SOFTENER_INITIAL_AMOUNT: 'regularSoftenerInitialAmount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REGULAR_SOFTENER_ORDER_THRESHOLD: 'regularSoftenerOrderThreshold'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REGULAR_SOFTENER_REMAINING_AMOUNT: 'regularSoftenerRemainingAmount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REGULAR_SOFTENER_TYPE: 'regularSoftenerType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTENER_ORDER: 'samsungce.softenerOrder'>: dict({
        <Attribute.ALARM_ENABLED: 'alarmEnabled'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ORDER_THRESHOLD: 'orderThreshold'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTENER_STATE: 'samsungce.softenerState'>: dict({
        <Attribute.DOSAGE: 'dosage'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.INITIAL_AMOUNT: 'initialAmount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REMAINING_AMOUNT: 'remainingAmount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SOFTENER_TYPE: 'softenerType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>: dict({
        <Attribute.AVAILABLE_MODULES: 'availableModules'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 1, 23, 36, 22, 798000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
        <Attribute.LAST_UPDATED_DATE: 'lastUpdatedDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEW_VERSION_AVAILABLE: 'newVersionAvailable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 548000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OTN_D_U_I_D: 'otnDUID'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 453000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'U7CNQWBWJM5U4',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TARGET_MODULE: 'targetModule'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 548000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
          }),
        }),
      }),
      <Capability.SAMSUNG_CE_WASHER_BUBBLE_SOAK: 'samsungce.washerBubbleSoak'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WASHER_CYCLE: 'samsungce.washerCycle'>: dict({
        <Attribute.REFERENCE_TABLE: 'referenceTable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 1, 22, 52, 20, 68000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'id': 'Table_00',
          }),
        }),
        <Attribute.SPECIALIZED_FUNCTION_CLASSIFICATION: 'specializedFunctionClassification'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 152000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 4,
        }),
        <Attribute.SUPPORTED_CYCLES: 'supportedCycles'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 760000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'cycle': '01',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'rinseCycle': dict({
                  'default': '2',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '923F',
                }),
                'soilLevel': dict({
                  'default': 'normal',
                  'options': list([
                    'extraLight',
                    'light',
                    'normal',
                    'heavy',
                    'extraHeavy',
                  ]),
                  'raw': 'C33E',
                }),
                'spinLevel': dict({
                  'default': 'high',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    'medium',
                    'high',
                    'extraHigh',
                  ]),
                  'raw': 'A43B',
                }),
                'waterTemperature': dict({
                  'default': 'warm',
                  'options': list([
                    'tapCold',
                    'cold',
                    'warm',
                    'hot',
                    'extraHot',
                  ]),
                  'raw': '833E',
                }),
              }),
            }),
            dict({
              'cycle': '70',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'rinseCycle': dict({
                  'default': '2',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '923F',
                }),
                'soilLevel': dict({
                  'default': 'extraHeavy',
                  'options': list([
                    'extraLight',
                    'light',
                    'normal',
                    'heavy',
                    'extraHeavy',
                  ]),
                  'raw': 'C53E',
                }),
                'spinLevel': dict({
                  'default': 'extraHigh',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    'low',
                    'medium',
                    'high',
                    'extraHigh',
                  ]),
                  'raw': 'A53F',
                }),
                'waterTemperature': dict({
                  'default': 'hot',
                  'options': list([
                    'tapCold',
                    'cold',
                    'warm',
                    'hot',
                    'extraHot',
                  ]),
                  'raw': '843E',
                }),
              }),
            }),
            dict({
              'cycle': '55',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'rinseCycle': dict({
                  'default': '2',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '923F',
                }),
                'soilLevel': dict({
                  'default': 'normal',
                  'options': list([
                    'extraLight',
                    'light',
                    'normal',
                    'heavy',
                    'extraHeavy',
                  ]),
                  'raw': 'C33E',
                }),
                'spinLevel': dict({
                  'default': 'high',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    'low',
                    'medium',
                    'high',
                    'extraHigh',
                  ]),
                  'raw': 'A43F',
                }),
                'waterTemperature': dict({
                  'default': 'warm',
                  'options': list([
                    'tapCold',
                    'cold',
                    'warm',
                    'hot',
                  ]),
                  'raw': '831E',
                }),
              }),
            }),
            dict({
              'cycle': '71',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'rinseCycle': dict({
                  'default': '2',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '923F',
                }),
                'soilLevel': dict({
                  'default': 'normal',
                  'options': list([
                    'extraLight',
                    'light',
                    'normal',
                    'heavy',
                    'extraHeavy',
                  ]),
                  'raw': 'C33E',
                }),
                'spinLevel': dict({
                  'default': 'low',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    'low',
                    'medium',
                  ]),
                  'raw': 'A20F',
                }),
                'waterTemperature': dict({
                  'default': 'warm',
                  'options': list([
                    'tapCold',
                    'cold',
                    'warm',
                  ]),
                  'raw': '830E',
                }),
              }),
            }),
            dict({
              'cycle': '72',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'rinseCycle': dict({
                  'default': '2',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '923F',
                }),
                'soilLevel': dict({
                  'default': 'normal',
                  'options': list([
                    'extraLight',
                    'light',
                    'normal',
                    'heavy',
                    'extraHeavy',
                  ]),
                  'raw': 'C33E',
                }),
                'spinLevel': dict({
                  'default': 'high',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    'low',
                    'medium',
                    'high',
                    'extraHigh',
                  ]),
                  'raw': 'A43F',
                }),
                'waterTemperature': dict({
                  'default': 'extraHot',
                  'options': list([
                    'extraHot',
                  ]),
                  'raw': '8520',
                }),
              }),
            }),
            dict({
              'cycle': '77',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'rinseCycle': dict({
                  'default': '2',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '923F',
                }),
                'soilLevel': dict({
                  'default': 'normal',
                  'options': list([
                    'extraLight',
                    'light',
                    'normal',
                    'heavy',
                    'extraHeavy',
                  ]),
                  'raw': 'C33E',
                }),
                'spinLevel': dict({
                  'default': 'low',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    'low',
                    'medium',
                    'high',
                  ]),
                  'raw': 'A21F',
                }),
                'waterTemperature': dict({
                  'default': 'warm',
                  'options': list([
                    'tapCold',
                    'cold',
                    'warm',
                  ]),
                  'raw': '830E',
                }),
              }),
            }),
            dict({
              'cycle': 'E5',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'rinseCycle': dict({
                  'default': '2',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '923F',
                }),
                'soilLevel': dict({
                  'default': 'extraHeavy',
                  'options': list([
                    'extraLight',
                    'light',
                    'normal',
                    'heavy',
                    'extraHeavy',
                  ]),
                  'raw': 'C53E',
                }),
                'spinLevel': dict({
                  'default': 'high',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    'low',
                    'medium',
                    'high',
                    'extraHigh',
                  ]),
                  'raw': 'A43F',
                }),
                'waterTemperature': dict({
                  'default': 'warm',
                  'options': list([
                    'tapCold',
                    'cold',
                    'warm',
                    'hot',
                  ]),
                  'raw': '831E',
                }),
              }),
            }),
            dict({
              'cycle': '57',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'rinseCycle': dict({
                  'default': '2',
                  'options': list([
                    '2',
                  ]),
                  'raw': '9204',
                }),
                'soilLevel': dict({
                  'default': 'none',
                  'options': list([
                  ]),
                  'raw': 'C000',
                }),
                'spinLevel': dict({
                  'default': 'extraHigh',
                  'options': list([
                    'extraHigh',
                  ]),
                  'raw': 'A520',
                }),
                'waterTemperature': dict({
                  'default': 'extraHot',
                  'options': list([
                    'extraHot',
                  ]),
                  'raw': '8520',
                }),
              }),
            }),
            dict({
              'cycle': '73',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'rinseCycle': dict({
                  'default': '1',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '913F',
                }),
                'soilLevel': dict({
                  'default': 'none',
                  'options': list([
                  ]),
                  'raw': 'C000',
                }),
                'spinLevel': dict({
                  'default': 'high',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    'low',
                    'medium',
                    'high',
                    'extraHigh',
                  ]),
                  'raw': 'A43F',
                }),
                'waterTemperature': dict({
                  'default': 'none',
                  'options': list([
                  ]),
                  'raw': '8000',
                }),
              }),
            }),
            dict({
              'cycle': '74',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'rinseCycle': dict({
                  'default': '2',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '923F',
                }),
                'soilLevel': dict({
                  'default': 'normal',
                  'options': list([
                    'extraLight',
                    'light',
                    'normal',
                    'heavy',
                    'extraHeavy',
                  ]),
                  'raw': 'C33E',
                }),
                'spinLevel': dict({
                  'default': 'low',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    'low',
                  ]),
                  'raw': 'A207',
                }),
                'waterTemperature': dict({
                  'default': 'warm',
                  'options': list([
                    'tapCold',
                    'cold',
                    'warm',
                  ]),
                  'raw': '830E',
                }),
              }),
            }),
            dict({
              'cycle': '75',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'rinseCycle': dict({
                  'default': '2',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                  ]),
                  'raw': '920F',
                }),
                'soilLevel': dict({
                  'default': 'normal',
                  'options': list([
                    'extraLight',
                    'light',
                    'normal',
                    'heavy',
                    'extraHeavy',
                  ]),
                  'raw': 'C33E',
                }),
                'spinLevel': dict({
                  'default': 'medium',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    'low',
                    'medium',
                  ]),
                  'raw': 'A30F',
                }),
                'waterTemperature': dict({
                  'default': 'tapCold',
                  'options': list([
                    'tapCold',
                    'cold',
                    'warm',
                  ]),
                  'raw': '810E',
                }),
              }),
            }),
            dict({
              'cycle': '78',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'rinseCycle': dict({
                  'default': '1',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '913F',
                }),
                'soilLevel': dict({
                  'default': 'extraLight',
                  'options': list([
                    'extraLight',
                    'light',
                    'normal',
                    'heavy',
                    'extraHeavy',
                  ]),
                  'raw': 'C13E',
                }),
                'spinLevel': dict({
                  'default': 'extraHigh',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    'low',
                    'medium',
                    'high',
                    'extraHigh',
                  ]),
                  'raw': 'A53F',
                }),
                'waterTemperature': dict({
                  'default': 'warm',
                  'options': list([
                    'tapCold',
                    'cold',
                    'warm',
                    'hot',
                  ]),
                  'raw': '831E',
                }),
              }),
            }),
          ]),
        }),
        <Attribute.WASHER_CYCLE: 'washerCycle'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 623000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Table_00_Course_01',
        }),
      }),
      <Capability.SAMSUNG_CE_WASHER_CYCLE_PRESET: 'samsungce.washerCyclePreset'>: dict({
        <Attribute.MAX_NUMBER_OF_PRESETS: 'maxNumberOfPresets'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 805000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 10,
        }),
        <Attribute.PRESETS: 'presets'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WASHER_DELAY_END: 'samsungce.washerDelayEnd'>: dict({
        <Attribute.MINIMUM_RESERVABLE_TIME: 'minimumReservableTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 9, 45, 594000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 45,
        }),
        <Attribute.REMAINING_TIME: 'remainingTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 546000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 0,
        }),
      }),
      <Capability.SAMSUNG_CE_WASHER_FREEZE_PREVENT: 'samsungce.washerFreezePrevent'>: dict({
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WASHER_OPERATING_STATE: 'samsungce.washerOperatingState'>: dict({
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 9, 45, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.OPERATION_TIME: 'operationTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 9, 45, 594000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 45,
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 9, 45, 534000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 1,
        }),
        <Attribute.REMAINING_TIME: 'remainingTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 9, 45, 534000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 45,
        }),
        <Attribute.REMAINING_TIME_STR: 'remainingTimeStr'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 9, 45, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '00:45',
        }),
        <Attribute.SCHEDULED_JOBS: 'scheduledJobs'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 30, 43, 851000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'jobName': 'wash',
              'timeInMin': 23,
            }),
            dict({
              'jobName': 'rinse',
              'timeInMin': 10,
            }),
            dict({
              'jobName': 'spin',
              'timeInMin': 9,
            }),
          ]),
        }),
        <Attribute.SCHEDULED_PHASES: 'scheduledPhases'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 30, 43, 851000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'phaseName': 'wash',
              'timeInMin': 23,
            }),
            dict({
              'phaseName': 'rinse',
              'timeInMin': 10,
            }),
            dict({
              'phaseName': 'spin',
              'timeInMin': 9,
            }),
          ]),
        }),
        <Attribute.SUPPORTED_OPERATING_STATES: 'supportedOperatingStates'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 11, 4, 14, 21, 57, 546000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'ready',
            'running',
            'paused',
          ]),
        }),
        <Attribute.WASHER_JOB_PHASE: 'washerJobPhase'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 9, 45, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
        <Attribute.WASHER_JOB_STATE: 'washerJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 9, 45, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
      }),
      <Capability.SAMSUNG_CE_WASHER_WASHING_TIME: 'samsungce.washerWashingTime'>: dict({
        <Attribute.SUPPORTED_WASHING_TIMES: 'supportedWashingTimes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WASHING_TIME: 'washingTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WASHER_WATER_LEVEL: 'samsungce.washerWaterLevel'>: dict({
        <Attribute.SUPPORTED_WATER_LEVEL: 'supportedWaterLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WATER_LEVEL: 'waterLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WASHER_WATER_VALVE: 'samsungce.washerWaterValve'>: dict({
        <Attribute.SUPPORTED_WATER_VALVE: 'supportedWaterValve'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WATER_VALVE: 'waterValve'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WATER_CONSUMPTION_REPORT: 'samsungce.waterConsumptionReport'>: dict({
        <Attribute.WATER_CONSUMPTION: 'waterConsumption'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WELCOME_MESSAGE: 'samsungce.welcomeMessage'>: dict({
        <Attribute.WELCOME_MESSAGE: 'welcomeMessage'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>: dict({
        <Attribute.DUMP_TYPE: 'dumpType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 453000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'file',
        }),
        <Attribute.ENDPOINT: 'endpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 453000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'SSM',
        }),
        <Attribute.LOG_TYPE: 'logType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 453000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'errCode',
            'dump',
          ]),
        }),
        <Attribute.MIN_VERSION: 'minVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 453000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '1.0',
        }),
        <Attribute.MN_ID: 'mnId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 453000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '0AJT',
        }),
        <Attribute.PROTOCOL_TYPE: 'protocolType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 453000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'wifi_https',
        }),
        <Attribute.SETUP_ID: 'setupId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 453000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '210',
        }),
        <Attribute.SIGNIN_PERMISSION: 'signinPermission'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TS_ID: 'tsId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>: dict({
        <Attribute.AUTO_RECONNECTION: 'autoReconnection'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MIN_VERSION: 'minVersion'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.PROTOCOL_TYPE: 'protocolType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_AUTH_TYPE: 'supportedAuthType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_WI_FI_FREQ: 'supportedWiFiFreq'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 9, 45, 456000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.WASHER_OPERATING_STATE: 'washerOperatingState'>: dict({
        <Attribute.COMPLETION_TIME: 'completionTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 9, 45, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2025-02-07T03:54:45Z',
        }),
        <Attribute.MACHINE_STATE: 'machineState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 9, 45, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'stop',
        }),
        <Attribute.SUPPORTED_MACHINE_STATES: 'supportedMachineStates'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 546000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'stop',
            'run',
            'pause',
          ]),
        }),
        <Attribute.WASHER_JOB_STATE: 'washerJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 9, 45, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[da_wm_wm_000001_2]
  dict({
    'hca.main': dict({
      <Capability.HCA_WASHER_MODE: 'hca.washerMode'>: dict({
        <Attribute.MODE: 'mode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 10, 2, 8, 764000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'others',
        }),
        <Attribute.SUPPORTED_MODES: 'supportedModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 10, 2, 8, 668000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'normal',
            'quickWash',
            'eco',
            'mix',
            'spinOnly',
          ]),
        }),
      }),
    }),
    'main': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 7, 10, 3, 8, 1, 241000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'samsungce.waterConsumptionReport',
            'samsungce.washerCyclePreset',
            'samsungce.welcomeMessage',
            'samsungce.dongleSoftwareInstallation',
            'sec.wifiConfiguration',
            'samsungce.quickControl',
            'samsungce.deviceInfoPrivate',
            'samsungce.energyPlanner',
            'demandResponseLoadControl',
            'samsungce.washerFreezePrevent',
            'custom.dryerDryLevel',
            'custom.washerSoilLevel',
            'samsungce.washerWaterLevel',
            'samsungce.washerWaterValve',
            'samsungce.washerWashingTime',
            'custom.washerAutoDetergent',
            'custom.washerAutoSoftener',
          ]),
        }),
      }),
      <Capability.CUSTOM_DRYER_DRY_LEVEL: 'custom.dryerDryLevel'>: dict({
        <Attribute.DRYER_DRY_LEVEL: 'dryerDryLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_DRYER_DRY_LEVEL: 'supportedDryerDryLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>: dict({
        <Attribute.DR_MAX_DURATION: 'drMaxDuration'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 6, 17, 17, 42, 12, 954000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 99999999,
        }),
        <Attribute.ENERGY_SAVING_INFO: 'energySavingInfo'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_LEVEL: 'energySavingLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_OPERATION: 'energySavingOperation'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_OPERATION_SUPPORT: 'energySavingOperationSupport'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 6, 17, 17, 42, 12, 954000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.ENERGY_SAVING_SUPPORT: 'energySavingSupport'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 6, 14, 15, 36, 13, 295000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.ENERGY_TYPE: 'energyType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 6, 14, 5, 20, 48, 494000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2.0',
        }),
        <Attribute.NOTIFICATION_TEMPLATE_I_D: 'notificationTemplateID'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_ENERGY_SAVING_LEVELS: 'supportedEnergySavingLevels'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_JOB_BEGINNING_STATUS: 'custom.jobBeginningStatus'>: dict({
        <Attribute.JOB_BEGINNING_STATUS: 'jobBeginningStatus'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 923000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'None',
        }),
      }),
      <Capability.CUSTOM_SUPPORTED_OPTIONS: 'custom.supportedOptions'>: dict({
        <Attribute.COURSE: 'course'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REFERENCE_TABLE: 'referenceTable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 10, 2, 8, 764000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'id': 'Table_02',
          }),
        }),
        <Attribute.SUPPORTED_COURSES: 'supportedCourses'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 10, 2, 8, 668000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            '1C',
            '1B',
            '1E',
            '1F',
            '25',
            '26',
            '33',
            '24',
            '32',
            '20',
            '22',
            '23',
            '2F',
            '21',
            '2A',
            '2E',
            '2D',
            '34',
            '30',
            '27',
            '28',
            '3A',
          ]),
        }),
      }),
      <Capability.CUSTOM_WASHER_AUTO_DETERGENT: 'custom.washerAutoDetergent'>: dict({
        <Attribute.WASHER_AUTO_DETERGENT: 'washerAutoDetergent'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_WASHER_AUTO_SOFTENER: 'custom.washerAutoSoftener'>: dict({
        <Attribute.WASHER_AUTO_SOFTENER: 'washerAutoSoftener'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_WASHER_RINSE_CYCLES: 'custom.washerRinseCycles'>: dict({
        <Attribute.SUPPORTED_WASHER_RINSE_CYCLES: 'supportedWasherRinseCycles'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 6, 59, 14, 70000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            '0',
            '1',
            '2',
            '3',
            '4',
            '5',
          ]),
        }),
        <Attribute.WASHER_RINSE_CYCLES: 'washerRinseCycles'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 10, 2, 8, 891000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '3',
        }),
      }),
      <Capability.CUSTOM_WASHER_SOIL_LEVEL: 'custom.washerSoilLevel'>: dict({
        <Attribute.SUPPORTED_WASHER_SOIL_LEVEL: 'supportedWasherSoilLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WASHER_SOIL_LEVEL: 'washerSoilLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_WASHER_SPIN_LEVEL: 'custom.washerSpinLevel'>: dict({
        <Attribute.SUPPORTED_WASHER_SPIN_LEVEL: 'supportedWasherSpinLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 6, 59, 14, 70000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'rinseHold',
            'noSpin',
            '400',
            '800',
            '1000',
            '1200',
            '1400',
          ]),
        }),
        <Attribute.WASHER_SPIN_LEVEL: 'washerSpinLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 13, 22, 49, 246000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '1400',
        }),
      }),
      <Capability.CUSTOM_WASHER_WATER_TEMPERATURE: 'custom.washerWaterTemperature'>: dict({
        <Attribute.SUPPORTED_WASHER_WATER_TEMPERATURE: 'supportedWasherWaterTemperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 6, 59, 14, 70000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'none',
            'cold',
            '20',
            '30',
            '40',
            '60',
            '90',
          ]),
        }),
        <Attribute.WASHER_WATER_TEMPERATURE: 'washerWaterTemperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 10, 2, 8, 873000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '60',
        }),
      }),
      <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>: dict({
        <Attribute.DEMAND_RESPONSE_LOAD_CONTROL_STATUS: 'drlcStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': dict({
            'href': '/operational/state/vs/0',
          }),
          'timestamp': datetime.datetime(2024, 11, 24, 14, 42, 31, 49000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'payload': dict({
              'if': list([
                'oic.if.baseline',
                'oic.if.a',
              ]),
              'rt': list([
                'x.com.samsung.da.operation',
              ]),
              'x.com.samsung.da.delayEndTime': '00:00:00',
              'x.com.samsung.da.progress': 'Finish',
              'x.com.samsung.da.progressPercentage': '100',
              'x.com.samsung.da.remainingTime': '00:01:00',
              'x.com.samsung.da.state': 'Run',
              'x.com.samsung.da.supportedProgress': list([
                'None',
                'Weightsensing',
                'Wash',
                'Rinse',
                'Spin',
                'Finish',
              ]),
            }),
          }),
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 6, 59, 13, 858000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'c34897ca-c077-e3b9-adba-d52a96e47343',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 6, 59, 13, 858000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'res.1.1.0,sh.1.1.0',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 6, 59, 13, 858000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OCF_FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 6, 59, 13, 858000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_WM_TP2_20_COMMON_30230804',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 6, 59, 13, 858000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'MediaTek',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 6, 59, 13, 858000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 6, 59, 13, 858000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 6, 59, 13, 858000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_WM_TP2_20_COMMON|20260041|200100020014112302A3020700000000',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 6, 59, 13, 858000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TizenRT 2.0 + IPv6',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 6, 59, 13, 858000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DAWIT 2.0',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 6, 59, 13, 858000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 6, 59, 13, 858000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[washer] Samsung',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 6, 59, 13, 858000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'c34897ca-c077-e3b9-adba-d52a96e47343',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 6, 59, 13, 858000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA-WM-WM-000001',
        }),
      }),
      <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>: dict({
        <Attribute.POWER_CONSUMPTION: 'powerConsumption'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 10, 24, 40, 969000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'deltaEnergy': 300,
            'end': '2025-02-09T10:24:40Z',
            'energy': 988800,
            'energySaved': 0,
            'persistedEnergy': 0,
            'power': 0,
            'powerEnergy': 0.0,
            'start': '2025-02-09T10:09:42Z',
          }),
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>: dict({
        <Attribute.REMOTE_CONTROL_ENABLED: 'remoteControlEnabled'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 33, 931000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'false',
        }),
      }),
      <Capability.SAMSUNG_CE_AUTO_DISPENSE_DETERGENT: 'samsungce.autoDispenseDetergent'>: dict({
        <Attribute.AMOUNT: 'amount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 13, 23, 55, 432000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'standard',
        }),
        <Attribute.AVAILABLE_TYPES: 'availableTypes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DENSITY: 'density'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 651000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'high',
        }),
        <Attribute.RECOMMENDED_AMOUNT: 'recommendedAmount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REMAINING_AMOUNT: 'remainingAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 10, 2, 14, 457000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'unknown',
        }),
        <Attribute.SUPPORTED_AMOUNT: 'supportedAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 651000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'none',
            'less',
            'standard',
            'extra',
          ]),
        }),
        <Attribute.SUPPORTED_DENSITY: 'supportedDensity'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 651000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'normal',
            'high',
            'extraHigh',
          ]),
        }),
        <Attribute.TYPE: 'type'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_AUTO_DISPENSE_SOFTENER: 'samsungce.autoDispenseSoftener'>: dict({
        <Attribute.AMOUNT: 'amount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 651000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
        <Attribute.DENSITY: 'density'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 651000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'normal',
        }),
        <Attribute.REMAINING_AMOUNT: 'remainingAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 10, 2, 14, 457000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'unknown',
        }),
        <Attribute.SUPPORTED_AMOUNT: 'supportedAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 651000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'none',
            'less',
            'standard',
            'extra',
          ]),
        }),
        <Attribute.SUPPORTED_DENSITY: 'supportedDensity'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 651000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'normal',
            'high',
            'extraHigh',
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_DETERGENT_AUTO_REPLENISHMENT: 'samsungce.detergentAutoReplenishment'>: dict({
        <Attribute.BABY_DETERGENT_ALARM_ENABLED: 'babyDetergentAlarmEnabled'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.BABY_DETERGENT_DOSAGE: 'babyDetergentDosage'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.BABY_DETERGENT_INITIAL_AMOUNT: 'babyDetergentInitialAmount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.BABY_DETERGENT_ORDER_THRESHOLD: 'babyDetergentOrderThreshold'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.BABY_DETERGENT_REMAINING_AMOUNT: 'babyDetergentRemainingAmount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.BABY_DETERGENT_TYPE: 'babyDetergentType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEUTRAL_DETERGENT_ALARM_ENABLED: 'neutralDetergentAlarmEnabled'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEUTRAL_DETERGENT_DOSAGE: 'neutralDetergentDosage'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEUTRAL_DETERGENT_INITIAL_AMOUNT: 'neutralDetergentInitialAmount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEUTRAL_DETERGENT_ORDER_THRESHOLD: 'neutralDetergentOrderThreshold'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEUTRAL_DETERGENT_REMAINING_AMOUNT: 'neutralDetergentRemainingAmount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEUTRAL_DETERGENT_TYPE: 'neutralDetergentType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REGULAR_DETERGENT_ALARM_ENABLED: 'regularDetergentAlarmEnabled'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 651000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.REGULAR_DETERGENT_DOSAGE: 'regularDetergentDosage'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 651000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.REGULAR_DETERGENT_INITIAL_AMOUNT: 'regularDetergentInitialAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 651000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.REGULAR_DETERGENT_ORDER_THRESHOLD: 'regularDetergentOrderThreshold'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 651000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.REGULAR_DETERGENT_REMAINING_AMOUNT: 'regularDetergentRemainingAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 651000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.REGULAR_DETERGENT_TYPE: 'regularDetergentType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 651000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
      }),
      <Capability.SAMSUNG_CE_DETERGENT_ORDER: 'samsungce.detergentOrder'>: dict({
        <Attribute.ALARM_ENABLED: 'alarmEnabled'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 651000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.ORDER_THRESHOLD: 'orderThreshold'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 651000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
      }),
      <Capability.SAMSUNG_CE_DETERGENT_STATE: 'samsungce.detergentState'>: dict({
        <Attribute.DETERGENT_TYPE: 'detergentType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 11, 22, 16, 51, 7, 493000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
        <Attribute.DOSAGE: 'dosage'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 651000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.INITIAL_AMOUNT: 'initialAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 651000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.REMAINING_AMOUNT: 'remainingAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 651000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
      }),
      <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>: dict({
        <Attribute.BINARY_ID: 'binaryId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 949000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_WM_TP2_20_COMMON',
        }),
        <Attribute.DESCRIPTION: 'description'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 949000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_WM_TP2_20_COMMON_WW90T65/DC92-02613A_B04D',
        }),
        <Attribute.MICOM_ASSAY_CODE: 'micomAssayCode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 949000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '20260041',
        }),
        <Attribute.MODEL_CLASSIFICATION_CODE: 'modelClassificationCode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 949000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '200100020014112302A3020700000000',
        }),
        <Attribute.MODEL_NAME: 'modelName'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RELEASE_YEAR: 'releaseYear'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER: 'serialNumber'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER_EXTRA: 'serialNumberExtra'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_DONGLE_SOFTWARE_INSTALLATION: 'samsungce.dongleSoftwareInstallation'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 6, 14, 5, 20, 48, 494000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'completed',
        }),
      }),
      <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>: dict({
        <Attribute.VERSION_NUMBER: 'versionNumber'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 2, 14, 45, 8, 395000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 24110101,
        }),
      }),
      <Capability.SAMSUNG_CE_ENERGY_PLANNER: 'samsungce.energyPlanner'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.PLAN: 'plan'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_KIDS_LOCK: 'samsungce.kidsLock'>: dict({
        <Attribute.LOCK_STATE: 'lockState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 10, 2, 0, 750000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'unlocked',
        }),
      }),
      <Capability.SAMSUNG_CE_QUICK_CONTROL: 'samsungce.quickControl'>: dict({
        <Attribute.VERSION: 'version'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTENER_AUTO_REPLENISHMENT: 'samsungce.softenerAutoReplenishment'>: dict({
        <Attribute.REGULAR_SOFTENER_ALARM_ENABLED: 'regularSoftenerAlarmEnabled'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 651000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.REGULAR_SOFTENER_DOSAGE: 'regularSoftenerDosage'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 651000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.REGULAR_SOFTENER_INITIAL_AMOUNT: 'regularSoftenerInitialAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 651000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.REGULAR_SOFTENER_ORDER_THRESHOLD: 'regularSoftenerOrderThreshold'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 651000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.REGULAR_SOFTENER_REMAINING_AMOUNT: 'regularSoftenerRemainingAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 651000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.REGULAR_SOFTENER_TYPE: 'regularSoftenerType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 651000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTENER_ORDER: 'samsungce.softenerOrder'>: dict({
        <Attribute.ALARM_ENABLED: 'alarmEnabled'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 651000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.ORDER_THRESHOLD: 'orderThreshold'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 651000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTENER_STATE: 'samsungce.softenerState'>: dict({
        <Attribute.DOSAGE: 'dosage'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 651000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.INITIAL_AMOUNT: 'initialAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 651000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.REMAINING_AMOUNT: 'remainingAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 651000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.SOFTENER_TYPE: 'softenerType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 1, 19, 14, 47, 8, 342000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>: dict({
        <Attribute.AVAILABLE_MODULES: 'availableModules'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 28, 7, 49, 28, 334000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
        <Attribute.LAST_UPDATED_DATE: 'lastUpdatedDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEW_VERSION_AVAILABLE: 'newVersionAvailable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 729000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OTN_D_U_I_D: 'otnDUID'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 949000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '7XCNQWBWQJKRA',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TARGET_MODULE: 'targetModule'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 729000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
          }),
        }),
      }),
      <Capability.SAMSUNG_CE_WASHER_BUBBLE_SOAK: 'samsungce.washerBubbleSoak'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 651000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.SAMSUNG_CE_WASHER_CYCLE: 'samsungce.washerCycle'>: dict({
        <Attribute.REFERENCE_TABLE: 'referenceTable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 11, 22, 16, 51, 6, 929000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'id': 'Table_02',
          }),
        }),
        <Attribute.SPECIALIZED_FUNCTION_CLASSIFICATION: 'specializedFunctionClassification'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 651000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 4,
        }),
        <Attribute.SUPPORTED_CYCLES: 'supportedCycles'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 13, 23, 52, 896000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'cycle': '1C',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                  ]),
                  'raw': '3500',
                }),
                'rinseCycle': dict({
                  'default': '2',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '923F',
                }),
                'spinLevel': dict({
                  'default': '1400',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                    '800',
                    '1000',
                    '1200',
                    '1400',
                  ]),
                  'raw': 'A67F',
                }),
                'waterTemperature': dict({
                  'default': 'none',
                  'options': list([
                  ]),
                  'raw': '8000',
                }),
              }),
            }),
            dict({
              'cycle': '1B',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '35F0',
                }),
                'rinseCycle': dict({
                  'default': '3',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '933F',
                }),
                'spinLevel': dict({
                  'default': '1400',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                    '800',
                    '1000',
                    '1200',
                    '1400',
                  ]),
                  'raw': 'A67F',
                }),
                'waterTemperature': dict({
                  'default': '30',
                  'options': list([
                    'cold',
                    '20',
                    '30',
                    '40',
                    '60',
                    '90',
                  ]),
                  'raw': '837E',
                }),
              }),
            }),
            dict({
              'cycle': '1E',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                  ]),
                  'raw': '3500',
                }),
                'rinseCycle': dict({
                  'default': '2',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '923F',
                }),
                'spinLevel': dict({
                  'default': '800',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                    '800',
                    '1000',
                    '1200',
                  ]),
                  'raw': 'A33F',
                }),
                'waterTemperature': dict({
                  'default': '40',
                  'options': list([
                    'cold',
                    '20',
                    '30',
                    '40',
                  ]),
                  'raw': '841E',
                }),
              }),
            }),
            dict({
              'cycle': '1F',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                  ]),
                  'raw': '3500',
                }),
                'rinseCycle': dict({
                  'default': '2',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '923F',
                }),
                'spinLevel': dict({
                  'default': '1200',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                    '800',
                    '1000',
                    '1200',
                    '1400',
                  ]),
                  'raw': 'A57F',
                }),
                'waterTemperature': dict({
                  'default': 'cold',
                  'options': list([
                    'cold',
                  ]),
                  'raw': '8102',
                }),
              }),
            }),
            dict({
              'cycle': '25',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '35F0',
                }),
                'rinseCycle': dict({
                  'default': '2',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '923F',
                }),
                'spinLevel': dict({
                  'default': '1200',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                    '800',
                    '1000',
                    '1200',
                    '1400',
                  ]),
                  'raw': 'A57F',
                }),
                'waterTemperature': dict({
                  'default': '30',
                  'options': list([
                    'cold',
                    '20',
                    '30',
                    '40',
                    '60',
                  ]),
                  'raw': '833E',
                }),
              }),
            }),
            dict({
              'cycle': '26',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                  ]),
                  'raw': '3500',
                }),
                'rinseCycle': dict({
                  'default': '2',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                  ]),
                  'raw': '920F',
                }),
                'spinLevel': dict({
                  'default': '400',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                  ]),
                  'raw': 'A207',
                }),
                'waterTemperature': dict({
                  'default': '30',
                  'options': list([
                    'cold',
                    '20',
                    '30',
                    '40',
                  ]),
                  'raw': '831E',
                }),
              }),
            }),
            dict({
              'cycle': '33',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '35F0',
                }),
                'rinseCycle': dict({
                  'default': '3',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '933F',
                }),
                'spinLevel': dict({
                  'default': '1400',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                    '800',
                    '1000',
                    '1200',
                    '1400',
                  ]),
                  'raw': 'A67F',
                }),
                'waterTemperature': dict({
                  'default': '60',
                  'options': list([
                    'cold',
                    '20',
                    '30',
                    '40',
                    '60',
                    '90',
                  ]),
                  'raw': '857E',
                }),
              }),
            }),
            dict({
              'cycle': '24',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '35F0',
                }),
                'rinseCycle': dict({
                  'default': '3',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                  ]),
                  'raw': '930F',
                }),
                'spinLevel': dict({
                  'default': '800',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                    '800',
                  ]),
                  'raw': 'A30F',
                }),
                'waterTemperature': dict({
                  'default': '40',
                  'options': list([
                    'cold',
                    '20',
                    '30',
                    '40',
                  ]),
                  'raw': '841E',
                }),
              }),
            }),
            dict({
              'cycle': '32',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '35F0',
                }),
                'rinseCycle': dict({
                  'default': '2',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '923F',
                }),
                'spinLevel': dict({
                  'default': '800',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                    '800',
                    '1000',
                    '1200',
                    '1400',
                  ]),
                  'raw': 'A37F',
                }),
                'waterTemperature': dict({
                  'default': '30',
                  'options': list([
                    'cold',
                    '20',
                    '30',
                    '40',
                    '60',
                  ]),
                  'raw': '833E',
                }),
              }),
            }),
            dict({
              'cycle': '20',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '35F0',
                }),
                'rinseCycle': dict({
                  'default': '4',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '943F',
                }),
                'spinLevel': dict({
                  'default': '1400',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                    '800',
                    '1000',
                    '1200',
                    '1400',
                  ]),
                  'raw': 'A67F',
                }),
                'waterTemperature': dict({
                  'default': '60',
                  'options': list([
                    'cold',
                    '20',
                    '30',
                    '40',
                    '60',
                    '90',
                  ]),
                  'raw': '857E',
                }),
              }),
            }),
            dict({
              'cycle': '22',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                  ]),
                  'raw': '3500',
                }),
                'rinseCycle': dict({
                  'default': '2',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                  ]),
                  'raw': '920F',
                }),
                'spinLevel': dict({
                  'default': '800',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                    '800',
                  ]),
                  'raw': 'A30F',
                }),
                'waterTemperature': dict({
                  'default': '40',
                  'options': list([
                    'cold',
                    '20',
                    '30',
                    '40',
                  ]),
                  'raw': '841E',
                }),
              }),
            }),
            dict({
              'cycle': '23',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                  ]),
                  'raw': '3500',
                }),
                'rinseCycle': dict({
                  'default': '3',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                  ]),
                  'raw': '930F',
                }),
                'spinLevel': dict({
                  'default': '1200',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                    '800',
                    '1000',
                    '1200',
                    '1400',
                  ]),
                  'raw': 'A57F',
                }),
                'waterTemperature': dict({
                  'default': '30',
                  'options': list([
                    'cold',
                    '20',
                    '30',
                    '40',
                  ]),
                  'raw': '831E',
                }),
              }),
            }),
            dict({
              'cycle': '2F',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '35F0',
                }),
                'rinseCycle': dict({
                  'default': '3',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '933F',
                }),
                'spinLevel': dict({
                  'default': '800',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                    '800',
                  ]),
                  'raw': 'A30F',
                }),
                'waterTemperature': dict({
                  'default': '30',
                  'options': list([
                    'cold',
                    '20',
                    '30',
                    '40',
                  ]),
                  'raw': '831E',
                }),
              }),
            }),
            dict({
              'cycle': '21',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                  ]),
                  'raw': '3500',
                }),
                'rinseCycle': dict({
                  'default': '4',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '943F',
                }),
                'spinLevel': dict({
                  'default': '1200',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                    '800',
                    '1000',
                    '1200',
                    '1400',
                  ]),
                  'raw': 'A57F',
                }),
                'waterTemperature': dict({
                  'default': '40',
                  'options': list([
                    'cold',
                    '20',
                    '30',
                    '40',
                  ]),
                  'raw': '841E',
                }),
              }),
            }),
            dict({
              'cycle': '2A',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '35F0',
                }),
                'rinseCycle': dict({
                  'default': '3',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '933F',
                }),
                'spinLevel': dict({
                  'default': '800',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                    '800',
                  ]),
                  'raw': 'A30F',
                }),
                'waterTemperature': dict({
                  'default': '30',
                  'options': list([
                    'cold',
                    '20',
                    '30',
                    '40',
                  ]),
                  'raw': '831E',
                }),
              }),
            }),
            dict({
              'cycle': '2E',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '35F0',
                }),
                'rinseCycle': dict({
                  'default': '4',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '943F',
                }),
                'spinLevel': dict({
                  'default': '1400',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                    '800',
                    '1000',
                    '1200',
                    '1400',
                  ]),
                  'raw': 'A67F',
                }),
                'waterTemperature': dict({
                  'default': '90',
                  'options': list([
                    'cold',
                    '20',
                    '30',
                    '40',
                    '60',
                    '90',
                  ]),
                  'raw': '867E',
                }),
              }),
            }),
            dict({
              'cycle': '2D',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '35F0',
                }),
                'rinseCycle': dict({
                  'default': '2',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '923F',
                }),
                'spinLevel': dict({
                  'default': '800',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                    '800',
                  ]),
                  'raw': 'A30F',
                }),
                'waterTemperature': dict({
                  'default': '40',
                  'options': list([
                    'cold',
                    '20',
                    '30',
                    '40',
                  ]),
                  'raw': '841E',
                }),
              }),
            }),
            dict({
              'cycle': '34',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '35F0',
                }),
                'rinseCycle': dict({
                  'default': '2',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '923F',
                }),
                'spinLevel': dict({
                  'default': '1400',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                    '800',
                    '1000',
                    '1200',
                    '1400',
                  ]),
                  'raw': 'A67F',
                }),
                'waterTemperature': dict({
                  'default': '40',
                  'options': list([
                    'cold',
                    '20',
                    '30',
                    '40',
                    '60',
                  ]),
                  'raw': '843E',
                }),
              }),
            }),
            dict({
              'cycle': '30',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '35F0',
                }),
                'rinseCycle': dict({
                  'default': '2',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '923F',
                }),
                'spinLevel': dict({
                  'default': '1400',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                    '800',
                    '1000',
                    '1200',
                    '1400',
                  ]),
                  'raw': 'A67F',
                }),
                'waterTemperature': dict({
                  'default': '30',
                  'options': list([
                    'cold',
                    '20',
                    '30',
                    '40',
                    '60',
                  ]),
                  'raw': '833E',
                }),
              }),
            }),
            dict({
              'cycle': '27',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                  ]),
                  'raw': '3500',
                }),
                'rinseCycle': dict({
                  'default': '2',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '923F',
                }),
                'spinLevel': dict({
                  'default': 'noSpin',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                    '800',
                    '1000',
                    '1200',
                    '1400',
                  ]),
                  'raw': 'A17F',
                }),
                'waterTemperature': dict({
                  'default': 'none',
                  'options': list([
                  ]),
                  'raw': '8000',
                }),
              }),
            }),
            dict({
              'cycle': '28',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                  ]),
                  'raw': '3500',
                }),
                'rinseCycle': dict({
                  'default': '0',
                  'options': list([
                  ]),
                  'raw': '9000',
                }),
                'spinLevel': dict({
                  'default': '1400',
                  'options': list([
                    'noSpin',
                    '400',
                    '800',
                    '1000',
                    '1200',
                    '1400',
                  ]),
                  'raw': 'A67E',
                }),
                'waterTemperature': dict({
                  'default': 'none',
                  'options': list([
                  ]),
                  'raw': '8000',
                }),
              }),
            }),
            dict({
              'cycle': '3A',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                  ]),
                  'raw': '3500',
                }),
                'rinseCycle': dict({
                  'default': '2',
                  'options': list([
                    '2',
                  ]),
                  'raw': '9204',
                }),
                'spinLevel': dict({
                  'default': '1200',
                  'options': list([
                    '1200',
                  ]),
                  'raw': 'A520',
                }),
                'waterTemperature': dict({
                  'default': '70',
                  'options': list([
                    '70',
                  ]),
                  'raw': '8520',
                }),
              }),
            }),
          ]),
        }),
        <Attribute.WASHER_CYCLE: 'washerCycle'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 10, 2, 8, 764000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Table_02_Course_33',
        }),
      }),
      <Capability.SAMSUNG_CE_WASHER_CYCLE_PRESET: 'samsungce.washerCyclePreset'>: dict({
        <Attribute.MAX_NUMBER_OF_PRESETS: 'maxNumberOfPresets'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 841000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 10,
        }),
        <Attribute.PRESETS: 'presets'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WASHER_DELAY_END: 'samsungce.washerDelayEnd'>: dict({
        <Attribute.MINIMUM_RESERVABLE_TIME: 'minimumReservableTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 10, 3, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 104,
        }),
        <Attribute.REMAINING_TIME: 'remainingTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 10, 2, 0, 743000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 0,
        }),
      }),
      <Capability.SAMSUNG_CE_WASHER_FREEZE_PREVENT: 'samsungce.washerFreezePrevent'>: dict({
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WASHER_OPERATING_STATE: 'samsungce.washerOperatingState'>: dict({
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 10, 2, 14, 471000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'running',
        }),
        <Attribute.OPERATION_TIME: 'operationTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 10, 3, 17, 534000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 104,
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 10, 16, 45, 809000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 14,
        }),
        <Attribute.REMAINING_TIME: 'remainingTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 10, 16, 45, 809000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 90,
        }),
        <Attribute.REMAINING_TIME_STR: 'remainingTimeStr'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 10, 16, 45, 809000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '01:30',
        }),
        <Attribute.SCHEDULED_JOBS: 'scheduledJobs'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 10, 3, 17, 734000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'jobName': 'wash',
              'timeInMin': 42,
            }),
            dict({
              'jobName': 'rinse',
              'timeInMin': 48,
            }),
            dict({
              'jobName': 'spin',
              'timeInMin': 13,
            }),
          ]),
        }),
        <Attribute.SCHEDULED_PHASES: 'scheduledPhases'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 10, 3, 17, 734000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'phaseName': 'wash',
              'timeInMin': 42,
            }),
            dict({
              'phaseName': 'rinse',
              'timeInMin': 48,
            }),
            dict({
              'phaseName': 'spin',
              'timeInMin': 13,
            }),
          ]),
        }),
        <Attribute.SUPPORTED_OPERATING_STATES: 'supportedOperatingStates'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 11, 1, 13, 41, 16, 993000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'ready',
            'running',
            'paused',
          ]),
        }),
        <Attribute.WASHER_JOB_PHASE: 'washerJobPhase'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 10, 3, 17, 548000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'wash',
        }),
        <Attribute.WASHER_JOB_STATE: 'washerJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 10, 3, 17, 548000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'wash',
        }),
      }),
      <Capability.SAMSUNG_CE_WASHER_WASHING_TIME: 'samsungce.washerWashingTime'>: dict({
        <Attribute.SUPPORTED_WASHING_TIMES: 'supportedWashingTimes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WASHING_TIME: 'washingTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WASHER_WATER_LEVEL: 'samsungce.washerWaterLevel'>: dict({
        <Attribute.SUPPORTED_WATER_LEVEL: 'supportedWaterLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WATER_LEVEL: 'waterLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WASHER_WATER_VALVE: 'samsungce.washerWaterValve'>: dict({
        <Attribute.SUPPORTED_WATER_VALVE: 'supportedWaterValve'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WATER_VALVE: 'waterValve'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WATER_CONSUMPTION_REPORT: 'samsungce.waterConsumptionReport'>: dict({
        <Attribute.WATER_CONSUMPTION: 'waterConsumption'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WELCOME_MESSAGE: 'samsungce.welcomeMessage'>: dict({
        <Attribute.WELCOME_MESSAGE: 'welcomeMessage'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>: dict({
        <Attribute.DUMP_TYPE: 'dumpType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 949000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'file',
        }),
        <Attribute.ENDPOINT: 'endpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 949000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'SSM',
        }),
        <Attribute.LOG_TYPE: 'logType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 949000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'errCode',
            'dump',
          ]),
        }),
        <Attribute.MIN_VERSION: 'minVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 949000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '1.0',
        }),
        <Attribute.MN_ID: 'mnId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 949000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '0AJT',
        }),
        <Attribute.PROTOCOL_TYPE: 'protocolType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 949000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'wifi_https',
        }),
        <Attribute.SETUP_ID: 'setupId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 4, 32, 949000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '210',
        }),
        <Attribute.SIGNIN_PERMISSION: 'signinPermission'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TS_ID: 'tsId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>: dict({
        <Attribute.AUTO_RECONNECTION: 'autoReconnection'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MIN_VERSION: 'minVersion'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.PROTOCOL_TYPE: 'protocolType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_AUTH_TYPE: 'supportedAuthType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_WI_FI_FREQ: 'supportedWiFiFreq'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 10, 2, 0, 737000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'on',
        }),
      }),
      <Capability.WASHER_OPERATING_STATE: 'washerOperatingState'>: dict({
        <Attribute.COMPLETION_TIME: 'completionTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 10, 3, 17, 548000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2025-02-09T11:47:17Z',
        }),
        <Attribute.MACHINE_STATE: 'machineState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 10, 2, 14, 471000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'run',
        }),
        <Attribute.SUPPORTED_MACHINE_STATES: 'supportedMachineStates'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 10, 2, 0, 743000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'stop',
            'run',
            'pause',
          ]),
        }),
        <Attribute.WASHER_JOB_STATE: 'washerJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 10, 3, 17, 548000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'wash',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[da_wm_wm_000001_3]
  dict({
    'hca.main': dict({
      <Capability.HCA_WASHER_MODE: 'hca.washerMode'>: dict({
        <Attribute.MODE: 'mode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 13, 6, 23, 375000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'others',
        }),
        <Attribute.SUPPORTED_MODES: 'supportedModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 708000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'normal',
            'quickWash',
            'mix',
            'eco',
            'spinOnly',
          ]),
        }),
      }),
    }),
    'main': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 7, 9, 13, 48, 14, 959000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'samsungce.waterConsumptionReport',
            'samsungce.washerCyclePreset',
            'samsungce.welcomeMessage',
            'samsungce.dongleSoftwareInstallation',
            'sec.wifiConfiguration',
            'samsungce.quickControl',
            'samsungce.deviceInfoPrivate',
            'samsungce.energyPlanner',
            'demandResponseLoadControl',
            'samsungce.washerFreezePrevent',
            'custom.washerSoilLevel',
            'samsungce.washerWaterLevel',
            'samsungce.washerWaterValve',
            'samsungce.washerWashingTime',
            'custom.washerAutoDetergent',
            'custom.washerAutoSoftener',
          ]),
        }),
      }),
      <Capability.CUSTOM_DRYER_DRY_LEVEL: 'custom.dryerDryLevel'>: dict({
        <Attribute.DRYER_DRY_LEVEL: 'dryerDryLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 754000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
        <Attribute.SUPPORTED_DRYER_DRY_LEVEL: 'supportedDryerDryLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 56, 10, 591000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'none',
            'cupboard',
            '30',
            '60',
            '90',
            '120',
            '180',
            '240',
          ]),
        }),
      }),
      <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>: dict({
        <Attribute.DR_MAX_DURATION: 'drMaxDuration'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_INFO: 'energySavingInfo'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_LEVEL: 'energySavingLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_OPERATION: 'energySavingOperation'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_OPERATION_SUPPORT: 'energySavingOperationSupport'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_SUPPORT: 'energySavingSupport'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 6, 7, 8, 45, 56, 20000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.ENERGY_TYPE: 'energyType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 6, 7, 8, 43, 28, 951000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2.0',
        }),
        <Attribute.NOTIFICATION_TEMPLATE_I_D: 'notificationTemplateID'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_ENERGY_SAVING_LEVELS: 'supportedEnergySavingLevels'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_JOB_BEGINNING_STATUS: 'custom.jobBeginningStatus'>: dict({
        <Attribute.JOB_BEGINNING_STATUS: 'jobBeginningStatus'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 14, 827000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'None',
        }),
      }),
      <Capability.CUSTOM_SUPPORTED_OPTIONS: 'custom.supportedOptions'>: dict({
        <Attribute.COURSE: 'course'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REFERENCE_TABLE: 'referenceTable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 820000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'id': 'Table_02',
          }),
        }),
        <Attribute.SUPPORTED_COURSES: 'supportedCourses'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 708000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            '1C',
            '1B',
            '1E',
            '1D',
            '1F',
            '25',
            '26',
            '33',
            '24',
            '32',
            '20',
            '22',
            '23',
            '2F',
            '21',
            '2D',
            '30',
            '27',
            '28',
            '36',
            '38',
            '39',
            '37',
            '29',
          ]),
        }),
      }),
      <Capability.CUSTOM_WASHER_AUTO_DETERGENT: 'custom.washerAutoDetergent'>: dict({
        <Attribute.WASHER_AUTO_DETERGENT: 'washerAutoDetergent'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_WASHER_AUTO_SOFTENER: 'custom.washerAutoSoftener'>: dict({
        <Attribute.WASHER_AUTO_SOFTENER: 'washerAutoSoftener'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_WASHER_RINSE_CYCLES: 'custom.washerRinseCycles'>: dict({
        <Attribute.SUPPORTED_WASHER_RINSE_CYCLES: 'supportedWasherRinseCycles'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 56, 10, 591000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            '0',
            '1',
            '2',
            '3',
            '4',
            '5',
          ]),
        }),
        <Attribute.WASHER_RINSE_CYCLES: 'washerRinseCycles'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 56, 24, 266000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2',
        }),
      }),
      <Capability.CUSTOM_WASHER_SOIL_LEVEL: 'custom.washerSoilLevel'>: dict({
        <Attribute.SUPPORTED_WASHER_SOIL_LEVEL: 'supportedWasherSoilLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WASHER_SOIL_LEVEL: 'washerSoilLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_WASHER_SPIN_LEVEL: 'custom.washerSpinLevel'>: dict({
        <Attribute.SUPPORTED_WASHER_SPIN_LEVEL: 'supportedWasherSpinLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 56, 10, 591000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'rinseHold',
            'noSpin',
            '400',
            '800',
            '1000',
            '1200',
            '1400',
          ]),
        }),
        <Attribute.WASHER_SPIN_LEVEL: 'washerSpinLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 13, 6, 23, 547000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '1400',
        }),
      }),
      <Capability.CUSTOM_WASHER_WATER_TEMPERATURE: 'custom.washerWaterTemperature'>: dict({
        <Attribute.SUPPORTED_WASHER_WATER_TEMPERATURE: 'supportedWasherWaterTemperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 56, 10, 591000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'none',
            'cold',
            '20',
            '30',
            '40',
            '60',
            '90',
          ]),
        }),
        <Attribute.WASHER_WATER_TEMPERATURE: 'washerWaterTemperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 13, 6, 23, 375000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
      }),
      <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>: dict({
        <Attribute.DEMAND_RESPONSE_LOAD_CONTROL_STATUS: 'drlcStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 3, 22, 5, 8, 468000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '5f595079-fe6c-f441-49eb-008324a7acde',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 3, 22, 5, 8, 468000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'res.1.1.0,sh.1.1.0',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 3, 22, 5, 8, 468000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OCF_FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 3, 22, 5, 8, 468000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_WM_TP2_20_COMMON_30230804',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 3, 22, 5, 8, 468000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'MediaTek',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 3, 22, 5, 8, 468000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 3, 22, 5, 8, 468000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 3, 22, 5, 8, 468000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_WM_TP2_20_COMMON|20260041|20010002011411A702A3020700000000',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 3, 22, 5, 8, 468000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TizenRT 2.0 + IPv6',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 3, 22, 5, 8, 468000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DAWIT 2.0',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 3, 22, 5, 8, 468000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 3, 22, 5, 8, 468000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[washer] Samsung',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 3, 22, 5, 8, 468000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '5f595079-fe6c-f441-49eb-008324a7acde',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 3, 22, 5, 8, 468000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA-WM-WM-000001',
        }),
      }),
      <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>: dict({
        <Attribute.POWER_CONSUMPTION: 'powerConsumption'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 13, 6, 23, 649000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'deltaEnergy': 0,
            'end': '2025-02-07T13:06:23Z',
            'energy': 61900,
            'energySaved': 0,
            'persistedEnergy': 0,
            'power': 0,
            'powerEnergy': 0.0,
            'start': '2025-02-07T13:05:28Z',
          }),
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>: dict({
        <Attribute.REMOTE_CONTROL_ENABLED: 'remoteControlEnabled'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 13, 6, 23, 323000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'false',
        }),
      }),
      <Capability.SAMSUNG_CE_AUTO_DISPENSE_DETERGENT: 'samsungce.autoDispenseDetergent'>: dict({
        <Attribute.AMOUNT: 'amount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 708000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'standard',
        }),
        <Attribute.AVAILABLE_TYPES: 'availableTypes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DENSITY: 'density'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 708000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'high',
        }),
        <Attribute.RECOMMENDED_AMOUNT: 'recommendedAmount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REMAINING_AMOUNT: 'remainingAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 754000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'unknown',
        }),
        <Attribute.SUPPORTED_AMOUNT: 'supportedAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 708000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'none',
            'less',
            'standard',
            'extra',
          ]),
        }),
        <Attribute.SUPPORTED_DENSITY: 'supportedDensity'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 708000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'normal',
            'high',
            'extraHigh',
          ]),
        }),
        <Attribute.TYPE: 'type'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_AUTO_DISPENSE_SOFTENER: 'samsungce.autoDispenseSoftener'>: dict({
        <Attribute.AMOUNT: 'amount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 56, 24, 362000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'standard',
        }),
        <Attribute.DENSITY: 'density'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 708000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'normal',
        }),
        <Attribute.REMAINING_AMOUNT: 'remainingAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 754000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'unknown',
        }),
        <Attribute.SUPPORTED_AMOUNT: 'supportedAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 708000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'none',
            'less',
            'standard',
            'extra',
          ]),
        }),
        <Attribute.SUPPORTED_DENSITY: 'supportedDensity'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 708000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'normal',
            'high',
            'extraHigh',
          ]),
        }),
      }),
      <Capability.SAMSUNG_CE_DETERGENT_AUTO_REPLENISHMENT: 'samsungce.detergentAutoReplenishment'>: dict({
        <Attribute.BABY_DETERGENT_ALARM_ENABLED: 'babyDetergentAlarmEnabled'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.BABY_DETERGENT_DOSAGE: 'babyDetergentDosage'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.BABY_DETERGENT_INITIAL_AMOUNT: 'babyDetergentInitialAmount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.BABY_DETERGENT_ORDER_THRESHOLD: 'babyDetergentOrderThreshold'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.BABY_DETERGENT_REMAINING_AMOUNT: 'babyDetergentRemainingAmount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.BABY_DETERGENT_TYPE: 'babyDetergentType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEUTRAL_DETERGENT_ALARM_ENABLED: 'neutralDetergentAlarmEnabled'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEUTRAL_DETERGENT_DOSAGE: 'neutralDetergentDosage'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEUTRAL_DETERGENT_INITIAL_AMOUNT: 'neutralDetergentInitialAmount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEUTRAL_DETERGENT_ORDER_THRESHOLD: 'neutralDetergentOrderThreshold'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEUTRAL_DETERGENT_REMAINING_AMOUNT: 'neutralDetergentRemainingAmount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEUTRAL_DETERGENT_TYPE: 'neutralDetergentType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REGULAR_DETERGENT_ALARM_ENABLED: 'regularDetergentAlarmEnabled'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 708000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.REGULAR_DETERGENT_DOSAGE: 'regularDetergentDosage'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 708000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.REGULAR_DETERGENT_INITIAL_AMOUNT: 'regularDetergentInitialAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 708000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 500,
        }),
        <Attribute.REGULAR_DETERGENT_ORDER_THRESHOLD: 'regularDetergentOrderThreshold'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 708000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 350,
        }),
        <Attribute.REGULAR_DETERGENT_REMAINING_AMOUNT: 'regularDetergentRemainingAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 708000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.REGULAR_DETERGENT_TYPE: 'regularDetergentType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 708000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'liquid',
        }),
      }),
      <Capability.SAMSUNG_CE_DETERGENT_ORDER: 'samsungce.detergentOrder'>: dict({
        <Attribute.ALARM_ENABLED: 'alarmEnabled'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 708000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.ORDER_THRESHOLD: 'orderThreshold'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 708000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 350,
        }),
      }),
      <Capability.SAMSUNG_CE_DETERGENT_STATE: 'samsungce.detergentState'>: dict({
        <Attribute.DETERGENT_TYPE: 'detergentType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 8, 10, 6, 44, 34, 124000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'liquid',
        }),
        <Attribute.DOSAGE: 'dosage'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 708000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.INITIAL_AMOUNT: 'initialAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 708000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 500,
        }),
        <Attribute.REMAINING_AMOUNT: 'remainingAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 708000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
      }),
      <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>: dict({
        <Attribute.BINARY_ID: 'binaryId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 12, 56, 12, 18000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_WM_TP2_20_COMMON',
        }),
        <Attribute.DESCRIPTION: 'description'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 14, 641000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_WM_TP2_20_COMMON_WW6600R/DC92-02617A_B04C',
        }),
        <Attribute.MICOM_ASSAY_CODE: 'micomAssayCode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 14, 641000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '20260041',
        }),
        <Attribute.MODEL_CLASSIFICATION_CODE: 'modelClassificationCode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 14, 641000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '20010002011411A702A3020700000000',
        }),
        <Attribute.MODEL_NAME: 'modelName'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RELEASE_YEAR: 'releaseYear'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER: 'serialNumber'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER_EXTRA: 'serialNumberExtra'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_DONGLE_SOFTWARE_INSTALLATION: 'samsungce.dongleSoftwareInstallation'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 6, 7, 8, 43, 28, 951000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'completed',
        }),
      }),
      <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>: dict({
        <Attribute.VERSION_NUMBER: 'versionNumber'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 2, 12, 56, 5, 393000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 24110101,
        }),
      }),
      <Capability.SAMSUNG_CE_ENERGY_PLANNER: 'samsungce.energyPlanner'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.PLAN: 'plan'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_KIDS_LOCK: 'samsungce.kidsLock'>: dict({
        <Attribute.LOCK_STATE: 'lockState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 687000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'unlocked',
        }),
      }),
      <Capability.SAMSUNG_CE_QUICK_CONTROL: 'samsungce.quickControl'>: dict({
        <Attribute.VERSION: 'version'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTENER_AUTO_REPLENISHMENT: 'samsungce.softenerAutoReplenishment'>: dict({
        <Attribute.REGULAR_SOFTENER_ALARM_ENABLED: 'regularSoftenerAlarmEnabled'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 708000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.REGULAR_SOFTENER_DOSAGE: 'regularSoftenerDosage'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 708000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.REGULAR_SOFTENER_INITIAL_AMOUNT: 'regularSoftenerInitialAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 708000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.REGULAR_SOFTENER_ORDER_THRESHOLD: 'regularSoftenerOrderThreshold'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 708000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 350,
        }),
        <Attribute.REGULAR_SOFTENER_REMAINING_AMOUNT: 'regularSoftenerRemainingAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 708000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.REGULAR_SOFTENER_TYPE: 'regularSoftenerType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 708000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'liquid',
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTENER_ORDER: 'samsungce.softenerOrder'>: dict({
        <Attribute.ALARM_ENABLED: 'alarmEnabled'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 708000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.ORDER_THRESHOLD: 'orderThreshold'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 708000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 350,
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTENER_STATE: 'samsungce.softenerState'>: dict({
        <Attribute.DOSAGE: 'dosage'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 708000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.INITIAL_AMOUNT: 'initialAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 708000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.REMAINING_AMOUNT: 'remainingAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 708000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.SOFTENER_TYPE: 'softenerType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 8, 10, 6, 44, 34, 312000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'liquid',
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>: dict({
        <Attribute.AVAILABLE_MODULES: 'availableModules'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 29, 16, 21, 43, 702000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
        <Attribute.LAST_UPDATED_DATE: 'lastUpdatedDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEW_VERSION_AVAILABLE: 'newVersionAvailable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 14, 586000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OTN_D_U_I_D: 'otnDUID'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 14, 641000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'XTCGCEMPMAXYO',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TARGET_MODULE: 'targetModule'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 14, 586000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
          }),
        }),
      }),
      <Capability.SAMSUNG_CE_WASHER_BUBBLE_SOAK: 'samsungce.washerBubbleSoak'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 708000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.SAMSUNG_CE_WASHER_CYCLE: 'samsungce.washerCycle'>: dict({
        <Attribute.REFERENCE_TABLE: 'referenceTable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 6, 7, 8, 43, 30, 83000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'id': 'Table_02',
          }),
        }),
        <Attribute.SPECIALIZED_FUNCTION_CLASSIFICATION: 'specializedFunctionClassification'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 708000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 4,
        }),
        <Attribute.SUPPORTED_CYCLES: 'supportedCycles'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 56, 10, 591000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'cycle': '1C',
              'cycleType': 'allInOne',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                  ]),
                  'raw': '3500',
                }),
                'dryingLevel': dict({
                  'default': 'none',
                  'options': list([
                    'none',
                    'cupboard',
                    '30',
                    '60',
                    '90',
                  ]),
                  'raw': 'B01F',
                }),
                'rinseCycle': dict({
                  'default': '2',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '923F',
                }),
                'spinLevel': dict({
                  'default': '1400',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                    '800',
                    '1000',
                    '1200',
                    '1400',
                  ]),
                  'raw': 'A67F',
                }),
                'waterTemperature': dict({
                  'default': 'none',
                  'options': list([
                  ]),
                  'raw': '8000',
                }),
              }),
            }),
            dict({
              'cycle': '1B',
              'cycleType': 'allInOne',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '35F0',
                }),
                'dryingLevel': dict({
                  'default': 'none',
                  'options': list([
                    'none',
                    'cupboard',
                    '30',
                    '60',
                    '90',
                  ]),
                  'raw': 'B01F',
                }),
                'rinseCycle': dict({
                  'default': '2',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '923F',
                }),
                'spinLevel': dict({
                  'default': '1400',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                    '800',
                    '1000',
                    '1200',
                    '1400',
                  ]),
                  'raw': 'A67F',
                }),
                'waterTemperature': dict({
                  'default': '40',
                  'options': list([
                    'cold',
                    '20',
                    '30',
                    '40',
                    '60',
                    '90',
                  ]),
                  'raw': '847E',
                }),
              }),
            }),
            dict({
              'cycle': '1E',
              'cycleType': 'allInOne',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                  ]),
                  'raw': '3500',
                }),
                'dryingLevel': dict({
                  'default': 'none',
                  'options': list([
                    'none',
                    'cupboard',
                    '30',
                    '60',
                    '90',
                  ]),
                  'raw': 'B01F',
                }),
                'rinseCycle': dict({
                  'default': '2',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '923F',
                }),
                'spinLevel': dict({
                  'default': '1200',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                    '800',
                    '1000',
                    '1200',
                  ]),
                  'raw': 'A53F',
                }),
                'waterTemperature': dict({
                  'default': '30',
                  'options': list([
                    'cold',
                    '20',
                    '30',
                    '40',
                  ]),
                  'raw': '831E',
                }),
              }),
            }),
            dict({
              'cycle': '1D',
              'cycleType': 'allInOne',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '35F0',
                }),
                'dryingLevel': dict({
                  'default': 'none',
                  'options': list([
                    'none',
                    'cupboard',
                    '30',
                    '60',
                    '90',
                  ]),
                  'raw': 'B01F',
                }),
                'rinseCycle': dict({
                  'default': '2',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '923F',
                }),
                'spinLevel': dict({
                  'default': '1400',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                    '800',
                    '1000',
                    '1200',
                    '1400',
                  ]),
                  'raw': 'A67F',
                }),
                'waterTemperature': dict({
                  'default': '40',
                  'options': list([
                    'cold',
                    '20',
                    '30',
                    '40',
                  ]),
                  'raw': '841E',
                }),
              }),
            }),
            dict({
              'cycle': '1F',
              'cycleType': 'allInOne',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                  ]),
                  'raw': '3500',
                }),
                'dryingLevel': dict({
                  'default': 'none',
                  'options': list([
                    'none',
                    'cupboard',
                    '30',
                    '60',
                    '90',
                  ]),
                  'raw': 'B01F',
                }),
                'rinseCycle': dict({
                  'default': '2',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '923F',
                }),
                'spinLevel': dict({
                  'default': '1200',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                    '800',
                    '1000',
                    '1200',
                    '1400',
                  ]),
                  'raw': 'A57F',
                }),
                'waterTemperature': dict({
                  'default': 'cold',
                  'options': list([
                    'cold',
                  ]),
                  'raw': '8102',
                }),
              }),
            }),
            dict({
              'cycle': '25',
              'cycleType': 'allInOne',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '35F0',
                }),
                'dryingLevel': dict({
                  'default': 'none',
                  'options': list([
                    'none',
                    'cupboard',
                    '30',
                    '60',
                    '90',
                  ]),
                  'raw': 'B01F',
                }),
                'rinseCycle': dict({
                  'default': '2',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '923F',
                }),
                'spinLevel': dict({
                  'default': '1200',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                    '800',
                    '1000',
                    '1200',
                    '1400',
                  ]),
                  'raw': 'A57F',
                }),
                'waterTemperature': dict({
                  'default': '40',
                  'options': list([
                    'cold',
                    '20',
                    '30',
                    '40',
                    '60',
                  ]),
                  'raw': '843E',
                }),
              }),
            }),
            dict({
              'cycle': '26',
              'cycleType': 'allInOne',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                  ]),
                  'raw': '3500',
                }),
                'dryingLevel': dict({
                  'default': 'none',
                  'options': list([
                    'none',
                    'cupboard',
                    '30',
                    '60',
                    '90',
                  ]),
                  'raw': 'B01F',
                }),
                'rinseCycle': dict({
                  'default': '2',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                  ]),
                  'raw': '920F',
                }),
                'spinLevel': dict({
                  'default': '400',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                  ]),
                  'raw': 'A207',
                }),
                'waterTemperature': dict({
                  'default': '30',
                  'options': list([
                    'cold',
                    '20',
                    '30',
                    '40',
                  ]),
                  'raw': '831E',
                }),
              }),
            }),
            dict({
              'cycle': '33',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '35F0',
                }),
                'dryingLevel': dict({
                  'default': 'none',
                  'options': list([
                  ]),
                  'raw': 'B000',
                }),
                'rinseCycle': dict({
                  'default': '3',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '933F',
                }),
                'spinLevel': dict({
                  'default': '1400',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                    '800',
                    '1000',
                    '1200',
                    '1400',
                  ]),
                  'raw': 'A67F',
                }),
                'waterTemperature': dict({
                  'default': '60',
                  'options': list([
                    'cold',
                    '20',
                    '30',
                    '40',
                    '60',
                    '90',
                  ]),
                  'raw': '857E',
                }),
              }),
            }),
            dict({
              'cycle': '24',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '35F0',
                }),
                'dryingLevel': dict({
                  'default': 'none',
                  'options': list([
                  ]),
                  'raw': 'B000',
                }),
                'rinseCycle': dict({
                  'default': '3',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                  ]),
                  'raw': '930F',
                }),
                'spinLevel': dict({
                  'default': '800',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                    '800',
                  ]),
                  'raw': 'A30F',
                }),
                'waterTemperature': dict({
                  'default': '40',
                  'options': list([
                    'cold',
                    '20',
                    '30',
                    '40',
                  ]),
                  'raw': '841E',
                }),
              }),
            }),
            dict({
              'cycle': '32',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '35F0',
                }),
                'dryingLevel': dict({
                  'default': 'none',
                  'options': list([
                  ]),
                  'raw': 'B000',
                }),
                'rinseCycle': dict({
                  'default': '2',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '923F',
                }),
                'spinLevel': dict({
                  'default': '800',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                    '800',
                    '1000',
                    '1200',
                    '1400',
                  ]),
                  'raw': 'A37F',
                }),
                'waterTemperature': dict({
                  'default': '30',
                  'options': list([
                    'cold',
                    '20',
                    '30',
                    '40',
                    '60',
                  ]),
                  'raw': '833E',
                }),
              }),
            }),
            dict({
              'cycle': '20',
              'cycleType': 'allInOne',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '35F0',
                }),
                'dryingLevel': dict({
                  'default': 'none',
                  'options': list([
                    'none',
                    'cupboard',
                    '30',
                    '60',
                    '90',
                  ]),
                  'raw': 'B01F',
                }),
                'rinseCycle': dict({
                  'default': '4',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '943F',
                }),
                'spinLevel': dict({
                  'default': '1400',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                    '800',
                    '1000',
                    '1200',
                    '1400',
                  ]),
                  'raw': 'A67F',
                }),
                'waterTemperature': dict({
                  'default': '60',
                  'options': list([
                    'cold',
                    '20',
                    '30',
                    '40',
                    '60',
                    '90',
                  ]),
                  'raw': '857E',
                }),
              }),
            }),
            dict({
              'cycle': '22',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                  ]),
                  'raw': '3500',
                }),
                'dryingLevel': dict({
                  'default': 'none',
                  'options': list([
                  ]),
                  'raw': 'B000',
                }),
                'rinseCycle': dict({
                  'default': '2',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                  ]),
                  'raw': '920F',
                }),
                'spinLevel': dict({
                  'default': '800',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                    '800',
                  ]),
                  'raw': 'A30F',
                }),
                'waterTemperature': dict({
                  'default': '40',
                  'options': list([
                    'cold',
                    '20',
                    '30',
                    '40',
                  ]),
                  'raw': '841E',
                }),
              }),
            }),
            dict({
              'cycle': '23',
              'cycleType': 'allInOne',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                  ]),
                  'raw': '3500',
                }),
                'dryingLevel': dict({
                  'default': 'none',
                  'options': list([
                    'none',
                    'cupboard',
                    '30',
                    '60',
                    '90',
                  ]),
                  'raw': 'B01F',
                }),
                'rinseCycle': dict({
                  'default': '3',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                  ]),
                  'raw': '930F',
                }),
                'spinLevel': dict({
                  'default': '1200',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                    '800',
                    '1000',
                    '1200',
                    '1400',
                  ]),
                  'raw': 'A57F',
                }),
                'waterTemperature': dict({
                  'default': '30',
                  'options': list([
                    'cold',
                    '20',
                    '30',
                    '40',
                  ]),
                  'raw': '831E',
                }),
              }),
            }),
            dict({
              'cycle': '2F',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '35F0',
                }),
                'dryingLevel': dict({
                  'default': 'none',
                  'options': list([
                  ]),
                  'raw': 'B000',
                }),
                'rinseCycle': dict({
                  'default': '3',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '933F',
                }),
                'spinLevel': dict({
                  'default': '800',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                    '800',
                  ]),
                  'raw': 'A30F',
                }),
                'waterTemperature': dict({
                  'default': '30',
                  'options': list([
                    'cold',
                    '20',
                    '30',
                    '40',
                  ]),
                  'raw': '831E',
                }),
              }),
            }),
            dict({
              'cycle': '21',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                  ]),
                  'raw': '3500',
                }),
                'dryingLevel': dict({
                  'default': 'none',
                  'options': list([
                  ]),
                  'raw': 'B000',
                }),
                'rinseCycle': dict({
                  'default': '4',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '943F',
                }),
                'spinLevel': dict({
                  'default': '1400',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                    '800',
                    '1000',
                    '1200',
                    '1400',
                  ]),
                  'raw': 'A67F',
                }),
                'waterTemperature': dict({
                  'default': '40',
                  'options': list([
                    'cold',
                    '20',
                    '30',
                    '40',
                  ]),
                  'raw': '841E',
                }),
              }),
            }),
            dict({
              'cycle': '2D',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '35F0',
                }),
                'dryingLevel': dict({
                  'default': 'none',
                  'options': list([
                  ]),
                  'raw': 'B000',
                }),
                'rinseCycle': dict({
                  'default': '2',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '923F',
                }),
                'spinLevel': dict({
                  'default': '800',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                    '800',
                  ]),
                  'raw': 'A30F',
                }),
                'waterTemperature': dict({
                  'default': '40',
                  'options': list([
                    'cold',
                    '20',
                    '30',
                    '40',
                  ]),
                  'raw': '841E',
                }),
              }),
            }),
            dict({
              'cycle': '30',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '35F0',
                }),
                'dryingLevel': dict({
                  'default': 'none',
                  'options': list([
                  ]),
                  'raw': 'B000',
                }),
                'rinseCycle': dict({
                  'default': '2',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '923F',
                }),
                'spinLevel': dict({
                  'default': '1400',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                    '800',
                    '1000',
                    '1200',
                    '1400',
                  ]),
                  'raw': 'A67F',
                }),
                'waterTemperature': dict({
                  'default': '40',
                  'options': list([
                    'cold',
                    '20',
                    '30',
                    '40',
                    '60',
                  ]),
                  'raw': '843E',
                }),
              }),
            }),
            dict({
              'cycle': '27',
              'cycleType': 'allInOne',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                  ]),
                  'raw': '3500',
                }),
                'dryingLevel': dict({
                  'default': 'none',
                  'options': list([
                    'none',
                    'cupboard',
                    '30',
                    '60',
                    '90',
                  ]),
                  'raw': 'B01F',
                }),
                'rinseCycle': dict({
                  'default': '1',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '913F',
                }),
                'spinLevel': dict({
                  'default': '1400',
                  'options': list([
                    'rinseHold',
                    'noSpin',
                    '400',
                    '800',
                    '1000',
                    '1200',
                    '1400',
                  ]),
                  'raw': 'A67F',
                }),
                'waterTemperature': dict({
                  'default': 'none',
                  'options': list([
                  ]),
                  'raw': '8000',
                }),
              }),
            }),
            dict({
              'cycle': '28',
              'cycleType': 'allInOne',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                  ]),
                  'raw': '3500',
                }),
                'dryingLevel': dict({
                  'default': 'none',
                  'options': list([
                    'none',
                    'cupboard',
                    '30',
                    '60',
                    '90',
                  ]),
                  'raw': 'B01F',
                }),
                'rinseCycle': dict({
                  'default': '0',
                  'options': list([
                  ]),
                  'raw': '9000',
                }),
                'spinLevel': dict({
                  'default': '1400',
                  'options': list([
                    'noSpin',
                    '400',
                    '800',
                    '1000',
                    '1200',
                    '1400',
                  ]),
                  'raw': 'A67E',
                }),
                'waterTemperature': dict({
                  'default': 'none',
                  'options': list([
                  ]),
                  'raw': '8000',
                }),
              }),
            }),
            dict({
              'cycle': '36',
              'cycleType': 'allInOne',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                    'on',
                    'off',
                  ]),
                  'raw': '35F0',
                }),
                'dryingLevel': dict({
                  'default': 'cupboard',
                  'options': list([
                    'cupboard',
                    '30',
                    '60',
                    '90',
                  ]),
                  'raw': 'B11E',
                }),
                'rinseCycle': dict({
                  'default': '2',
                  'options': list([
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                  ]),
                  'raw': '923F',
                }),
                'spinLevel': dict({
                  'default': '1400',
                  'options': list([
                    '1400',
                  ]),
                  'raw': 'A640',
                }),
                'waterTemperature': dict({
                  'default': 'none',
                  'options': list([
                  ]),
                  'raw': '8000',
                }),
              }),
            }),
            dict({
              'cycle': '38',
              'cycleType': 'dryingOnly',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                  ]),
                  'raw': '3500',
                }),
                'dryingLevel': dict({
                  'default': 'cupboard',
                  'options': list([
                    'cupboard',
                    '30',
                    '60',
                    '90',
                  ]),
                  'raw': 'B11E',
                }),
                'rinseCycle': dict({
                  'default': '0',
                  'options': list([
                  ]),
                  'raw': '9000',
                }),
                'spinLevel': dict({
                  'default': 'rinseHold',
                  'options': list([
                  ]),
                  'raw': 'A000',
                }),
                'waterTemperature': dict({
                  'default': 'none',
                  'options': list([
                  ]),
                  'raw': '8000',
                }),
              }),
            }),
            dict({
              'cycle': '39',
              'cycleType': 'dryingOnly',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                  ]),
                  'raw': '3500',
                }),
                'dryingLevel': dict({
                  'default': 'cupboard',
                  'options': list([
                    'cupboard',
                    '30',
                    '60',
                    '90',
                  ]),
                  'raw': 'B11E',
                }),
                'rinseCycle': dict({
                  'default': '0',
                  'options': list([
                  ]),
                  'raw': '9000',
                }),
                'spinLevel': dict({
                  'default': 'rinseHold',
                  'options': list([
                  ]),
                  'raw': 'A000',
                }),
                'waterTemperature': dict({
                  'default': 'none',
                  'options': list([
                  ]),
                  'raw': '8000',
                }),
              }),
            }),
            dict({
              'cycle': '37',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                  ]),
                  'raw': '3500',
                }),
                'dryingLevel': dict({
                  'default': 'none',
                  'options': list([
                  ]),
                  'raw': 'B000',
                }),
                'rinseCycle': dict({
                  'default': '0',
                  'options': list([
                  ]),
                  'raw': '9000',
                }),
                'spinLevel': dict({
                  'default': 'rinseHold',
                  'options': list([
                  ]),
                  'raw': 'A000',
                }),
                'waterTemperature': dict({
                  'default': 'none',
                  'options': list([
                  ]),
                  'raw': '8000',
                }),
              }),
            }),
            dict({
              'cycle': '29',
              'cycleType': 'washingOnly',
              'supportedOptions': dict({
                'bubbleSoak': dict({
                  'default': 'off',
                  'options': list([
                  ]),
                  'raw': '3500',
                }),
                'dryingLevel': dict({
                  'default': 'none',
                  'options': list([
                  ]),
                  'raw': 'B000',
                }),
                'rinseCycle': dict({
                  'default': '2',
                  'options': list([
                    '2',
                  ]),
                  'raw': '9204',
                }),
                'spinLevel': dict({
                  'default': '1200',
                  'options': list([
                    '1200',
                  ]),
                  'raw': 'A520',
                }),
                'waterTemperature': dict({
                  'default': '70',
                  'options': list([
                    '70',
                  ]),
                  'raw': '8520',
                }),
              }),
            }),
          ]),
        }),
        <Attribute.WASHER_CYCLE: 'washerCycle'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 13, 6, 23, 375000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Table_02_Course_1C',
        }),
      }),
      <Capability.SAMSUNG_CE_WASHER_CYCLE_PRESET: 'samsungce.washerCyclePreset'>: dict({
        <Attribute.MAX_NUMBER_OF_PRESETS: 'maxNumberOfPresets'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 14, 812000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 10,
        }),
        <Attribute.PRESETS: 'presets'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WASHER_DELAY_END: 'samsungce.washerDelayEnd'>: dict({
        <Attribute.MINIMUM_RESERVABLE_TIME: 'minimumReservableTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 13, 6, 23, 441000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 159,
        }),
        <Attribute.REMAINING_TIME: 'remainingTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 676000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 0,
        }),
      }),
      <Capability.SAMSUNG_CE_WASHER_FREEZE_PREVENT: 'samsungce.washerFreezePrevent'>: dict({
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WASHER_OPERATING_STATE: 'samsungce.washerOperatingState'>: dict({
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 56, 24, 190000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.OPERATION_TIME: 'operationTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 13, 6, 23, 441000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 159,
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 26, 9, 44, 38, 648000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 1,
        }),
        <Attribute.REMAINING_TIME: 'remainingTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 13, 6, 23, 490000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 159,
        }),
        <Attribute.REMAINING_TIME_STR: 'remainingTimeStr'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 13, 6, 23, 490000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '02:39',
        }),
        <Attribute.SCHEDULED_JOBS: 'scheduledJobs'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 56, 17, 179000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'jobName': 'wash',
              'timeInMin': 4,
            }),
            dict({
              'jobName': 'spin',
              'timeInMin': 6,
            }),
          ]),
        }),
        <Attribute.SCHEDULED_PHASES: 'scheduledPhases'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 56, 17, 179000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'phaseName': 'wash',
              'timeInMin': 4,
            }),
            dict({
              'phaseName': 'spin',
              'timeInMin': 6,
            }),
          ]),
        }),
        <Attribute.SUPPORTED_OPERATING_STATES: 'supportedOperatingStates'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 6, 7, 8, 43, 30, 238000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'ready',
            'running',
            'paused',
          ]),
        }),
        <Attribute.WASHER_JOB_PHASE: 'washerJobPhase'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 676000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
        <Attribute.WASHER_JOB_STATE: 'washerJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 26, 9, 44, 38, 648000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
      }),
      <Capability.SAMSUNG_CE_WASHER_WASHING_TIME: 'samsungce.washerWashingTime'>: dict({
        <Attribute.SUPPORTED_WASHING_TIMES: 'supportedWashingTimes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WASHING_TIME: 'washingTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WASHER_WATER_LEVEL: 'samsungce.washerWaterLevel'>: dict({
        <Attribute.SUPPORTED_WATER_LEVEL: 'supportedWaterLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WATER_LEVEL: 'waterLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WASHER_WATER_VALVE: 'samsungce.washerWaterValve'>: dict({
        <Attribute.SUPPORTED_WATER_VALVE: 'supportedWaterValve'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WATER_VALVE: 'waterValve'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WATER_CONSUMPTION_REPORT: 'samsungce.waterConsumptionReport'>: dict({
        <Attribute.WATER_CONSUMPTION: 'waterConsumption'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WELCOME_MESSAGE: 'samsungce.welcomeMessage'>: dict({
        <Attribute.WELCOME_MESSAGE: 'welcomeMessage'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>: dict({
        <Attribute.DUMP_TYPE: 'dumpType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 14, 641000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'file',
        }),
        <Attribute.ENDPOINT: 'endpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 14, 641000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'SSM',
        }),
        <Attribute.LOG_TYPE: 'logType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 14, 641000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'errCode',
            'dump',
          ]),
        }),
        <Attribute.MIN_VERSION: 'minVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 14, 641000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '1.0',
        }),
        <Attribute.MN_ID: 'mnId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 14, 641000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '0AJT',
        }),
        <Attribute.PROTOCOL_TYPE: 'protocolType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 14, 641000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'wifi_https',
        }),
        <Attribute.SETUP_ID: 'setupId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 14, 641000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '210',
        }),
        <Attribute.SIGNIN_PERMISSION: 'signinPermission'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TS_ID: 'tsId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>: dict({
        <Attribute.AUTO_RECONNECTION: 'autoReconnection'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MIN_VERSION: 'minVersion'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.PROTOCOL_TYPE: 'protocolType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_AUTH_TYPE: 'supportedAuthType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_WI_FI_FREQ: 'supportedWiFiFreq'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 13, 6, 23, 271000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.WASHER_OPERATING_STATE: 'washerOperatingState'>: dict({
        <Attribute.COMPLETION_TIME: 'completionTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 13, 6, 23, 490000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2025-02-07T15:45:23Z',
        }),
        <Attribute.MACHINE_STATE: 'machineState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 56, 24, 190000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'stop',
        }),
        <Attribute.SUPPORTED_MACHINE_STATES: 'supportedMachineStates'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 676000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'stop',
            'run',
            'pause',
          ]),
        }),
        <Attribute.WASHER_JOB_STATE: 'washerJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 12, 55, 13, 676000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[ecobee_sensor]
  dict({
    'main': dict({
      <Capability.HEALTH_CHECK: 'healthCheck'>: dict({
        <Attribute.DEVICE_WATCH_DEVICE_STATUS: 'DeviceWatch-DeviceStatus'>: dict({
          'data': dict({
          }),
          'timestamp': datetime.datetime(2025, 2, 11, 14, 23, 22, 53000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'online',
        }),
        <Attribute.DEVICE_WATCH_ENROLL: 'DeviceWatch-Enroll'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.CHECK_INTERVAL: 'checkInterval'>: dict({
          'data': dict({
            'deviceScheme': 'UNTRACKED',
            'protocol': 'cloud',
          }),
          'timestamp': datetime.datetime(2025, 1, 16, 21, 14, 7, 471000, tzinfo=datetime.timezone.utc),
          'unit': 's',
          'value': 60,
        }),
        <Attribute.HEALTH_STATUS: 'healthStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.MOTION_SENSOR: 'motionSensor'>: dict({
        <Attribute.MOTION: 'motion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 13, 58, 50, 44000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'inactive',
        }),
      }),
      <Capability.PRESENCE_SENSOR: 'presenceSensor'>: dict({
        <Attribute.PRESENCE: 'presence'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 13, 58, 50, 44000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'not present',
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 14, 36, 16, 823000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 71,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[ecobee_thermostat]
  dict({
    'main': dict({
      <Capability.HEALTH_CHECK: 'healthCheck'>: dict({
        <Attribute.DEVICE_WATCH_DEVICE_STATUS: 'DeviceWatch-DeviceStatus'>: dict({
          'data': dict({
          }),
          'timestamp': datetime.datetime(2025, 2, 11, 13, 39, 58, 286000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'online',
        }),
        <Attribute.DEVICE_WATCH_ENROLL: 'DeviceWatch-Enroll'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.CHECK_INTERVAL: 'checkInterval'>: dict({
          'data': dict({
            'deviceScheme': 'UNTRACKED',
            'protocol': 'cloud',
          }),
          'timestamp': datetime.datetime(2025, 1, 16, 21, 14, 7, 448000, tzinfo=datetime.timezone.utc),
          'unit': 's',
          'value': 60,
        }),
        <Attribute.HEALTH_STATUS: 'healthStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.RELATIVE_HUMIDITY_MEASUREMENT: 'relativeHumidityMeasurement'>: dict({
        <Attribute.HUMIDITY: 'humidity'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 14, 36, 17, 275000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 32,
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 14, 23, 21, 556000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 71,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>: dict({
        <Attribute.COOLING_SETPOINT: 'coolingSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 13, 39, 58, 286000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 73,
        }),
        <Attribute.COOLING_SETPOINT_RANGE: 'coolingSetpointRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.THERMOSTAT_FAN_MODE: 'thermostatFanMode'>: dict({
        <Attribute.SUPPORTED_THERMOSTAT_FAN_MODES: 'supportedThermostatFanModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 13, 39, 58, 286000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'on',
            'auto',
          ]),
        }),
        <Attribute.THERMOSTAT_FAN_MODE: 'thermostatFanMode'>: dict({
          'data': dict({
            'supportedThermostatFanModes': list([
              'on',
              'auto',
            ]),
          }),
          'timestamp': datetime.datetime(2025, 2, 11, 13, 39, 58, 286000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'auto',
        }),
      }),
      <Capability.THERMOSTAT_HEATING_SETPOINT: 'thermostatHeatingSetpoint'>: dict({
        <Attribute.HEATING_SETPOINT: 'heatingSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 13, 39, 58, 286000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 71,
        }),
        <Attribute.HEATING_SETPOINT_RANGE: 'heatingSetpointRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.THERMOSTAT_MODE: 'thermostatMode'>: dict({
        <Attribute.SUPPORTED_THERMOSTAT_MODES: 'supportedThermostatModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 13, 39, 58, 286000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'off',
            'cool',
            'auxheatonly',
            'auto',
          ]),
        }),
        <Attribute.THERMOSTAT_MODE: 'thermostatMode'>: dict({
          'data': dict({
            'supportedThermostatModes': list([
              'off',
              'cool',
              'auxheatonly',
              'auto',
            ]),
          }),
          'timestamp': datetime.datetime(2025, 2, 11, 13, 39, 58, 286000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'heat',
        }),
      }),
      <Capability.THERMOSTAT_OPERATING_STATE: 'thermostatOperatingState'>: dict({
        <Attribute.THERMOSTAT_OPERATING_STATE: 'thermostatOperatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 13, 39, 58, 286000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'heating',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[ge_dimmer_assoc]
  dict({
    'main': dict({
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 17, 49, 842000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.SWITCH_LEVEL: 'switchLevel'>: dict({
        <Attribute.LEVEL: 'level'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 14, 48, 48, 158000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 100,
        }),
        <Attribute.LEVEL_RANGE: 'levelRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[ge_in_wall_smart_dimmer]
  dict({
    'main': dict({
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 23, 21, 22, 908000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.SWITCH_LEVEL: 'switchLevel'>: dict({
        <Attribute.LEVEL: 'level'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 39, 25, 819000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 39,
        }),
        <Attribute.LEVEL_RANGE: 'levelRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[hub]
  dict({
  })
# ---
# name: test_fetching_status_of_single_device[hue_color_temperature_bulb]
  dict({
    'main': dict({
      <Capability.COLOR_TEMPERATURE: 'colorTemperature'>: dict({
        <Attribute.COLOR_TEMPERATURE: 'colorTemperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 21, 56, 4, 127000, tzinfo=datetime.timezone.utc),
          'unit': 'K',
          'value': 3000,
        }),
        <Attribute.COLOR_TEMPERATURE_RANGE: 'colorTemperatureRange'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 15, 14, 53, 823000, tzinfo=datetime.timezone.utc),
          'unit': 'K',
          'value': dict({
            'maximum': 6535,
            'minimum': 2000,
          }),
        }),
      }),
      <Capability.HEALTH_CHECK: 'healthCheck'>: dict({
        <Attribute.DEVICE_WATCH_DEVICE_STATUS: 'DeviceWatch-DeviceStatus'>: dict({
          'data': dict({
          }),
          'timestamp': datetime.datetime(2025, 2, 7, 15, 14, 53, 823000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'online',
        }),
        <Attribute.DEVICE_WATCH_ENROLL: 'DeviceWatch-Enroll'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.CHECK_INTERVAL: 'checkInterval'>: dict({
          'data': dict({
            'deviceScheme': 'UNTRACKED',
            'protocol': 'cloud',
          }),
          'timestamp': datetime.datetime(2023, 12, 17, 18, 11, 41, 671000, tzinfo=datetime.timezone.utc),
          'unit': 's',
          'value': 60,
        }),
        <Attribute.HEALTH_STATUS: 'healthStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 21, 56, 4, 127000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'on',
        }),
      }),
      <Capability.SWITCH_LEVEL: 'switchLevel'>: dict({
        <Attribute.LEVEL: 'level'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 21, 56, 4, 127000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 70,
        }),
        <Attribute.LEVEL_RANGE: 'levelRange'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 15, 14, 53, 823000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': dict({
            'maximum': 100,
            'minimum': 1,
          }),
        }),
      }),
      <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>: dict({
        <Attribute.CIRCADIAN: 'circadian'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>: dict({
        <Attribute.FADE: 'fade'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[hue_rgbw_color_bulb]
  dict({
    'main': dict({
      <Capability.COLOR_CONTROL: 'colorControl'>: dict({
        <Attribute.COLOR: 'color'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.HUE: 'hue'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 15, 14, 53, 812000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 60.8072,
        }),
        <Attribute.SATURATION: 'saturation'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 15, 14, 53, 812000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 60,
        }),
      }),
      <Capability.COLOR_TEMPERATURE: 'colorTemperature'>: dict({
        <Attribute.COLOR_TEMPERATURE: 'colorTemperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 21, 56, 2, 381000, tzinfo=datetime.timezone.utc),
          'unit': 'K',
          'value': 3000,
        }),
        <Attribute.COLOR_TEMPERATURE_RANGE: 'colorTemperatureRange'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 15, 14, 52, 807000, tzinfo=datetime.timezone.utc),
          'unit': 'K',
          'value': dict({
            'maximum': 6535,
            'minimum': 2000,
          }),
        }),
      }),
      <Capability.HEALTH_CHECK: 'healthCheck'>: dict({
        <Attribute.DEVICE_WATCH_DEVICE_STATUS: 'DeviceWatch-DeviceStatus'>: dict({
          'data': dict({
          }),
          'timestamp': datetime.datetime(2025, 2, 7, 15, 14, 53, 812000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'online',
        }),
        <Attribute.DEVICE_WATCH_ENROLL: 'DeviceWatch-Enroll'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.CHECK_INTERVAL: 'checkInterval'>: dict({
          'data': dict({
            'deviceScheme': 'UNTRACKED',
            'protocol': 'cloud',
          }),
          'timestamp': datetime.datetime(2023, 12, 17, 18, 11, 41, 678000, tzinfo=datetime.timezone.utc),
          'unit': 's',
          'value': 60,
        }),
        <Attribute.HEALTH_STATUS: 'healthStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SAMSUNG_IM_HUE_SYNC_MODE: 'samsungim.hueSyncMode'>: dict({
        <Attribute.MODE: 'mode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 15, 14, 53, 812000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'normal',
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 7, 8, 19, 519000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.SWITCH_LEVEL: 'switchLevel'>: dict({
        <Attribute.LEVEL: 'level'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 21, 56, 2, 381000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 70,
        }),
        <Attribute.LEVEL_RANGE: 'levelRange'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 15, 14, 53, 812000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': dict({
            'maximum': 100,
            'minimum': 1,
          }),
        }),
      }),
      <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>: dict({
        <Attribute.CIRCADIAN: 'circadian'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>: dict({
        <Attribute.FADE: 'fade'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[ikea_e26]
  dict({
    'main': dict({
      <Capability.COLOR_TEMPERATURE: 'colorTemperature'>: dict({
        <Attribute.COLOR_TEMPERATURE: 'colorTemperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 16, 42, 27, 494000, tzinfo=datetime.timezone.utc),
          'unit': 'K',
          'value': 3395,
        }),
        <Attribute.COLOR_TEMPERATURE_RANGE: 'colorTemperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>: dict({
        <Attribute.AVAILABLE_VERSION: 'availableVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 9, 37, 773000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '11115720',
        }),
        <Attribute.CURRENT_VERSION: 'currentVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 9, 37, 760000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '11115720',
        }),
        <Attribute.LAST_UPDATE_STATUS: 'lastUpdateStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_UPDATE_STATUS_REASON: 'lastUpdateStatusReason'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_UPDATE_TIME: 'lastUpdateTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.STATE: 'state'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 9, 37, 766000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'normalOperation',
        }),
        <Attribute.SUPPORTED_COMMANDS: 'supportedCommands'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.UPDATE_AVAILABLE: 'updateAvailable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 9, 37, 767000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 50, 29, 195000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.SWITCH_LEVEL: 'switchLevel'>: dict({
        <Attribute.LEVEL: 'level'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 16, 42, 27, 457000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 20,
        }),
        <Attribute.LEVEL_RANGE: 'levelRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>: dict({
        <Attribute.CIRCADIAN: 'circadian'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>: dict({
        <Attribute.FADE: 'fade'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[ikea_floor_lamp]
  dict({
    'main': dict({
      <Capability.COLOR_TEMPERATURE: 'colorTemperature'>: dict({
        <Attribute.COLOR_TEMPERATURE: 'colorTemperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 6, 22, 37, 47, 911000, tzinfo=datetime.timezone.utc),
          'unit': 'K',
          'value': 2857,
        }),
        <Attribute.COLOR_TEMPERATURE_RANGE: 'colorTemperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>: dict({
        <Attribute.AVAILABLE_VERSION: 'availableVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 6, 22, 39, 57, 915000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '11115720',
        }),
        <Attribute.CURRENT_VERSION: 'currentVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 6, 22, 39, 57, 609000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '11115720',
        }),
        <Attribute.LAST_UPDATE_STATUS: 'lastUpdateStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_UPDATE_STATUS_REASON: 'lastUpdateStatusReason'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_UPDATE_TIME: 'lastUpdateTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.STATE: 'state'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 6, 22, 39, 57, 911000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'normalOperation',
        }),
        <Attribute.SUPPORTED_COMMANDS: 'supportedCommands'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.UPDATE_AVAILABLE: 'updateAvailable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 6, 22, 39, 57, 913000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 6, 22, 37, 47, 16000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'on',
        }),
      }),
      <Capability.SWITCH_LEVEL: 'switchLevel'>: dict({
        <Attribute.LEVEL: 'level'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 6, 22, 37, 46, 588000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 100,
        }),
        <Attribute.LEVEL_RANGE: 'levelRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>: dict({
        <Attribute.CIRCADIAN: 'circadian'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>: dict({
        <Attribute.FADE: 'fade'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[ikea_remote_control]
  dict({
    'button1': dict({
      <Capability.BUTTON: 'button'>: dict({
        <Attribute.BUTTON: 'button'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 8, 13, 14, 57, 24, 797000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'pushed',
        }),
        <Attribute.NUMBER_OF_BUTTONS: 'numberOfButtons'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 8, 13, 14, 50, 16, 776000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 1,
        }),
        <Attribute.SUPPORTED_BUTTON_VALUES: 'supportedButtonValues'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 8, 13, 14, 50, 16, 772000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'pushed',
            'held',
          ]),
        }),
      }),
    }),
    'button2': dict({
      <Capability.BUTTON: 'button'>: dict({
        <Attribute.BUTTON: 'button'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 8, 13, 14, 57, 25, 59000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'pushed',
        }),
        <Attribute.NUMBER_OF_BUTTONS: 'numberOfButtons'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 8, 13, 14, 50, 16, 773000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 1,
        }),
        <Attribute.SUPPORTED_BUTTON_VALUES: 'supportedButtonValues'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 8, 13, 14, 50, 16, 736000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'pushed',
            'held',
          ]),
        }),
      }),
    }),
    'main': dict({
      <Capability.BATTERY: 'battery'>: dict({
        <Attribute.BATTERY: 'battery'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 8, 13, 14, 50, 17, 333000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 100,
        }),
        <Attribute.QUANTITY: 'quantity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TYPE: 'type'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.BUTTON: 'button'>: dict({
        <Attribute.BUTTON: 'button'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 8, 13, 14, 57, 25, 55000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'pushed',
        }),
        <Attribute.NUMBER_OF_BUTTONS: 'numberOfButtons'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 8, 13, 14, 50, 16, 730000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 2,
        }),
        <Attribute.SUPPORTED_BUTTON_VALUES: 'supportedButtonValues'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 8, 13, 14, 50, 16, 731000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'pushed',
            'held',
          ]),
        }),
      }),
      <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>: dict({
        <Attribute.AVAILABLE_VERSION: 'availableVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 8, 13, 14, 51, 33, 136000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '22010631',
        }),
        <Attribute.CURRENT_VERSION: 'currentVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 8, 13, 14, 51, 32, 892000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '22010631',
        }),
        <Attribute.LAST_UPDATE_STATUS: 'lastUpdateStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_UPDATE_STATUS_REASON: 'lastUpdateStatusReason'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_UPDATE_TIME: 'lastUpdateTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.STATE: 'state'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 8, 13, 14, 51, 33, 133000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'normalOperation',
        }),
        <Attribute.SUPPORTED_COMMANDS: 'supportedCommands'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.UPDATE_AVAILABLE: 'updateAvailable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 8, 13, 14, 51, 33, 134000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[im_smarttag2_ble_uwb]
  dict({
    'main': dict({
      <Capability.ALARM: 'alarm'>: dict({
        <Attribute.ALARM: 'alarm'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.AUDIO_VOLUME: 'audioVolume'>: dict({
        <Attribute.VOLUME: 'volume'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.BATTERY: 'battery'>: dict({
        <Attribute.BATTERY: 'battery'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.QUANTITY: 'quantity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TYPE: 'type'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>: dict({
        <Attribute.AVAILABLE_VERSION: 'availableVersion'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.CURRENT_VERSION: 'currentVersion'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_UPDATE_STATUS: 'lastUpdateStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_UPDATE_STATUS_REASON: 'lastUpdateStatusReason'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_UPDATE_TIME: 'lastUpdateTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.STATE: 'state'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_COMMANDS: 'supportedCommands'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.UPDATE_AVAILABLE: 'updateAvailable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 6, 25, 5, 56, 22, 227000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
      }),
      <Capability.GEOFENCE: 'geofence'>: dict({
        <Attribute.ENABLE_STATE: 'enableState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.GEOFENCE: 'geofence'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NAME: 'name'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.GEOLOCATION: 'geolocation'>: dict({
        <Attribute.ACCURACY: 'accuracy'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ALTITUDE_ACCURACY: 'altitudeAccuracy'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.HEADING: 'heading'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_UPDATE_TIME: 'lastUpdateTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LATITUDE: 'latitude'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LONGITUDE: 'longitude'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.METHOD: 'method'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SPEED: 'speed'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.TAG_E2E_ENCRYPTION: 'tag.e2eEncryption'>: dict({
        <Attribute.ENCRYPTION: 'encryption'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.TAG_FACTORY_RESET: 'tag.factoryReset'>: dict({
      }),
      <Capability.TAG_SEARCHING_STATUS: 'tag.searchingStatus'>: dict({
        <Attribute.SEARCHING_STATUS: 'searchingStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.TAG_TAG_BUTTON: 'tag.tagButton'>: dict({
        <Attribute.TAG_BUTTON: 'tagButton'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.TAG_TAG_STATUS: 'tag.tagStatus'>: dict({
        <Attribute.CONNECTED_DEVICE_ID: 'connectedDeviceId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.CONNECTED_USER_ID: 'connectedUserId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TAG_STATUS: 'tagStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.TAG_UPDATED_INFO: 'tag.updatedInfo'>: dict({
        <Attribute.CONNECTION: 'connection'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 2, 27, 17, 44, 57, 638000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'connected',
        }),
      }),
      <Capability.TAG_UWB_ACTIVATION: 'tag.uwbActivation'>: dict({
        <Attribute.UWB_ACTIVATION: 'uwbActivation'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[im_smarttag_ble_uwb]
  dict({
    'main': dict({
      <Capability.ALARM: 'alarm'>: dict({
        <Attribute.ALARM: 'alarm'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.AUDIO_VOLUME: 'audioVolume'>: dict({
        <Attribute.VOLUME: 'volume'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.BATTERY: 'battery'>: dict({
        <Attribute.BATTERY: 'battery'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.QUANTITY: 'quantity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TYPE: 'type'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>: dict({
        <Attribute.AVAILABLE_VERSION: 'availableVersion'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.CURRENT_VERSION: 'currentVersion'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_UPDATE_STATUS: 'lastUpdateStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_UPDATE_STATUS_REASON: 'lastUpdateStatusReason'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_UPDATE_TIME: 'lastUpdateTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.STATE: 'state'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_COMMANDS: 'supportedCommands'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.UPDATE_AVAILABLE: 'updateAvailable'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.GEOFENCE: 'geofence'>: dict({
        <Attribute.ENABLE_STATE: 'enableState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.GEOFENCE: 'geofence'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NAME: 'name'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.GEOLOCATION: 'geolocation'>: dict({
        <Attribute.ACCURACY: 'accuracy'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ALTITUDE_ACCURACY: 'altitudeAccuracy'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.HEADING: 'heading'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_UPDATE_TIME: 'lastUpdateTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LATITUDE: 'latitude'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LONGITUDE: 'longitude'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.METHOD: 'method'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SPEED: 'speed'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.TAG_E2E_ENCRYPTION: 'tag.e2eEncryption'>: dict({
        <Attribute.ENCRYPTION: 'encryption'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.TAG_FACTORY_RESET: 'tag.factoryReset'>: dict({
      }),
      <Capability.TAG_SEARCHING_STATUS: 'tag.searchingStatus'>: dict({
        <Attribute.SEARCHING_STATUS: 'searchingStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.TAG_TAG_BUTTON: 'tag.tagButton'>: dict({
        <Attribute.TAG_BUTTON: 'tagButton'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.TAG_TAG_STATUS: 'tag.tagStatus'>: dict({
        <Attribute.CONNECTED_DEVICE_ID: 'connectedDeviceId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.CONNECTED_USER_ID: 'connectedUserId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TAG_STATUS: 'tagStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.TAG_UPDATED_INFO: 'tag.updatedInfo'>: dict({
        <Attribute.CONNECTION: 'connection'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 5, 25, 10, 5, 45, 139000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'connected',
        }),
      }),
      <Capability.TAG_UWB_ACTIVATION: 'tag.uwbActivation'>: dict({
        <Attribute.UWB_ACTIVATION: 'uwbActivation'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[iphone]
  dict({
    'main': dict({
      <Capability.PRESENCE_SENSOR: 'presenceSensor'>: dict({
        <Attribute.PRESENCE: 'presence'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 9, 22, 18, 12, 25, 12000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'present',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[ledvance_switch]
  dict({
    'main': dict({
      <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>: dict({
        <Attribute.AVAILABLE_VERSION: 'availableVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 19, 8, 34, 692000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '00102101',
        }),
        <Attribute.CURRENT_VERSION: 'currentVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 19, 8, 34, 690000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '00102101',
        }),
        <Attribute.LAST_UPDATE_STATUS: 'lastUpdateStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_UPDATE_STATUS_REASON: 'lastUpdateStatusReason'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_UPDATE_TIME: 'lastUpdateTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.STATE: 'state'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 19, 8, 34, 691000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'normalOperation',
        }),
        <Attribute.SUPPORTED_COMMANDS: 'supportedCommands'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.UPDATE_AVAILABLE: 'updateAvailable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 19, 8, 34, 693000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 24, 49, 699000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[main_virtual_device]
  dict({
    'main': dict({
      <Capability.LEGENDABSOLUTE60149_CREATE_DEVICE2: 'legendabsolute60149.createDevice2'>: dict({
        <Attribute.CREATE_DEVICE: 'createDevice'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 5, 18, 19, 42, 10000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Total Devices: 1',
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[multipurpose_sensor]
  dict({
    'main': dict({
      <Capability.ACCELERATION_SENSOR: 'accelerationSensor'>: dict({
        <Attribute.ACCELERATION: 'acceleration'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 27, 46, 812000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'inactive',
        }),
      }),
      <Capability.BATTERY: 'battery'>: dict({
        <Attribute.BATTERY: 'battery'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 12, 24, 2, 74000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 50,
        }),
        <Attribute.QUANTITY: 'quantity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TYPE: 'type'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CONTACT_SENSOR: 'contactSensor'>: dict({
        <Attribute.CONTACT: 'contact'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 14, 0, 28, 332000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'closed',
        }),
      }),
      <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>: dict({
        <Attribute.AVAILABLE_VERSION: 'availableVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 4, 20, 25, 600000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '0000001B',
        }),
        <Attribute.CURRENT_VERSION: 'currentVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 4, 20, 25, 593000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '0000001B',
        }),
        <Attribute.LAST_UPDATE_STATUS: 'lastUpdateStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_UPDATE_STATUS_REASON: 'lastUpdateStatusReason'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_UPDATE_TIME: 'lastUpdateTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.STATE: 'state'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 4, 20, 25, 600000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'normalOperation',
        }),
        <Attribute.SUPPORTED_COMMANDS: 'supportedCommands'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.UPDATE_AVAILABLE: 'updateAvailable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 4, 20, 25, 601000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 56, 19, 744000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 67.0,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.THREE_AXIS: 'threeAxis'>: dict({
        <Attribute.THREE_AXIS: 'threeAxis'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 27, 36, 673000, tzinfo=datetime.timezone.utc),
          'unit': 'mG',
          'value': list([
            20,
            8,
            -1042,
          ]),
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[sengled]
  dict({
    'main': dict({
      <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>: dict({
        <Attribute.AVAILABLE_VERSION: 'availableVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 14, 56, 17, 80000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '00000009',
        }),
        <Attribute.CURRENT_VERSION: 'currentVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 14, 56, 17, 81000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '00000009',
        }),
        <Attribute.LAST_UPDATE_STATUS: 'lastUpdateStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_UPDATE_STATUS_REASON: 'lastUpdateStatusReason'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_UPDATE_TIME: 'lastUpdateTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.STATE: 'state'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 14, 56, 17, 80000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'normalOperation',
        }),
        <Attribute.SUPPORTED_COMMANDS: 'supportedCommands'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.UPDATE_AVAILABLE: 'updateAvailable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 14, 56, 17, 78000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 9, 35, 224000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.SWITCH_LEVEL: 'switchLevel'>: dict({
        <Attribute.LEVEL: 'level'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 40, 49, 826000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 100,
        }),
        <Attribute.LEVEL_RANGE: 'levelRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>: dict({
        <Attribute.FADE: 'fade'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[sensibo_airconditioner_1]
  dict({
    'main': dict({
      <Capability.AIR_CONDITIONER_MODE: 'airConditionerMode'>: dict({
        <Attribute.AIR_CONDITIONER_MODE: 'airConditionerMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 10, 9, 47, 758000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'cool',
        }),
        <Attribute.AVAILABLE_AC_MODES: 'availableAcModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_AC_MODES: 'supportedAcModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.HEALTH_CHECK: 'healthCheck'>: dict({
        <Attribute.DEVICE_WATCH_DEVICE_STATUS: 'DeviceWatch-DeviceStatus'>: dict({
          'data': dict({
          }),
          'timestamp': datetime.datetime(2025, 2, 9, 10, 9, 47, 758000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'online',
        }),
        <Attribute.DEVICE_WATCH_ENROLL: 'DeviceWatch-Enroll'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.CHECK_INTERVAL: 'checkInterval'>: dict({
          'data': dict({
            'deviceScheme': 'UNTRACKED',
            'protocol': 'cloud',
          }),
          'timestamp': datetime.datetime(2024, 12, 4, 10, 10, 2, 934000, tzinfo=datetime.timezone.utc),
          'unit': 's',
          'value': 60,
        }),
        <Attribute.HEALTH_STATUS: 'healthStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 10, 9, 47, 758000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>: dict({
        <Attribute.COOLING_SETPOINT: 'coolingSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 10, 9, 47, 758000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': 20,
        }),
        <Attribute.COOLING_SETPOINT_RANGE: 'coolingSetpointRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[soundbar_hw_q80_r]
  dict({
    'main': dict({
      <Capability.AUDIO_MUTE: 'audioMute'>: dict({
        <Attribute.MUTE: 'mute'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 4, 18, 7, 796000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'unmuted',
        }),
      }),
      <Capability.AUDIO_NOTIFICATION: 'audioNotification'>: dict({
      }),
      <Capability.AUDIO_TRACK_DATA: 'audioTrackData'>: dict({
        <Attribute.AUDIO_TRACK_DATA: 'audioTrackData'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 5, 21, 23, 40, 238000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'artist': '',
            'title': '',
          }),
        }),
        <Attribute.ELAPSED_TIME: 'elapsedTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 7, 30, 16, 9, 9, 109000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.TOTAL_TIME: 'totalTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 7, 30, 16, 9, 9, 109000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.AUDIO_VOLUME: 'audioVolume'>: dict({
        <Attribute.VOLUME: 'volume'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 4, 18, 7, 796000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 6,
        }),
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': dict({
            'href': '/sec/networkaudio/soundmode',
          }),
          'timestamp': datetime.datetime(2023, 7, 16, 23, 16, 55, 582000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'payload': dict({
              'if': list([
                'oic.if.a',
                'oic.if.baseline',
              ]),
              'rt': list([
                'x.com.samsung.networkaudio.soundmode',
              ]),
              'x.com.samsung.networkaudio.soundmode': 'standard',
            }),
          }),
        }),
      }),
      <Capability.MEDIA_INPUT_SOURCE: 'mediaInputSource'>: dict({
        <Attribute.INPUT_SOURCE: 'inputSource'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 0, 8, 44, 336000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'digital',
        }),
        <Attribute.SUPPORTED_INPUT_SOURCES: 'supportedInputSources'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 0, 8, 44, 336000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'wifi',
            'bluetooth',
            'HDMI1',
            'HDMI2',
            'digital',
          ]),
        }),
      }),
      <Capability.MEDIA_PLAYBACK: 'mediaPlayback'>: dict({
        <Attribute.PLAYBACK_STATUS: 'playbackStatus'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 4, 35, 56, 245000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'stopped',
        }),
        <Attribute.SUPPORTED_PLAYBACK_COMMANDS: 'supportedPlaybackCommands'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 4, 35, 56, 245000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'play',
            'pause',
            'stop',
          ]),
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 18, 21, 7, 25, 406000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '12345678-1234-1234-1234-123456789012',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 18, 21, 7, 25, 406000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'res.1.1.0,sh.1.1.0',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 18, 21, 7, 25, 406000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 18, 21, 7, 25, 406000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2018-01-01',
        }),
        <Attribute.OCF_FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 18, 21, 7, 25, 406000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'HW-Q80RWWB-1012.6',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 18, 21, 7, 25, 406000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '0-0',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 18, 21, 7, 25, 406000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 18, 21, 7, 25, 406000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 18, 21, 7, 25, 406000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Q80R',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 18, 21, 7, 25, 406000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '4.1.10',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 18, 21, 7, 25, 406000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Tizen 4.0',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 18, 21, 7, 25, 406000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com/sec/audio-video/',
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 18, 21, 7, 25, 406000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[AV] Samsung Soundbar Q80R',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 18, 21, 7, 25, 406000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '12345678-1234-1234-1234-123456789012',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 18, 21, 7, 25, 406000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'NONE',
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 18, 21, 7, 25, 406000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'VD-NetworkAudio-001S',
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SAMSUNG_VD_AUDIO_INPUT_SOURCE: 'samsungvd.audioInputSource'>: dict({
        <Attribute.INPUT_SOURCE: 'inputSource'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 0, 8, 44, 336000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'digital',
        }),
        <Attribute.SUPPORTED_INPUT_SOURCES: 'supportedInputSources'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 0, 8, 44, 336000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'wifi',
            'bluetooth',
            'HDMI1',
            'HDMI2',
            'digital',
          ]),
        }),
      }),
      <Capability.SAMSUNG_VD_GROUP_INFO: 'samsungvd.groupInfo'>: dict({
        <Attribute.CHANNEL: 'channel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 22, 4, 12, 413000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'all',
        }),
        <Attribute.MASTER_NAME: 'masterName'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 22, 4, 12, 413000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.ROLE: 'role'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 22, 4, 12, 413000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 22, 4, 12, 413000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'single',
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 0, 8, 44, 414000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'on',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[switch_binary_indicator]
  dict({
    'main': dict({
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 16, 26, 22, 800000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[switch_level]
  dict({
    'main': dict({
      <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>: dict({
        <Attribute.AVAILABLE_VERSION: 'availableVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 16, 57, 40, 214000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '0000000C',
        }),
        <Attribute.CURRENT_VERSION: 'currentVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 16, 57, 40, 212000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '0000000C',
        }),
        <Attribute.LAST_UPDATE_STATUS: 'lastUpdateStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_UPDATE_STATUS_REASON: 'lastUpdateStatusReason'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_UPDATE_TIME: 'lastUpdateTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.STATE: 'state'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 16, 57, 40, 212000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'normalOperation',
        }),
        <Attribute.SUPPORTED_COMMANDS: 'supportedCommands'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.UPDATE_AVAILABLE: 'updateAvailable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 16, 57, 40, 210000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
      }),
      <Capability.LEGENDABSOLUTE60149_DRIVER_VERSION1: 'legendabsolute60149.driverVersion1'>: dict({
        <Attribute.DRIVER_VERSION: 'driverVersion'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.LEGENDABSOLUTE60149_EFFECTS_SET_COMMAND: 'legendabsolute60149.effectsSetCommand'>: dict({
        <Attribute.EFFECTS_SET_COMMAND: 'effectsSetCommand'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 10, 2, 12, 5, 15, 168000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Inactive',
        }),
      }),
      <Capability.LEGENDABSOLUTE60149_FORCED_ON_LEVEL: 'legendabsolute60149.forcedOnLevel'>: dict({
        <Attribute.FORCED_ON_LEVEL: 'forcedOnLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 10, 2, 12, 5, 15, 136000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 0,
        }),
      }),
      <Capability.LEGENDABSOLUTE60149_GET_GROUPS: 'legendabsolute60149.getGroups'>: dict({
        <Attribute.GET_GROUPS: 'getGroups'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 10, 2, 12, 5, 15, 321000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'All Deleted',
        }),
      }),
      <Capability.LEGENDABSOLUTE60149_LEVEL_STEPS: 'legendabsolute60149.levelSteps'>: dict({
        <Attribute.LEVEL_STEPS: 'levelSteps'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 3, 19, 12, 20, 57, 785000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 0,
        }),
      }),
      <Capability.LEGENDABSOLUTE60149_MIRROR_GROUP_FUNCTION: 'legendabsolute60149.mirrorGroupFunction'>: dict({
        <Attribute.MIRROR_GROUP_FUNCTION: 'mirrorGroupFunction'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 10, 2, 12, 5, 15, 137000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Inactive',
        }),
      }),
      <Capability.LEGENDABSOLUTE60149_PROGRESSIVE_OFF1: 'legendabsolute60149.progressiveOff1'>: dict({
        <Attribute.PROG_OFF: 'progOff'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 10, 2, 12, 5, 15, 143000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Inactive',
        }),
      }),
      <Capability.LEGENDABSOLUTE60149_PROGRESSIVE_ON1: 'legendabsolute60149.progressiveOn1'>: dict({
        <Attribute.PROG_ON: 'progOn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 10, 2, 12, 5, 15, 116000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Inactive',
        }),
      }),
      <Capability.LEGENDABSOLUTE60149_RANDOM_NEXT_STEP: 'legendabsolute60149.randomNextStep'>: dict({
        <Attribute.RANDOM_NEXT: 'randomNext'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 8, 20, 28, 14, 452000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Inactive',
        }),
      }),
      <Capability.LEGENDABSOLUTE60149_RANDOM_ON_OFF1: 'legendabsolute60149.randomOnOff1'>: dict({
        <Attribute.RANDOM_ON_OFF: 'randomOnOff'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 8, 20, 28, 14, 454000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Inactive',
        }),
      }),
      <Capability.LEGENDABSOLUTE60149_SIGNAL_METRICS: 'legendabsolute60149.signalMetrics'>: dict({
        <Attribute.SIGNAL_METRICS: 'signalMetrics'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 54, 48, 996000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2025/02/09 Time: 17:54, LQI: 254 ... rssi: -64',
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 39, 48, 986000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.SWITCH_LEVEL: 'switchLevel'>: dict({
        <Attribute.LEVEL: 'level'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 5, 4, 951000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 100,
        }),
        <Attribute.LEVEL_RANGE: 'levelRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[vd_frame_2024]
  dict({
    'main': dict({
      <Capability.AUDIO_MUTE: 'audioMute'>: dict({
        <Attribute.MUTE: 'mute'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 8, 21, 12, 888000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'muted',
        }),
      }),
      <Capability.AUDIO_VOLUME: 'audioVolume'>: dict({
        <Attribute.VOLUME: 'volume'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 8, 21, 19, 143000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 12,
        }),
      }),
      <Capability.CUSTOM_ACCESSIBILITY: 'custom.accessibility'>: dict({
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 7, 0, 16, 42, 57000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'samsungvd.ambientContent',
          ]),
        }),
      }),
      <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>: dict({
        <Attribute.DR_MAX_DURATION: 'drMaxDuration'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 4, 17, 31, 1, 54000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 99999999,
        }),
        <Attribute.ENERGY_SAVING_INFO: 'energySavingInfo'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_LEVEL: 'energySavingLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 4, 17, 31, 1, 54000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 1,
        }),
        <Attribute.ENERGY_SAVING_OPERATION: 'energySavingOperation'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 4, 17, 31, 1, 54000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.ENERGY_SAVING_OPERATION_SUPPORT: 'energySavingOperationSupport'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 4, 17, 31, 1, 54000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
        <Attribute.ENERGY_SAVING_SUPPORT: 'energySavingSupport'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 4, 17, 31, 1, 54000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
        <Attribute.ENERGY_TYPE: 'energyType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 4, 17, 31, 1, 54000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2.0',
        }),
        <Attribute.NOTIFICATION_TEMPLATE_I_D: 'notificationTemplateID'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_ENERGY_SAVING_LEVELS: 'supportedEnergySavingLevels'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 4, 17, 31, 1, 54000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            1,
          ]),
        }),
      }),
      <Capability.CUSTOM_ERROR: 'custom.error'>: dict({
        <Attribute.ERROR: 'error'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_LAUNCH_APP: 'custom.launchapp'>: dict({
      }),
      <Capability.CUSTOM_RECORDING: 'custom.recording'>: dict({
      }),
      <Capability.CUSTOM_TV_SEARCH: 'custom.tvsearch'>: dict({
      }),
      <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>: dict({
        <Attribute.DEMAND_RESPONSE_LOAD_CONTROL_STATUS: 'drlcStatus'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 23, 35, 11, 458000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'drlcLevel': 0,
            'drlcType': 1,
            'duration': 99999999,
            'override': False,
            'start': '2025-02-10T23:35:06Z',
          }),
        }),
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.MEDIA_INPUT_SOURCE: 'mediaInputSource'>: dict({
        <Attribute.INPUT_SOURCE: 'inputSource'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_INPUT_SOURCES: 'supportedInputSources'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 7, 0, 16, 38, 482000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.MEDIA_PLAYBACK: 'mediaPlayback'>: dict({
        <Attribute.PLAYBACK_STATUS: 'playbackStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_PLAYBACK_COMMANDS: 'supportedPlaybackCommands'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 7, 0, 16, 38, 482000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'play',
            'pause',
            'stop',
            'fastForward',
            'rewind',
          ]),
        }),
      }),
      <Capability.MEDIA_TRACK_CONTROL: 'mediaTrackControl'>: dict({
        <Attribute.SUPPORTED_TRACK_CONTROL_COMMANDS: 'supportedTrackControlCommands'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 7, 0, 16, 38, 482000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '425ac77a-f7c9-a62d-ff12-cdad144952e3',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 7, 0, 16, 38, 482000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'res.1.1.0,sh.1.1.0',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 7, 0, 16, 38, 482000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 7, 0, 16, 38, 482000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2024-01-01',
        }),
        <Attribute.OCF_FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 7, 0, 16, 38, 482000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'T-PTMDDEUC-1201.8|ST_ENERGY',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 7, 0, 16, 38, 482000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 7, 0, 16, 38, 482000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 7, 0, 16, 38, 482000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 7, 0, 16, 38, 482000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'QE55LS03DAUXXN',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 7, 0, 16, 38, 482000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Tizen',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 7, 0, 16, 38, 482000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '8.0',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 7, 0, 16, 38, 482000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 7, 0, 16, 38, 482000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '55 The Frame',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 7, 0, 16, 38, 482000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '425ac77a-f7c9-a62d-ff12-cdad144952e3',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 7, 0, 16, 38, 482000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2024-12-30T01:21:33Z',
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 7, 0, 16, 38, 482000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'VD-FRAME-2024',
        }),
      }),
      <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>: dict({
        <Attribute.POWER_CONSUMPTION: 'powerConsumption'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 19, 13, 51, 510000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'deltaEnergy': 22.756029,
            'end': '2025-02-11T19:13:51Z',
            'energy': 0,
            'energySaved': 0,
            'persistedEnergy': 0,
            'persistedSavedEnergy': 0,
            'power': 0,
            'powerEnergy': 0,
            'start': '2025-02-11T18:58:44Z',
          }),
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SAMSUNG_IM_FIXED_FIND_NODE: 'samsungim.fixedFindNode'>: dict({
      }),
      <Capability.SAMSUNG_VD_AMBIENT: 'samsungvd.ambient'>: dict({
      }),
      <Capability.SAMSUNG_VD_AMBIENT_CONTENT: 'samsungvd.ambientContent'>: dict({
        <Attribute.SUPPORTED_AMBIENT_APPS: 'supportedAmbientApps'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 7, 0, 16, 38, 482000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.SAMSUNG_VD_DEVICE_CATEGORY: 'samsungvd.deviceCategory'>: dict({
        <Attribute.CATEGORY: 'category'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 8, 21, 16, 998000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'frametv',
        }),
      }),
      <Capability.SAMSUNG_VD_FIRMWARE_VERSION: 'samsungvd.firmwareVersion'>: dict({
        <Attribute.FIRMWARE_VERSION: 'firmwareVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 8, 21, 16, 998000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '3.5.1',
        }),
      }),
      <Capability.SAMSUNG_VD_LIGHT_CONTROL: 'samsungvd.lightControl'>: dict({
        <Attribute.ERROR_CODE: 'errorCode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 8, 21, 17, 43000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.REQUEST_ID: 'requestId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 8, 21, 17, 43000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.SELECTED_APP_ID: 'selectedAppId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 8, 21, 17, 43000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.SELECTED_MODE: 'selectedMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 8, 21, 17, 43000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.STREAM_CONTROL: 'streamControl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 8, 21, 17, 43000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.SUPPORTED_MODE_MAP: 'supportedModeMap'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 8, 21, 17, 43000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'id': '',
              'name': '',
            }),
          ]),
        }),
        <Attribute.SUPPORTED_MODES: 'supportedModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 5, 8, 21, 17, 43000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            '',
          ]),
        }),
      }),
      <Capability.SAMSUNG_VD_MEDIA_INPUT_SOURCE: 'samsungvd.mediaInputSource'>: dict({
        <Attribute.INPUT_SOURCE: 'inputSource'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 10, 54, 38, 169000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'HDMI1',
        }),
        <Attribute.SUPPORTED_INPUT_SOURCES_MAP: 'supportedInputSourcesMap'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 26, 16, 23, 24, 982000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'id': 'dtv',
              'name': 'Tv',
            }),
            dict({
              'id': 'HDMI1',
              'name': 'Chromecast',
            }),
            dict({
              'id': 'HDMI3',
              'name': 'Ultra Slim Soundbar',
            }),
            dict({
              'id': 'HDMI4',
              'name': 'PlayStation 5',
            }),
          ]),
        }),
      }),
      <Capability.SAMSUNG_VD_PICTURE_MODE: 'samsungvd.pictureMode'>: dict({
        <Attribute.PICTURE_MODE: 'pictureMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 8, 8, 21, 14, 262000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Standaard (gekalibreerd)',
        }),
        <Attribute.SUPPORTED_PICTURE_MODES: 'supportedPictureModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 8, 21, 13, 288000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'Dynamisch',
            'Eco',
            'Film (gekalibreerd)',
            'Standaard',
          ]),
        }),
        <Attribute.SUPPORTED_PICTURE_MODES_MAP: 'supportedPictureModesMap'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 8, 21, 13, 288000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'id': 'modeDynamic',
              'name': 'Dynamisch',
            }),
            dict({
              'id': 'modeGen_65552',
              'name': 'Eco',
            }),
            dict({
              'id': 'modeMovie',
              'name': 'Film (gekalibreerd)',
            }),
            dict({
              'id': 'modeStandard',
              'name': 'Standaard',
            }),
          ]),
        }),
      }),
      <Capability.SAMSUNG_VD_REMOTE_CONTROL: 'samsungvd.remoteControl'>: dict({
      }),
      <Capability.SAMSUNG_VD_SOUND_MODE: 'samsungvd.soundMode'>: dict({
        <Attribute.SOUND_MODE: 'soundMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 30, 8, 21, 13, 923000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Standaard',
        }),
        <Attribute.SUPPORTED_SOUND_MODES: 'supportedSoundModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 8, 21, 13, 92000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'Standaard',
            'Versterken',
          ]),
        }),
        <Attribute.SUPPORTED_SOUND_MODES_MAP: 'supportedSoundModesMap'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 8, 21, 13, 92000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'id': 'modeStandard',
              'name': 'Standaard',
            }),
            dict({
              'id': 'modeAmplify',
              'name': 'Versterken',
            }),
          ]),
        }),
      }),
      <Capability.SAMSUNG_VD_SUPPORTS_FEATURES: 'samsungvd.supportsFeatures'>: dict({
        <Attribute.EXECUTABLE_SERVICE_LIST: 'executableServiceList'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.IME_ADV_SUPPORTED: 'imeAdvSupported'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 16, 21, 32, 52, 936000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
        <Attribute.MEDIA_OUTPUT_SUPPORTED: 'mediaOutputSupported'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 16, 44, 12, 196000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
        <Attribute.MOBILE_CAM_SUPPORTED: 'mobileCamSupported'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 16, 21, 32, 52, 936000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
        <Attribute.REMOTELESS_SUPPORTED: 'remotelessSupported'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WIFI_UPDATE_SUPPORT: 'wifiUpdateSupport'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_VD_SUPPORTS_POWER_ON_BY_OCF: 'samsungvd.supportsPowerOnByOcf'>: dict({
        <Attribute.SUPPORTS_POWER_ON_BY_OCF: 'supportsPowerOnByOcf'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 4, 17, 30, 59, 379000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'true',
        }),
      }),
      <Capability.SAMSUNG_VD_THING_STATUS: 'samsungvd.thingStatus'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 4, 17, 30, 59, 219000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Idle',
        }),
        <Attribute.UPDATED_TIME: 'updatedTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 23, 35, 10, 157000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 1739230510,
        }),
      }),
      <Capability.SEC_DEVICE_CONNECTION_STATE: 'sec.deviceConnectionState'>: dict({
        <Attribute.DEVICE_CONNECTION_STATE: 'deviceConnectionState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 19, 13, 51, 503000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'on',
        }),
      }),
      <Capability.TV_CHANNEL: 'tvChannel'>: dict({
        <Attribute.TV_CHANNEL: 'tvChannel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 17, 41, 57, 453000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.TV_CHANNEL_NAME: 'tvChannelName'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 17, 41, 57, 453000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '9Ur5IzDKqV.TizenYouTube',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[vd_network_audio_002s]
  dict({
    'main': dict({
      <Capability.AUDIO_MUTE: 'audioMute'>: dict({
        <Attribute.MUTE: 'mute'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 18, 44, 787000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'unmuted',
        }),
      }),
      <Capability.AUDIO_NOTIFICATION: 'audioNotification'>: dict({
      }),
      <Capability.AUDIO_TRACK_DATA: 'audioTrackData'>: dict({
        <Attribute.AUDIO_TRACK_DATA: 'audioTrackData'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 0, 29, 29, 953000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'album': '',
            'artist': '',
            'title': '',
          }),
        }),
        <Attribute.ELAPSED_TIME: 'elapsedTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 0, 29, 29, 828000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
        <Attribute.TOTAL_TIME: 'totalTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 0, 29, 29, 953000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
      }),
      <Capability.AUDIO_VOLUME: 'audioVolume'>: dict({
        <Attribute.VOLUME: 'volume'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 25, 51, 839000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 17,
        }),
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.MEDIA_PLAYBACK: 'mediaPlayback'>: dict({
        <Attribute.PLAYBACK_STATUS: 'playbackStatus'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 12, 923000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'stopped',
        }),
        <Attribute.SUPPORTED_PLAYBACK_COMMANDS: 'supportedPlaybackCommands'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 12, 923000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'play',
            'pause',
            'stop',
          ]),
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 1, 3, 42, 587000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '0d94e5db-8501-2355-eb4f-214163702cac',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 1, 3, 42, 587000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'res.1.1.0,sh.1.1.0',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 1, 3, 42, 587000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 1, 3, 42, 587000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2023-01-01',
        }),
        <Attribute.OCF_FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 1, 3, 42, 587000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'SAT-iMX8M23WWC-1010.5',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 1, 3, 42, 587000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 1, 3, 42, 587000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 1, 3, 42, 587000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 1, 3, 42, 587000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'HW-Q990C',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 1, 3, 42, 587000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Tizen',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 1, 3, 42, 587000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '7.0',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 1, 3, 42, 587000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 1, 3, 42, 587000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Soundbar Living',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 1, 3, 42, 587000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '0d94e5db-8501-2355-eb4f-214163702cac',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 1, 3, 42, 587000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2024-12-10T02:12:44Z',
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 1, 3, 42, 587000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'VD-NetworkAudio-002S',
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SAMSUNG_VD_AUDIO_GROUP_INFO: 'samsungvd.audioGroupInfo'>: dict({
        <Attribute.ROLE: 'role'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_VD_AUDIO_INPUT_SOURCE: 'samsungvd.audioInputSource'>: dict({
        <Attribute.INPUT_SOURCE: 'inputSource'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 18, 44, 680000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'HDMI1',
        }),
        <Attribute.SUPPORTED_INPUT_SOURCES: 'supportedInputSources'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 18, 44, 680000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'digital',
            'HDMI1',
            'bluetooth',
            'wifi',
            'HDMI2',
          ]),
        }),
      }),
      <Capability.SAMSUNG_VD_SOUND_FROM: 'samsungvd.soundFrom'>: dict({
        <Attribute.DETAIL_NAME: 'detailName'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 215000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'External Device',
        }),
        <Attribute.MODE: 'mode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 215000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 3,
        }),
      }),
      <Capability.SAMSUNG_VD_THING_STATUS: 'samsungvd.thingStatus'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 949000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Idle',
        }),
        <Attribute.UPDATED_TIME: 'updatedTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 42, 13, 949000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 1739115734,
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 25, 51, 536000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'on',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[vd_network_audio_003s]
  dict({
    'main': dict({
      <Capability.AUDIO_MUTE: 'audioMute'>: dict({
        <Attribute.MUTE: 'mute'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 19, 2, 51, 841000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'unmuted',
        }),
      }),
      <Capability.AUDIO_NOTIFICATION: 'audioNotification'>: dict({
      }),
      <Capability.AUDIO_VOLUME: 'audioVolume'>: dict({
        <Attribute.VOLUME: 'volume'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 19, 2, 52, 690000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 18,
        }),
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 17, 8, 58, 48, 549000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '9985fbfa-777a-4fae-a637-6148f41b3c63',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 17, 8, 58, 48, 549000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'res.1.1.0,sh.1.1.0',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 17, 8, 58, 48, 549000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 17, 8, 58, 48, 549000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2024-01-01',
        }),
        <Attribute.OCF_FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 17, 8, 58, 48, 549000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'SAT-MT8532D24WWC-1016.0',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 17, 8, 58, 48, 549000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 17, 8, 58, 48, 549000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 17, 8, 58, 48, 549000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 17, 8, 58, 48, 549000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'HW-S701D',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 17, 8, 58, 48, 549000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Tizen',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 17, 8, 58, 48, 549000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '8.0',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 17, 8, 58, 48, 549000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 17, 8, 58, 48, 549000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Ultra Slim Soundbar',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 17, 8, 58, 48, 549000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '9985fbfa-777a-4fae-a637-6148f41b3c63',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 17, 8, 58, 48, 549000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2025-01-17T01:52:47Z',
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 17, 8, 58, 48, 549000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'VD-NetworkAudio-003S',
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SAMSUNG_VD_AUDIO_GROUP_INFO: 'samsungvd.audioGroupInfo'>: dict({
        <Attribute.ROLE: 'role'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_VD_AUDIO_INPUT_SOURCE: 'samsungvd.audioInputSource'>: dict({
        <Attribute.INPUT_SOURCE: 'inputSource'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 18, 201000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'D.IN',
        }),
        <Attribute.SUPPORTED_INPUT_SOURCES: 'supportedInputSources'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 18, 201000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'BT',
            'WIFI',
          ]),
        }),
      }),
      <Capability.SAMSUNG_VD_SOUND_FROM: 'samsungvd.soundFrom'>: dict({
        <Attribute.DETAIL_NAME: 'detailName'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 17, 41, 57, 454000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TV',
        }),
        <Attribute.MODE: 'mode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 17, 41, 57, 454000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 10,
        }),
      }),
      <Capability.SAMSUNG_VD_SUPPORTS_FEATURES: 'samsungvd.supportsFeatures'>: dict({
        <Attribute.EXECUTABLE_SERVICE_LIST: 'executableServiceList'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.IME_ADV_SUPPORTED: 'imeAdvSupported'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MEDIA_OUTPUT_SUPPORTED: 'mediaOutputSupported'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MOBILE_CAM_SUPPORTED: 'mobileCamSupported'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REMOTELESS_SUPPORTED: 'remotelessSupported'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WIFI_UPDATE_SUPPORT: 'wifiUpdateSupport'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 18, 103000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
      }),
      <Capability.SAMSUNG_VD_THING_STATUS: 'samsungvd.thingStatus'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 905000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Idle',
        }),
        <Attribute.UPDATED_TIME: 'updatedTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 905000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 1739262078,
        }),
      }),
      <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>: dict({
        <Attribute.DUMP_TYPE: 'dumpType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 18, 57000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'file',
        }),
        <Attribute.ENDPOINT: 'endpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 18, 57000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'PIPER',
        }),
        <Attribute.LOG_TYPE: 'logType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 18, 57000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'errCode',
            'dump',
          ]),
        }),
        <Attribute.MIN_VERSION: 'minVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 18, 57000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '3.0',
        }),
        <Attribute.MN_ID: 'mnId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 18, 57000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '0AJK',
        }),
        <Attribute.PROTOCOL_TYPE: 'protocolType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 18, 57000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ble_ocf',
        }),
        <Attribute.SETUP_ID: 'setupId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 18, 57000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '301',
        }),
        <Attribute.SIGNIN_PERMISSION: 'signinPermission'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TS_ID: 'tsId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 18, 57000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'VD02',
        }),
      }),
      <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>: dict({
        <Attribute.AUTO_RECONNECTION: 'autoReconnection'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 849000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
        <Attribute.MIN_VERSION: 'minVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 849000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '1.0',
        }),
        <Attribute.PROTOCOL_TYPE: 'protocolType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 849000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'ble_ocf',
          ]),
        }),
        <Attribute.SUPPORTED_AUTH_TYPE: 'supportedAuthType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 849000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'OPEN',
            'WEP',
            'WPA-PSK',
            'WPA2-PSK',
            'EAP',
            'SAE',
            'OWE',
            'FT-PSK',
          ]),
        }),
        <Attribute.SUPPORTED_WI_FI_FREQ: 'supportedWiFiFreq'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 8, 21, 17, 849000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            '2.4G',
            '5G',
          ]),
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 19, 2, 51, 925000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'on',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[vd_sensor_light_2023]
  dict({
    'main': dict({
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 8, 7, 40, 220000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '5cc1c096-98b9-460c-8f1c-1045509ec605',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 8, 7, 40, 220000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'res.1.1.0,sh.1.1.0',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 8, 7, 40, 220000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 8, 7, 40, 220000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2023-01-01',
        }),
        <Attribute.OCF_FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 8, 7, 40, 220000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'latest',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 8, 7, 40, 220000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 8, 7, 40, 220000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 8, 7, 40, 220000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 8, 7, 40, 220000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'QE55LS03DAUXXN',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 8, 7, 40, 220000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Tizen',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 8, 7, 40, 220000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '8.0',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 8, 7, 40, 220000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 8, 7, 40, 220000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Light Sensor - 55 The Frame',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 8, 7, 40, 220000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '5cc1c096-98b9-460c-8f1c-1045509ec605',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 8, 7, 40, 220000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2025-01-14T08:07:36Z',
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 14, 8, 7, 40, 220000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'VD-Sensor.Light-2023',
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.RELATIVE_BRIGHTNESS: 'relativeBrightness'>: dict({
        <Attribute.BRIGHTNESS_INTENSITY: 'brightnessIntensity'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 19, 8, 25, 539000, tzinfo=datetime.timezone.utc),
          'unit': 'level',
          'value': 2,
        }),
      }),
      <Capability.SAMSUNG_VD_DEVICE_CATEGORY: 'samsungvd.deviceCategory'>: dict({
        <Attribute.CATEGORY: 'category'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[vd_sensor_sound_2023]
  dict({
    'main': dict({
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 18, 0, 4, 22, 237000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '930eced7-366d-4e6d-b2f2-e3a80f3d5a0c',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 18, 0, 4, 22, 237000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'res.1.1.0,sh.1.1.0',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 18, 0, 4, 22, 237000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 18, 0, 4, 22, 237000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2023-01-01',
        }),
        <Attribute.OCF_FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 18, 0, 4, 22, 237000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'latest',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 18, 0, 4, 22, 237000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 18, 0, 4, 22, 237000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 18, 0, 4, 22, 237000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 18, 0, 4, 22, 237000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'QE55LS03DAUXXN',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 18, 0, 4, 22, 237000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Tizen',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 18, 0, 4, 22, 237000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '8.0',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 18, 0, 4, 22, 237000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 18, 0, 4, 22, 237000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Sound Sensor - 55 The Frame',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 18, 0, 4, 22, 237000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '930eced7-366d-4e6d-b2f2-e3a80f3d5a0c',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 18, 0, 4, 22, 237000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2024-12-18T00:04:21Z',
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 18, 0, 4, 22, 237000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'VD-Sensor.Sound-2023',
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SAMSUNG_VD_DEVICE_CATEGORY: 'samsungvd.deviceCategory'>: dict({
        <Attribute.CATEGORY: 'category'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_VD_SOUND_DETECTION: 'samsungvd.soundDetection'>: dict({
        <Attribute.SOUND_DETECTED: 'soundDetected'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 18, 33, 12, 594000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.SOUND_DETECTION: 'soundDetection'>: dict({
        <Attribute.SOUND_DETECTED: 'soundDetected'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 0, 23, 59, 329000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'noSound',
        }),
        <Attribute.SOUND_DETECTION_STATE: 'soundDetectionState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 0, 23, 59, 329000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'disabled',
        }),
        <Attribute.SUPPORTED_SOUND_TYPES: 'supportedSoundTypes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 0, 23, 59, 329000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'noSound',
            'dogBarking',
          ]),
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 18, 33, 12, 594000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[vd_stv_2017_k]
  dict({
    'main': dict({
      <Capability.AUDIO_MUTE: 'audioMute'>: dict({
        <Attribute.MUTE: 'mute'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 8, 21, 19, 19, 52, 832000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'muted',
        }),
      }),
      <Capability.AUDIO_VOLUME: 'audioVolume'>: dict({
        <Attribute.VOLUME: 'volume'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 8, 21, 19, 19, 52, 832000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 13,
        }),
      }),
      <Capability.CUSTOM_ACCESSIBILITY: 'custom.accessibility'>: dict({
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 1, 17, 1, 10, 11, 985000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'samsungvd.ambient',
            'samsungvd.ambientContent',
          ]),
        }),
      }),
      <Capability.CUSTOM_ERROR: 'custom.error'>: dict({
        <Attribute.ERROR: 'error'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 8, 4, 21, 53, 22, 148000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_LAUNCH_APP: 'custom.launchapp'>: dict({
      }),
      <Capability.CUSTOM_PICTURE_MODE: 'custom.picturemode'>: dict({
        <Attribute.PICTURE_MODE: 'pictureMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 12, 23, 1, 33, 37, 69000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Dynamic',
        }),
        <Attribute.SUPPORTED_PICTURE_MODES: 'supportedPictureModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 5, 7, 2, 58, 10, 585000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'Dynamic',
            'Standard',
            'Natural',
            'Movie',
          ]),
        }),
        <Attribute.SUPPORTED_PICTURE_MODES_MAP: 'supportedPictureModesMap'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 12, 23, 1, 33, 37, 69000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'id': 'modeDynamic',
              'name': 'Dynamic',
            }),
            dict({
              'id': 'modeStandard',
              'name': 'Standard',
            }),
            dict({
              'id': 'modeNatural',
              'name': 'Natural',
            }),
            dict({
              'id': 'modeMovie',
              'name': 'Movie',
            }),
          ]),
        }),
      }),
      <Capability.CUSTOM_RECORDING: 'custom.recording'>: dict({
      }),
      <Capability.CUSTOM_SOUND_MODE: 'custom.soundmode'>: dict({
        <Attribute.SOUND_MODE: 'soundMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 12, 23, 1, 33, 37, 272000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Standard',
        }),
        <Attribute.SUPPORTED_SOUND_MODES: 'supportedSoundModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 8, 21, 19, 19, 52, 887000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'Standard',
          ]),
        }),
        <Attribute.SUPPORTED_SOUND_MODES_MAP: 'supportedSoundModesMap'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 8, 21, 19, 19, 52, 887000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'id': 'modeStandard',
              'name': 'Standard',
            }),
          ]),
        }),
      }),
      <Capability.CUSTOM_TV_SEARCH: 'custom.tvsearch'>: dict({
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': dict({
            'href': '/sec/tv/deviceinfo',
          }),
          'timestamp': datetime.datetime(2021, 8, 30, 19, 18, 12, 303000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'payload': dict({
              'if': list([
                'oic.if.baseline',
                'oic.if.r',
              ]),
              'rt': list([
                'x.com.samsung.tv.deviceinfo',
              ]),
              'x.com.samsung.country': 'USA',
              'x.com.samsung.infolinkversion': 'T-INFOLINK2017-1008',
              'x.com.samsung.modelid': '17_KANTM_UHD',
              'x.com.samsung.tv.blemac': 'CC:6E:A4:1F:4C:F7',
              'x.com.samsung.tv.btmac': 'CC:6E:A4:1F:4C:F7',
              'x.com.samsung.tv.category': 'tv',
              'x.com.samsung.tv.countrycode': 'US',
              'x.com.samsung.tv.duid': 'B2NBQRAG357IX',
              'x.com.samsung.tv.ethmac': 'c0:48:e6:e7:fc:2c',
              'x.com.samsung.tv.p2pmac': 'ce:6e:a4:1f:4c:f6',
              'x.com.samsung.tv.udn': '717fb7ed-b310-4cfe-8954-1cd8211dd689',
              'x.com.samsung.tv.wifimac': 'cc:6e:a4:1f:4c:f6',
            }),
          }),
        }),
      }),
      <Capability.MEDIA_INPUT_SOURCE: 'mediaInputSource'>: dict({
        <Attribute.INPUT_SOURCE: 'inputSource'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 8, 28, 16, 29, 59, 716000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'HDMI1',
        }),
        <Attribute.SUPPORTED_INPUT_SOURCES: 'supportedInputSources'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 10, 16, 15, 18, 11, 622000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'digitalTv',
            'HDMI1',
            'HDMI4',
            'HDMI4',
          ]),
        }),
      }),
      <Capability.MEDIA_PLAYBACK: 'mediaPlayback'>: dict({
        <Attribute.PLAYBACK_STATUS: 'playbackStatus'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 8, 4, 21, 53, 22, 108000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_PLAYBACK_COMMANDS: 'supportedPlaybackCommands'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 5, 7, 2, 58, 10, 250000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'play',
            'pause',
            'stop',
            'fastForward',
            'rewind',
          ]),
        }),
      }),
      <Capability.MEDIA_TRACK_CONTROL: 'mediaTrackControl'>: dict({
        <Attribute.SUPPORTED_TRACK_CONTROL_COMMANDS: 'supportedTrackControlCommands'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 8, 4, 21, 53, 22, 384000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 5, 7, 2, 58, 10, 206000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '4588d2d9-a8cf-40f4-9a0b-ed5dfbaccda1',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 8, 21, 18, 52, 58, 71000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'res.1.1.0,sh.1.1.0',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 8, 21, 18, 52, 58, 71000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 8, 21, 19, 19, 51, 890000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2017-01-01',
        }),
        <Attribute.OCF_FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 8, 21, 18, 52, 57, 543000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'T-KTMAKUC-1290.3',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 5, 7, 2, 58, 10, 206000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '0-0',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 5, 7, 2, 58, 10, 206000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 5, 7, 2, 58, 10, 206000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 5, 7, 2, 58, 10, 206000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'UN49MU8000',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 5, 7, 2, 58, 10, 206000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '4.1.10',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 5, 7, 2, 58, 10, 206000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Tizen 3.0',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 8, 21, 19, 19, 51, 890000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com/sec/tv/overview/',
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 5, 7, 2, 58, 10, 206000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[TV] Samsung 8 Series (49)',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 5, 7, 2, 58, 10, 206000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '4588d2d9-a8cf-40f4-9a0b-ed5dfbaccda1',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 8, 21, 19, 19, 51, 890000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2021-08-21T14:50:34Z',
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 5, 7, 2, 58, 10, 206000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'VD-STV_2017_K',
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SAMSUNG_VD_AMBIENT: 'samsungvd.ambient'>: dict({
      }),
      <Capability.SAMSUNG_VD_AMBIENT_CONTENT: 'samsungvd.ambientContent'>: dict({
        <Attribute.SUPPORTED_AMBIENT_APPS: 'supportedAmbientApps'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 1, 17, 1, 10, 11, 985000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.SAMSUNG_VD_FIRMWARE_VERSION: 'samsungvd.firmwareVersion'>: dict({
        <Attribute.FIRMWARE_VERSION: 'firmwareVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 10, 29, 10, 47, 19, 376000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_VD_MEDIA_INPUT_SOURCE: 'samsungvd.mediaInputSource'>: dict({
        <Attribute.INPUT_SOURCE: 'inputSource'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 8, 28, 16, 29, 59, 716000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'HDMI1',
        }),
        <Attribute.SUPPORTED_INPUT_SOURCES_MAP: 'supportedInputSourcesMap'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 10, 16, 15, 18, 11, 622000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'id': 'dtv',
              'name': 'TV',
            }),
            dict({
              'id': 'HDMI1',
              'name': 'PlayStation 4',
            }),
            dict({
              'id': 'HDMI4',
              'name': 'HT-CT370',
            }),
            dict({
              'id': 'HDMI4',
              'name': 'HT-CT370',
            }),
          ]),
        }),
      }),
      <Capability.SAMSUNG_VD_SUPPORTS_POWER_ON_BY_OCF: 'samsungvd.supportsPowerOnByOcf'>: dict({
        <Attribute.SUPPORTS_POWER_ON_BY_OCF: 'supportsPowerOnByOcf'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 10, 29, 10, 47, 20, 305000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 10, 16, 15, 18, 11, 317000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'on',
        }),
      }),
      <Capability.TV_CHANNEL: 'tvChannel'>: dict({
        <Attribute.TV_CHANNEL: 'tvChannel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 5, 7, 2, 58, 10, 479000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.TV_CHANNEL_NAME: 'tvChannelName'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 8, 21, 18, 53, 6, 643000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[vd_stv_2021]
  dict({
    'main': dict({
      <Capability.AUDIO_MUTE: 'audioMute'>: dict({
        <Attribute.MUTE: 'mute'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 14, 15, 5, 630000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'unmuted',
        }),
      }),
      <Capability.AUDIO_VOLUME: 'audioVolume'>: dict({
        <Attribute.VOLUME: 'volume'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 14, 15, 5, 630000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 11,
        }),
      }),
      <Capability.CUSTOM_ACCESSIBILITY: 'custom.accessibility'>: dict({
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 14, 15, 6, 212000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'samsungim.fixedFindNode',
            'samsungvd.supportsFeatures',
            'samsungim.findNodeGeolocation',
            'powerConsumptionReport',
          ]),
        }),
      }),
      <Capability.CUSTOM_ERROR: 'custom.error'>: dict({
        <Attribute.ERROR: 'error'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_LAUNCH_APP: 'custom.launchapp'>: dict({
      }),
      <Capability.CUSTOM_PICTURE_MODE: 'custom.picturemode'>: dict({
        <Attribute.PICTURE_MODE: 'pictureMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 14, 15, 5, 811000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'FILMMAKER MODE',
        }),
        <Attribute.SUPPORTED_PICTURE_MODES: 'supportedPictureModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 14, 15, 5, 811000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'Dynamisk',
            'FILMMAKER MODE',
            'Film',
            'Naturlig',
            'Standard',
          ]),
        }),
        <Attribute.SUPPORTED_PICTURE_MODES_MAP: 'supportedPictureModesMap'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 14, 15, 5, 811000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'id': 'modeDynamic',
              'name': 'Dynamisk',
            }),
            dict({
              'id': 'modeFilmmakerMode',
              'name': 'FILMMAKER MODE',
            }),
            dict({
              'id': 'modeMovie',
              'name': 'Film',
            }),
            dict({
              'id': 'modeNatural',
              'name': 'Naturlig',
            }),
            dict({
              'id': 'modeStandard',
              'name': 'Standard',
            }),
          ]),
        }),
      }),
      <Capability.CUSTOM_RECORDING: 'custom.recording'>: dict({
      }),
      <Capability.CUSTOM_SOUND_MODE: 'custom.soundmode'>: dict({
        <Attribute.SOUND_MODE: 'soundMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 14, 15, 5, 544000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Surround',
        }),
        <Attribute.SUPPORTED_SOUND_MODES: 'supportedSoundModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 14, 15, 5, 544000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'Adaptivt ljud',
            'Spel',
            'Standard',
            'Surround',
          ]),
        }),
        <Attribute.SUPPORTED_SOUND_MODES_MAP: 'supportedSoundModesMap'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 14, 15, 5, 544000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'id': 'modeExternalAdaptive',
              'name': 'Adaptivt ljud',
            }),
            dict({
              'id': 'modeExternalGame',
              'name': 'Spel',
            }),
            dict({
              'id': 'modeExternalStandard',
              'name': 'Standard',
            }),
            dict({
              'id': 'modeExternal3DSurround',
              'name': 'Surround',
            }),
          ]),
        }),
      }),
      <Capability.CUSTOM_TV_SEARCH: 'custom.tvsearch'>: dict({
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.MEDIA_INPUT_SOURCE: 'mediaInputSource'>: dict({
        <Attribute.INPUT_SOURCE: 'inputSource'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 12, 10, 9, 32, 2, 350000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'HDMI4',
        }),
        <Attribute.SUPPORTED_INPUT_SOURCES: 'supportedInputSources'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 14, 15, 4, 815000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.MEDIA_PLAYBACK: 'mediaPlayback'>: dict({
        <Attribute.PLAYBACK_STATUS: 'playbackStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_PLAYBACK_COMMANDS: 'supportedPlaybackCommands'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 14, 15, 4, 815000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'play',
            'pause',
            'stop',
            'fastForward',
            'rewind',
          ]),
        }),
      }),
      <Capability.MEDIA_TRACK_CONTROL: 'mediaTrackControl'>: dict({
        <Attribute.SUPPORTED_TRACK_CONTROL_COMMANDS: 'supportedTrackControlCommands'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 14, 15, 5, 29000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '70650a5c-3e57-c66b-8c43-d48d06852948',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 14, 15, 5, 29000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'res.1.1.0,sh.1.1.0',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 14, 15, 5, 29000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 14, 15, 5, 29000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2021-01-01',
        }),
        <Attribute.OCF_FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 14, 15, 5, 29000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'T-NKM2DEUC-2220.9',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 14, 15, 5, 29000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 14, 15, 5, 29000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 14, 15, 5, 29000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 14, 15, 5, 29000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'QE75QN95AATXXC',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 14, 15, 5, 29000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Tizen',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 14, 15, 5, 29000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '6.0',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 14, 15, 5, 29000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 14, 15, 5, 29000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung QN95AA 75 TV',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 14, 15, 5, 29000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '70650a5c-3e57-c66b-8c43-d48d06852948',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 14, 15, 5, 29000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2025-02-01T22:03:42Z',
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 14, 15, 5, 29000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'VD-STV-2021',
        }),
      }),
      <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>: dict({
        <Attribute.POWER_CONSUMPTION: 'powerConsumption'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SAMSUNG_IM_FIXED_FIND_NODE: 'samsungim.fixedFindNode'>: dict({
      }),
      <Capability.SAMSUNG_VD_AMBIENT: 'samsungvd.ambient'>: dict({
      }),
      <Capability.SAMSUNG_VD_AMBIENT_CONTENT: 'samsungvd.ambientContent'>: dict({
        <Attribute.SUPPORTED_AMBIENT_APPS: 'supportedAmbientApps'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 14, 15, 5, 912000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'weather',
          ]),
        }),
      }),
      <Capability.SAMSUNG_VD_DEVICE_CATEGORY: 'samsungvd.deviceCategory'>: dict({
        <Attribute.CATEGORY: 'category'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 14, 15, 6, 565000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'tv',
        }),
      }),
      <Capability.SAMSUNG_VD_FIRMWARE_VERSION: 'samsungvd.firmwareVersion'>: dict({
        <Attribute.FIRMWARE_VERSION: 'firmwareVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 14, 15, 6, 565000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '3.5.0',
        }),
      }),
      <Capability.SAMSUNG_VD_MEDIA_INPUT_SOURCE: 'samsungvd.mediaInputSource'>: dict({
        <Attribute.INPUT_SOURCE: 'inputSource'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 23, 0, 34, 25000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'HDMI4',
        }),
        <Attribute.SUPPORTED_INPUT_SOURCES_MAP: 'supportedInputSourcesMap'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 23, 0, 34, 25000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'id': 'dtv',
              'name': 'TV',
            }),
            dict({
              'id': 'HDMI2',
              'name': 'PC',
            }),
            dict({
              'id': 'HDMI3',
              'name': 'HDMI 3',
            }),
            dict({
              'id': 'HDMI4',
              'name': 'PlayStation 5',
            }),
          ]),
        }),
      }),
      <Capability.SAMSUNG_VD_REMOTE_CONTROL: 'samsungvd.remoteControl'>: dict({
      }),
      <Capability.SAMSUNG_VD_SUPPORTS_FEATURES: 'samsungvd.supportsFeatures'>: dict({
        <Attribute.EXECUTABLE_SERVICE_LIST: 'executableServiceList'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.IME_ADV_SUPPORTED: 'imeAdvSupported'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MEDIA_OUTPUT_SUPPORTED: 'mediaOutputSupported'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MOBILE_CAM_SUPPORTED: 'mobileCamSupported'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REMOTELESS_SUPPORTED: 'remotelessSupported'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WIFI_UPDATE_SUPPORT: 'wifiUpdateSupport'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_VD_SUPPORTS_POWER_ON_BY_OCF: 'samsungvd.supportsPowerOnByOcf'>: dict({
        <Attribute.SUPPORTS_POWER_ON_BY_OCF: 'supportsPowerOnByOcf'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 23, 0, 33, 790000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'true',
        }),
      }),
      <Capability.SAMSUNG_VD_THING_STATUS: 'samsungvd.thingStatus'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 23, 0, 33, 389000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Idle',
        }),
        <Attribute.UPDATED_TIME: 'updatedTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 23, 0, 33, 389000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 1739142033,
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 3, 14, 17, 614000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.TV_CHANNEL: 'tvChannel'>: dict({
        <Attribute.TV_CHANNEL: 'tvChannel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 14, 15, 5, 693000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.TV_CHANNEL_NAME: 'tvChannelName'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 2, 14, 15, 5, 693000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[vd_stv_2022]
  dict({
    'main': dict({
      <Capability.AUDIO_MUTE: 'audioMute'>: dict({
        <Attribute.MUTE: 'mute'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 30, 2, 22, 13, 742000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'unmuted',
        }),
      }),
      <Capability.AUDIO_VOLUME: 'audioVolume'>: dict({
        <Attribute.VOLUME: 'volume'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 30, 2, 22, 13, 742000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 22,
        }),
      }),
      <Capability.CUSTOM_ACCESSIBILITY: 'custom.accessibility'>: dict({
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 31, 23, 29, 37, 921000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'samsungvd.ambient',
            'samsungvd.ambientContent',
          ]),
        }),
      }),
      <Capability.CUSTOM_ERROR: 'custom.error'>: dict({
        <Attribute.ERROR: 'error'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_LAUNCH_APP: 'custom.launchapp'>: dict({
      }),
      <Capability.CUSTOM_PICTURE_MODE: 'custom.picturemode'>: dict({
        <Attribute.PICTURE_MODE: 'pictureMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 10, 0, 9, 470000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'FILMMAKER MODE',
        }),
        <Attribute.SUPPORTED_PICTURE_MODES: 'supportedPictureModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 30, 2, 22, 14, 288000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'Dynamic',
            'Movie',
            'Standard',
          ]),
        }),
        <Attribute.SUPPORTED_PICTURE_MODES_MAP: 'supportedPictureModesMap'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 30, 2, 22, 14, 288000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'id': 'modeDynamic',
              'name': 'Dynamic',
            }),
            dict({
              'id': 'modeMovie',
              'name': 'Movie',
            }),
            dict({
              'id': 'modeStandard',
              'name': 'Standard',
            }),
          ]),
        }),
      }),
      <Capability.CUSTOM_RECORDING: 'custom.recording'>: dict({
      }),
      <Capability.CUSTOM_SOUND_MODE: 'custom.soundmode'>: dict({
        <Attribute.SOUND_MODE: 'soundMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 30, 2, 22, 14, 33000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Standard',
        }),
        <Attribute.SUPPORTED_SOUND_MODES: 'supportedSoundModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 30, 2, 22, 14, 33000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'Amplify',
            'Standard',
          ]),
        }),
        <Attribute.SUPPORTED_SOUND_MODES_MAP: 'supportedSoundModesMap'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 30, 2, 22, 14, 33000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'id': 'modeAmplify',
              'name': 'Amplify',
            }),
            dict({
              'id': 'modeStandard',
              'name': 'Standard',
            }),
          ]),
        }),
      }),
      <Capability.CUSTOM_TV_SEARCH: 'custom.tvsearch'>: dict({
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': dict({
            'href': '/sec/tv/deviceinfo',
          }),
          'timestamp': datetime.datetime(2023, 6, 10, 23, 8, 17, 475000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'payload': dict({
              'if': list([
                'oic.if.r',
                'oic.if.baseline',
              ]),
              'rt': list([
                'x.com.samsung.tv.deviceinfo',
              ]),
              'x.com.samsung.country': 'UK',
              'x.com.samsung.infolinkversion': 'T-INFOLINK2022-1008',
              'x.com.samsung.modelid': '22_PONTUSM_FTV',
              'x.com.samsung.tv.ambientsupport': True,
              'x.com.samsung.tv.blemac': 'B0:99:D7:23:24:C9',
              'x.com.samsung.tv.btmac': 'B0:99:D7:23:24:C9',
              'x.com.samsung.tv.category': 'frametv',
              'x.com.samsung.tv.countrycode': 'GB',
              'x.com.samsung.tv.duid': '3EHCNQDV3NATF',
              'x.com.samsung.tv.ethmac': '70:09:71:4b:90:5e',
              'x.com.samsung.tv.language': 'en_GB',
              'x.com.samsung.tv.mnid': '0AJK',
              'x.com.samsung.tv.onsupport': True,
              'x.com.samsung.tv.p2pmac': 'b2:99:d7:23:24:c8',
              'x.com.samsung.tv.paneltime': 5,
              'x.com.samsung.tv.setupid': '101',
              'x.com.samsung.tv.sn': '0L973HDW500019W',
              'x.com.samsung.tv.swmodel': 'LS03B',
              'x.com.samsung.tv.thingversion': '3.5.0',
              'x.com.samsung.tv.udn': '8e09770c-6762-4245-8654-0457ae5370b3',
              'x.com.samsung.tv.vendorcode': 'Samsung',
              'x.com.samsung.tv.wifimac': 'b0:99:d7:23:24:c8',
              'x.com.samsung.tv.year': 2022,
            }),
          }),
        }),
      }),
      <Capability.MEDIA_INPUT_SOURCE: 'mediaInputSource'>: dict({
        <Attribute.INPUT_SOURCE: 'inputSource'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 1, 26, 20, 7, 3, 482000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'digitalTv',
        }),
        <Attribute.SUPPORTED_INPUT_SOURCES: 'supportedInputSources'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 10, 0, 4, 460000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.MEDIA_PLAYBACK: 'mediaPlayback'>: dict({
        <Attribute.PLAYBACK_STATUS: 'playbackStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_PLAYBACK_COMMANDS: 'supportedPlaybackCommands'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 10, 0, 4, 460000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'play',
            'pause',
            'stop',
            'fastForward',
            'rewind',
          ]),
        }),
      }),
      <Capability.MEDIA_TRACK_CONTROL: 'mediaTrackControl'>: dict({
        <Attribute.SUPPORTED_TRACK_CONTROL_COMMANDS: 'supportedTrackControlCommands'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 10, 0, 4, 989000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '01751e21-3609-ec2f-41af-1c8bc8d96c15',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 10, 0, 4, 989000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'res.1.1.0,sh.1.1.0',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 10, 0, 4, 989000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 10, 0, 4, 989000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2022-01-01',
        }),
        <Attribute.OCF_FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 10, 0, 4, 989000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'T-PTMDEUC-1651.7|ST_ENERGY',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 10, 0, 4, 989000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 10, 0, 4, 989000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 10, 0, 4, 989000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 10, 0, 4, 989000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'QE55LS03BGUXXU',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 10, 0, 4, 989000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Tizen',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 10, 0, 4, 989000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '6.5',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 10, 0, 4, 989000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 10, 0, 4, 989000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung The Frame 55',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 10, 0, 4, 989000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '01751e21-3609-ec2f-41af-1c8bc8d96c15',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 10, 0, 4, 989000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2024-12-30T01:40:02Z',
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 10, 0, 4, 989000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'VD-STV-2022',
        }),
      }),
      <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>: dict({
        <Attribute.POWER_CONSUMPTION: 'powerConsumption'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 22, 38, 42, 162000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'deltaEnergy': 14.61608,
            'end': '2025-02-09T22:38:42Z',
            'energy': 0,
            'energySaved': 0.0,
            'persistedEnergy': 0,
            'persistedSavedEnergy': 0,
            'power': 0,
            'powerEnergy': 0,
            'start': '2025-02-09T22:23:35Z',
          }),
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SAMSUNG_IM_FIXED_FIND_NODE: 'samsungim.fixedFindNode'>: dict({
      }),
      <Capability.SAMSUNG_VD_AMBIENT: 'samsungvd.ambient'>: dict({
      }),
      <Capability.SAMSUNG_VD_AMBIENT_CONTENT: 'samsungvd.ambientContent'>: dict({
        <Attribute.SUPPORTED_AMBIENT_APPS: 'supportedAmbientApps'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 10, 0, 4, 460000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.SAMSUNG_VD_DEVICE_CATEGORY: 'samsungvd.deviceCategory'>: dict({
        <Attribute.CATEGORY: 'category'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 30, 2, 22, 14, 170000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'frametv',
        }),
      }),
      <Capability.SAMSUNG_VD_FIRMWARE_VERSION: 'samsungvd.firmwareVersion'>: dict({
        <Attribute.FIRMWARE_VERSION: 'firmwareVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 30, 2, 22, 14, 170000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '3.5.1',
        }),
      }),
      <Capability.SAMSUNG_VD_MEDIA_INPUT_SOURCE: 'samsungvd.mediaInputSource'>: dict({
        <Attribute.INPUT_SOURCE: 'inputSource'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 28, 14, 7, 2, 589000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'dtv',
        }),
        <Attribute.SUPPORTED_INPUT_SOURCES_MAP: 'supportedInputSourcesMap'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 5, 20, 38, 59, 159000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'id': 'dtv',
              'name': 'TV',
            }),
            dict({
              'id': 'HDMI2',
              'name': 'PC',
            }),
            dict({
              'id': 'HDMI3',
              'name': 'HW-S801B',
            }),
          ]),
        }),
      }),
      <Capability.SAMSUNG_VD_REMOTE_CONTROL: 'samsungvd.remoteControl'>: dict({
      }),
      <Capability.SAMSUNG_VD_SUPPORTS_FEATURES: 'samsungvd.supportsFeatures'>: dict({
        <Attribute.EXECUTABLE_SERVICE_LIST: 'executableServiceList'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.IME_ADV_SUPPORTED: 'imeAdvSupported'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 10, 0, 5, 461000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
        <Attribute.MEDIA_OUTPUT_SUPPORTED: 'mediaOutputSupported'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 10, 0, 5, 461000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
        <Attribute.MOBILE_CAM_SUPPORTED: 'mobileCamSupported'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 10, 0, 5, 461000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
        <Attribute.REMOTELESS_SUPPORTED: 'remotelessSupported'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WIFI_UPDATE_SUPPORT: 'wifiUpdateSupport'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_VD_SUPPORTS_POWER_ON_BY_OCF: 'samsungvd.supportsPowerOnByOcf'>: dict({
        <Attribute.SUPPORTS_POWER_ON_BY_OCF: 'supportsPowerOnByOcf'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 28, 14, 7, 2, 366000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'true',
        }),
      }),
      <Capability.SAMSUNG_VD_THING_STATUS: 'samsungvd.thingStatus'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 28, 14, 7, 2, 212000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Idle',
        }),
        <Attribute.UPDATED_TIME: 'updatedTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 53, 46, 946000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 1739123627,
        }),
      }),
      <Capability.SEC_DEVICE_CONNECTION_STATE: 'sec.deviceConnectionState'>: dict({
        <Attribute.DEVICE_CONNECTION_STATE: 'deviceConnectionState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 22, 23, 31, 946000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'on',
        }),
      }),
      <Capability.TV_CHANNEL: 'tvChannel'>: dict({
        <Attribute.TV_CHANNEL: 'tvChannel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 18, 24, 33, 801000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.TV_CHANNEL_NAME: 'tvChannelName'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 18, 24, 33, 801000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'art',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[vd_stv_2023]
  dict({
    'main': dict({
      <Capability.AUDIO_MUTE: 'audioMute'>: dict({
        <Attribute.MUTE: 'mute'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 7, 19, 59, 197000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'muted',
        }),
      }),
      <Capability.AUDIO_VOLUME: 'audioVolume'>: dict({
        <Attribute.VOLUME: 'volume'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 7, 19, 59, 197000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 7,
        }),
      }),
      <Capability.CUSTOM_ACCESSIBILITY: 'custom.accessibility'>: dict({
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 52, 42, 95000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'samsungvd.ambientContent',
          ]),
        }),
      }),
      <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>: dict({
        <Attribute.DR_MAX_DURATION: 'drMaxDuration'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 14, 43, 27, 382000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 99999999,
        }),
        <Attribute.ENERGY_SAVING_INFO: 'energySavingInfo'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_LEVEL: 'energySavingLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 14, 43, 27, 382000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 1,
        }),
        <Attribute.ENERGY_SAVING_OPERATION: 'energySavingOperation'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 14, 43, 27, 382000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.ENERGY_SAVING_OPERATION_SUPPORT: 'energySavingOperationSupport'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 14, 43, 27, 382000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
        <Attribute.ENERGY_SAVING_SUPPORT: 'energySavingSupport'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 14, 43, 27, 382000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
        <Attribute.ENERGY_TYPE: 'energyType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 14, 43, 27, 382000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2.0',
        }),
        <Attribute.NOTIFICATION_TEMPLATE_I_D: 'notificationTemplateID'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_ENERGY_SAVING_LEVELS: 'supportedEnergySavingLevels'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 14, 43, 27, 382000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            1,
          ]),
        }),
      }),
      <Capability.CUSTOM_ERROR: 'custom.error'>: dict({
        <Attribute.ERROR: 'error'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_LAUNCH_APP: 'custom.launchapp'>: dict({
      }),
      <Capability.CUSTOM_PICTURE_MODE: 'custom.picturemode'>: dict({
        <Attribute.PICTURE_MODE: 'pictureMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 11, 13, 0, 10, 329000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Dynamique',
        }),
        <Attribute.SUPPORTED_PICTURE_MODES: 'supportedPictureModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 11, 13, 0, 10, 329000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'Cinéma',
            'Dynamique',
            'FILMMAKER MODE',
            'Standard',
            'Éco',
          ]),
        }),
        <Attribute.SUPPORTED_PICTURE_MODES_MAP: 'supportedPictureModesMap'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 11, 13, 0, 10, 329000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'id': 'modeMovie',
              'name': 'Cinéma',
            }),
            dict({
              'id': 'modeDynamic',
              'name': 'Dynamique',
            }),
            dict({
              'id': 'modeFilmmakerMode',
              'name': 'FILMMAKER MODE',
            }),
            dict({
              'id': 'modeStandard',
              'name': 'Standard',
            }),
            dict({
              'id': 'modeGen_65552',
              'name': 'Éco',
            }),
          ]),
        }),
      }),
      <Capability.CUSTOM_RECORDING: 'custom.recording'>: dict({
      }),
      <Capability.CUSTOM_SOUND_MODE: 'custom.soundmode'>: dict({
        <Attribute.SOUND_MODE: 'soundMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 7, 19, 59, 632000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Standard',
        }),
        <Attribute.SUPPORTED_SOUND_MODES: 'supportedSoundModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 7, 19, 59, 632000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'Amplifier',
            'Standard',
          ]),
        }),
        <Attribute.SUPPORTED_SOUND_MODES_MAP: 'supportedSoundModesMap'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 7, 19, 59, 632000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'id': 'modeAmplify',
              'name': 'Amplifier',
            }),
            dict({
              'id': 'modeStandard',
              'name': 'Standard',
            }),
          ]),
        }),
      }),
      <Capability.CUSTOM_TV_SEARCH: 'custom.tvsearch'>: dict({
      }),
      <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>: dict({
        <Attribute.DEMAND_RESPONSE_LOAD_CONTROL_STATUS: 'drlcStatus'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 19, 8, 832000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'drlcLevel': 0,
            'drlcType': 1,
            'duration': 99999999,
            'override': False,
            'start': '2025-02-09T15:19:06Z',
          }),
        }),
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.MEDIA_INPUT_SOURCE: 'mediaInputSource'>: dict({
        <Attribute.INPUT_SOURCE: 'inputSource'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_INPUT_SOURCES: 'supportedInputSources'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 8, 17, 26, 29, 978000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.MEDIA_PLAYBACK: 'mediaPlayback'>: dict({
        <Attribute.PLAYBACK_STATUS: 'playbackStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_PLAYBACK_COMMANDS: 'supportedPlaybackCommands'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 8, 17, 26, 29, 978000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'play',
            'pause',
            'stop',
            'fastForward',
            'rewind',
          ]),
        }),
      }),
      <Capability.MEDIA_TRACK_CONTROL: 'mediaTrackControl'>: dict({
        <Attribute.SUPPORTED_TRACK_CONTROL_COMMANDS: 'supportedTrackControlCommands'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 8, 17, 26, 29, 973000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '8c1b8eff-e8c7-dcf8-58f8-da81669b92eb',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 8, 17, 26, 29, 973000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'res.1.1.0,sh.1.1.0',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 8, 17, 26, 29, 973000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 8, 17, 26, 29, 973000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2023-01-01',
        }),
        <Attribute.OCF_FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 13, 17, 35, 52, 874000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'T-PTMCDEUC-0080-2020.2|ST_ENERGY',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 8, 17, 26, 29, 973000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 8, 17, 26, 29, 973000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 8, 17, 26, 29, 973000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 8, 17, 26, 29, 973000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TQ65S90CATXXC',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 8, 17, 26, 29, 973000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Tizen',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 8, 17, 26, 29, 973000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '8.0',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 8, 17, 26, 29, 973000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 8, 17, 26, 29, 973000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TV',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 8, 17, 26, 29, 973000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '8c1b8eff-e8c7-dcf8-58f8-da81669b92eb',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 8, 17, 26, 29, 973000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2024-12-30T10:02:47Z',
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 8, 17, 26, 29, 973000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'VD-STV-2023',
        }),
      }),
      <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>: dict({
        <Attribute.POWER_CONSUMPTION: 'powerConsumption'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 19, 8, 940000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'deltaEnergy': 0,
            'end': '2025-02-09T15:19:08Z',
            'energy': 0,
            'energySaved': 0,
            'persistedEnergy': 0,
            'persistedSavedEnergy': 0,
            'power': 0,
            'powerEnergy': 0,
            'start': '1970-01-01T00:00:00Z',
          }),
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SAMSUNG_IM_FIXED_FIND_NODE: 'samsungim.fixedFindNode'>: dict({
      }),
      <Capability.SAMSUNG_VD_AMBIENT: 'samsungvd.ambient'>: dict({
      }),
      <Capability.SAMSUNG_VD_AMBIENT_CONTENT: 'samsungvd.ambientContent'>: dict({
        <Attribute.SUPPORTED_AMBIENT_APPS: 'supportedAmbientApps'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 8, 17, 26, 29, 978000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.SAMSUNG_VD_DEVICE_CATEGORY: 'samsungvd.deviceCategory'>: dict({
        <Attribute.CATEGORY: 'category'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 7, 19, 59, 606000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'tv',
        }),
      }),
      <Capability.SAMSUNG_VD_FIRMWARE_VERSION: 'samsungvd.firmwareVersion'>: dict({
        <Attribute.FIRMWARE_VERSION: 'firmwareVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 7, 19, 59, 606000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '3.5.1',
        }),
      }),
      <Capability.SAMSUNG_VD_LIGHT_CONTROL: 'samsungvd.lightControl'>: dict({
        <Attribute.ERROR_CODE: 'errorCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REQUEST_ID: 'requestId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SELECTED_APP_ID: 'selectedAppId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SELECTED_MODE: 'selectedMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.STREAM_CONTROL: 'streamControl'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_MODE_MAP: 'supportedModeMap'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_MODES: 'supportedModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_VD_MEDIA_INPUT_SOURCE: 'samsungvd.mediaInputSource'>: dict({
        <Attribute.INPUT_SOURCE: 'inputSource'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 14, 43, 24, 999000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'HDMI1',
        }),
        <Attribute.SUPPORTED_INPUT_SOURCES_MAP: 'supportedInputSourcesMap'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 14, 43, 24, 999000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'id': 'dtv',
              'name': 'TV',
            }),
            dict({
              'id': 'HDMI1',
              'name': 'Chromecast',
            }),
          ]),
        }),
      }),
      <Capability.SAMSUNG_VD_REMOTE_CONTROL: 'samsungvd.remoteControl'>: dict({
      }),
      <Capability.SAMSUNG_VD_SUPPORTS_FEATURES: 'samsungvd.supportsFeatures'>: dict({
        <Attribute.EXECUTABLE_SERVICE_LIST: 'executableServiceList'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.IME_ADV_SUPPORTED: 'imeAdvSupported'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 7, 19, 59, 851000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
        <Attribute.MEDIA_OUTPUT_SUPPORTED: 'mediaOutputSupported'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 7, 19, 59, 851000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
        <Attribute.MOBILE_CAM_SUPPORTED: 'mobileCamSupported'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 7, 19, 59, 851000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
        <Attribute.REMOTELESS_SUPPORTED: 'remotelessSupported'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WIFI_UPDATE_SUPPORT: 'wifiUpdateSupport'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_VD_SUPPORTS_POWER_ON_BY_OCF: 'samsungvd.supportsPowerOnByOcf'>: dict({
        <Attribute.SUPPORTS_POWER_ON_BY_OCF: 'supportsPowerOnByOcf'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 14, 43, 24, 686000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'true',
        }),
      }),
      <Capability.SAMSUNG_VD_THING_STATUS: 'samsungvd.thingStatus'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 14, 43, 24, 358000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Idle',
        }),
        <Attribute.UPDATED_TIME: 'updatedTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 15, 19, 7, 72000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 1739114347,
        }),
      }),
      <Capability.SEC_DEVICE_CONNECTION_STATE: 'sec.deviceConnectionState'>: dict({
        <Attribute.DEVICE_CONNECTION_STATE: 'deviceConnectionState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 18, 32, 4, 977000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'on',
        }),
      }),
      <Capability.TV_CHANNEL: 'tvChannel'>: dict({
        <Attribute.TV_CHANNEL: 'tvChannel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 13, 20, 48, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.TV_CHANNEL_NAME: 'tvChannelName'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 13, 21, 51, 129000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '9Ur5IzDKqV.TizenYouTube',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[vd_stv_2023_1]
  dict({
    'main': dict({
      <Capability.AUDIO_MUTE: 'audioMute'>: dict({
        <Attribute.MUTE: 'mute'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 30, 2, 22, 9, 661000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'muted',
        }),
      }),
      <Capability.AUDIO_VOLUME: 'audioVolume'>: dict({
        <Attribute.VOLUME: 'volume'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 30, 2, 22, 9, 661000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 15,
        }),
      }),
      <Capability.CUSTOM_ACCESSIBILITY: 'custom.accessibility'>: dict({
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 15, 2, 22, 7, 511000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>: dict({
        <Attribute.DR_MAX_DURATION: 'drMaxDuration'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 4, 23, 30, 21, 308000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 99999999,
        }),
        <Attribute.ENERGY_SAVING_INFO: 'energySavingInfo'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_LEVEL: 'energySavingLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 4, 23, 30, 21, 308000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 1,
        }),
        <Attribute.ENERGY_SAVING_OPERATION: 'energySavingOperation'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 4, 23, 30, 21, 308000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.ENERGY_SAVING_OPERATION_SUPPORT: 'energySavingOperationSupport'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 4, 23, 30, 21, 308000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
        <Attribute.ENERGY_SAVING_SUPPORT: 'energySavingSupport'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 4, 23, 30, 21, 308000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
        <Attribute.ENERGY_TYPE: 'energyType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 4, 23, 30, 21, 308000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2.0',
        }),
        <Attribute.NOTIFICATION_TEMPLATE_I_D: 'notificationTemplateID'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_ENERGY_SAVING_LEVELS: 'supportedEnergySavingLevels'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 4, 23, 30, 21, 308000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            1,
          ]),
        }),
      }),
      <Capability.CUSTOM_ERROR: 'custom.error'>: dict({
        <Attribute.ERROR: 'error'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_LAUNCH_APP: 'custom.launchapp'>: dict({
      }),
      <Capability.CUSTOM_PICTURE_MODE: 'custom.picturemode'>: dict({
        <Attribute.PICTURE_MODE: 'pictureMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 29, 22, 38, 23, 436000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'FILMMAKER MODE',
        }),
        <Attribute.SUPPORTED_PICTURE_MODES: 'supportedPictureModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 29, 22, 38, 23, 436000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'Dynamic',
            'Eco',
            'FILMMAKER MODE',
            'Movie',
            'Standard',
          ]),
        }),
        <Attribute.SUPPORTED_PICTURE_MODES_MAP: 'supportedPictureModesMap'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 29, 22, 38, 23, 436000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'id': 'modeDynamic',
              'name': 'Dynamic',
            }),
            dict({
              'id': 'modeGen_65552',
              'name': 'Eco',
            }),
            dict({
              'id': 'modeFilmmakerMode',
              'name': 'FILMMAKER MODE',
            }),
            dict({
              'id': 'modeMovie',
              'name': 'Movie',
            }),
            dict({
              'id': 'modeStandard',
              'name': 'Standard',
            }),
          ]),
        }),
      }),
      <Capability.CUSTOM_RECORDING: 'custom.recording'>: dict({
      }),
      <Capability.CUSTOM_SOUND_MODE: 'custom.soundmode'>: dict({
        <Attribute.SOUND_MODE: 'soundMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 21, 2, 22, 15, 343000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Standard',
        }),
        <Attribute.SUPPORTED_SOUND_MODES: 'supportedSoundModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 30, 2, 22, 9, 629000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'Amplify',
            'Standard',
          ]),
        }),
        <Attribute.SUPPORTED_SOUND_MODES_MAP: 'supportedSoundModesMap'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 30, 2, 22, 9, 629000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'id': 'modeAmplify',
              'name': 'Amplify',
            }),
            dict({
              'id': 'modeStandard',
              'name': 'Standard',
            }),
          ]),
        }),
      }),
      <Capability.CUSTOM_TV_SEARCH: 'custom.tvsearch'>: dict({
      }),
      <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>: dict({
        <Attribute.DEMAND_RESPONSE_LOAD_CONTROL_STATUS: 'drlcStatus'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 8, 12, 57, 48, 78000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'drlcLevel': 0,
            'drlcType': 1,
            'duration': 99999999,
            'override': False,
            'start': '2024-11-08T12:57:47Z',
          }),
        }),
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': dict({
            'href': '/sec/tv/deviceinfo',
          }),
          'timestamp': datetime.datetime(2023, 6, 16, 10, 54, 2, 765000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'payload': dict({
              'if': list([
                'oic.if.r',
                'oic.if.baseline',
              ]),
              'rt': list([
                'x.com.samsung.tv.deviceinfo',
              ]),
              'x.com.samsung.country': 'UK',
              'x.com.samsung.infolinkversion': 'T-INFOLINK2023-1002',
              'x.com.samsung.modelid': '23_PONTUSM_QTV',
              'x.com.samsung.tv.ambientsupport': True,
              'x.com.samsung.tv.blemac': 'E0:9D:13:9A:6F:67',
              'x.com.samsung.tv.btmac': 'E0:9D:13:9A:6F:67',
              'x.com.samsung.tv.category': 'tv',
              'x.com.samsung.tv.countrycode': 'GB',
              'x.com.samsung.tv.duid': 'BI24U5QUOGMHF',
              'x.com.samsung.tv.ethmac': '68:fc:ca:14:5b:e3',
              'x.com.samsung.tv.language': 'en_GB',
              'x.com.samsung.tv.mnid': '0AJK',
              'x.com.samsung.tv.onsupport': True,
              'x.com.samsung.tv.p2pmac': 'e2:9d:13:9a:6f:66',
              'x.com.samsung.tv.paneltime': 197,
              'x.com.samsung.tv.setupid': '101',
              'x.com.samsung.tv.sn': '0EV63STW300004J',
              'x.com.samsung.tv.swmodel': 'QCQ95',
              'x.com.samsung.tv.thingversion': '3.5.0',
              'x.com.samsung.tv.udn': '8ce4302f-8175-4bc6-b5d1-87a2cad2ff76',
              'x.com.samsung.tv.vendorcode': 'Samsung',
              'x.com.samsung.tv.wifimac': 'e0:9d:13:9a:6f:66',
              'x.com.samsung.tv.year': 2023,
            }),
          }),
        }),
      }),
      <Capability.MEDIA_INPUT_SOURCE: 'mediaInputSource'>: dict({
        <Attribute.INPUT_SOURCE: 'inputSource'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 12, 25, 9, 52, 40, 510000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'HDMI3',
        }),
        <Attribute.SUPPORTED_INPUT_SOURCES: 'supportedInputSources'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 29, 22, 38, 21, 668000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
          ]),
        }),
      }),
      <Capability.MEDIA_PLAYBACK: 'mediaPlayback'>: dict({
        <Attribute.PLAYBACK_STATUS: 'playbackStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_PLAYBACK_COMMANDS: 'supportedPlaybackCommands'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 29, 22, 38, 21, 668000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'play',
            'pause',
            'stop',
            'fastForward',
            'rewind',
          ]),
        }),
      }),
      <Capability.MEDIA_TRACK_CONTROL: 'mediaTrackControl'>: dict({
        <Attribute.SUPPORTED_TRACK_CONTROL_COMMANDS: 'supportedTrackControlCommands'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 29, 22, 38, 21, 668000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'b4d20b8f-ae23-8a6d-9db2-4c9d8db2c615',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 29, 22, 38, 21, 668000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'res.1.1.0,sh.1.1.0',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 29, 22, 38, 21, 668000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 29, 22, 38, 21, 668000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2023-01-01',
        }),
        <Attribute.OCF_FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 29, 22, 38, 21, 668000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'T-PTMCDEUC-0080-2013.1|ST_ENERGY',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 29, 22, 38, 21, 668000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 29, 22, 38, 21, 668000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 29, 22, 38, 21, 668000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 29, 22, 38, 21, 668000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'QE55QN95CATXXU',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 29, 22, 38, 21, 668000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Tizen',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 29, 22, 38, 21, 668000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '8.0',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 29, 22, 38, 21, 668000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 29, 22, 38, 21, 668000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung QN95CA 55',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 29, 22, 38, 21, 668000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'b4d20b8f-ae23-8a6d-9db2-4c9d8db2c615',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 29, 22, 38, 21, 668000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2024-10-25T23:24:50Z',
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 29, 22, 38, 21, 668000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'VD-STV-2023',
        }),
      }),
      <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>: dict({
        <Attribute.POWER_CONSUMPTION: 'powerConsumption'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 9, 0, 50, 57, 390000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'deltaEnergy': 20.869067,
            'end': '2024-11-09T00:50:57Z',
            'energy': 0,
            'energySaved': 0.0,
            'persistedEnergy': 0,
            'persistedSavedEnergy': 0,
            'power': 0,
            'powerEnergy': 0,
            'start': '2024-11-09T00:35:56Z',
          }),
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SAMSUNG_IM_FIXED_FIND_NODE: 'samsungim.fixedFindNode'>: dict({
      }),
      <Capability.SAMSUNG_VD_AMBIENT: 'samsungvd.ambient'>: dict({
      }),
      <Capability.SAMSUNG_VD_AMBIENT_CONTENT: 'samsungvd.ambientContent'>: dict({
        <Attribute.SUPPORTED_AMBIENT_APPS: 'supportedAmbientApps'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 29, 22, 38, 22, 933000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'weather',
          ]),
        }),
      }),
      <Capability.SAMSUNG_VD_DEVICE_CATEGORY: 'samsungvd.deviceCategory'>: dict({
        <Attribute.CATEGORY: 'category'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 21, 2, 22, 15, 667000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'tv',
        }),
      }),
      <Capability.SAMSUNG_VD_FIRMWARE_VERSION: 'samsungvd.firmwareVersion'>: dict({
        <Attribute.FIRMWARE_VERSION: 'firmwareVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 29, 22, 38, 22, 901000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '3.5.1',
        }),
      }),
      <Capability.SAMSUNG_VD_LIGHT_CONTROL: 'samsungvd.lightControl'>: dict({
        <Attribute.ERROR_CODE: 'errorCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REQUEST_ID: 'requestId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SELECTED_APP_ID: 'selectedAppId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SELECTED_MODE: 'selectedMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.STREAM_CONTROL: 'streamControl'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_MODE_MAP: 'supportedModeMap'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_MODES: 'supportedModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_VD_MEDIA_INPUT_SOURCE: 'samsungvd.mediaInputSource'>: dict({
        <Attribute.INPUT_SOURCE: 'inputSource'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 12, 17, 27, 25, 863000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'HDMI3',
        }),
        <Attribute.SUPPORTED_INPUT_SOURCES_MAP: 'supportedInputSourcesMap'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 4, 23, 30, 19, 47000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            dict({
              'id': 'dtv',
              'name': 'TV',
            }),
            dict({
              'id': 'HDMI3',
              'name': 'AVC-X3800H',
            }),
          ]),
        }),
      }),
      <Capability.SAMSUNG_VD_REMOTE_CONTROL: 'samsungvd.remoteControl'>: dict({
      }),
      <Capability.SAMSUNG_VD_SUPPORTS_FEATURES: 'samsungvd.supportsFeatures'>: dict({
        <Attribute.EXECUTABLE_SERVICE_LIST: 'executableServiceList'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.IME_ADV_SUPPORTED: 'imeAdvSupported'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 23, 11, 31, 51, 915000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
        <Attribute.MEDIA_OUTPUT_SUPPORTED: 'mediaOutputSupported'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MOBILE_CAM_SUPPORTED: 'mobileCamSupported'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 23, 11, 31, 51, 915000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
        <Attribute.REMOTELESS_SUPPORTED: 'remotelessSupported'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WIFI_UPDATE_SUPPORT: 'wifiUpdateSupport'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_VD_SUPPORTS_POWER_ON_BY_OCF: 'samsungvd.supportsPowerOnByOcf'>: dict({
        <Attribute.SUPPORTS_POWER_ON_BY_OCF: 'supportsPowerOnByOcf'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 4, 23, 30, 18, 998000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'true',
        }),
      }),
      <Capability.SAMSUNG_VD_THING_STATUS: 'samsungvd.thingStatus'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 28, 11, 24, 19, 707000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Idle',
        }),
        <Attribute.UPDATED_TIME: 'updatedTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 8, 12, 57, 44, 328000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 1731070664,
        }),
      }),
      <Capability.SEC_DEVICE_CONNECTION_STATE: 'sec.deviceConnectionState'>: dict({
        <Attribute.DEVICE_CONNECTION_STATE: 'deviceConnectionState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 9, 0, 20, 35, 400000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'on',
        }),
      }),
      <Capability.TV_CHANNEL: 'tvChannel'>: dict({
        <Attribute.TV_CHANNEL: 'tvChannel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 11, 23, 59, 21, 650000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.TV_CHANNEL_NAME: 'tvChannelName'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 29, 22, 38, 22, 949000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[virtual_calendar]
  dict({
    'main': dict({
      <Capability.LEGENDABSOLUTE60149_CURRENT_TIME_PERIOD: 'legendabsolute60149.currentTimePeriod'>: dict({
        <Attribute.CURRENT_TIME_PERIOD: 'currentTimePeriod'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 12, 11, 51, 499000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Day',
        }),
      }),
      <Capability.LEGENDABSOLUTE60149_CURRENT_TWILIGHT: 'legendabsolute60149.currentTwilight'>: dict({
        <Attribute.CURRENT_TWILIGHT: 'currentTwilight'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 12, 11, 51, 502000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'None',
        }),
      }),
      <Capability.LEGENDABSOLUTE60149_DAY_LENGTH: 'legendabsolute60149.dayLength'>: dict({
        <Attribute.DAY_LENGTH: 'dayLength'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 0, 53, 933000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '10 hrs 31 min',
        }),
      }),
      <Capability.LEGENDABSOLUTE60149_EVEN_ODD_DAY: 'legendabsolute60149.evenOddDay'>: dict({
        <Attribute.EVEN_ODD_DAY: 'evenOddDay'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 30, 54, 220000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Odd',
        }),
      }),
      <Capability.LEGENDABSOLUTE60149_LOCAL_DATE: 'legendabsolute60149.localDate'>: dict({
        <Attribute.LOCAL_DATE: 'localDate'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 58, 54, 337000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2025/02/09  13:58',
        }),
      }),
      <Capability.LEGENDABSOLUTE60149_LOCAL_DATE_ONE: 'legendabsolute60149.localDateOne'>: dict({
        <Attribute.LOCAL_DATE_ONE: 'localDateOne'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 30, 54, 262000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 20250209,
        }),
      }),
      <Capability.LEGENDABSOLUTE60149_LOCAL_DATE_TWO1: 'legendabsolute60149.localDateTwo1'>: dict({
        <Attribute.LOCAL_DATE_TWO: 'localDateTwo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 30, 54, 265000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 20250209,
        }),
      }),
      <Capability.LEGENDABSOLUTE60149_LOCAL_DAY: 'legendabsolute60149.localDay'>: dict({
        <Attribute.LOCAL_DAY: 'localDay'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 30, 54, 184000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 9,
        }),
      }),
      <Capability.LEGENDABSOLUTE60149_LOCAL_DAY_TWO: 'legendabsolute60149.localDayTwo'>: dict({
        <Attribute.LOCAL_DAY_TWO: 'localDayTwo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 30, 54, 218000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 9,
        }),
      }),
      <Capability.LEGENDABSOLUTE60149_LOCAL_HOUR: 'legendabsolute60149.localHour'>: dict({
        <Attribute.LOCAL_HOUR: 'localHour'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 58, 54, 347000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 1358,
        }),
      }),
      <Capability.LEGENDABSOLUTE60149_LOCAL_HOUR_OFFSET: 'legendabsolute60149.localHourOffset'>: dict({
        <Attribute.LOCAL_HOUR_OFFSET: 'localHourOffset'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 30, 54, 351000, tzinfo=datetime.timezone.utc),
          'unit': 'hr',
          'value': -4,
        }),
      }),
      <Capability.LEGENDABSOLUTE60149_LOCAL_HOUR_TWO: 'legendabsolute60149.localHourTwo'>: dict({
        <Attribute.LOCAL_HOUR_TWO: 'localHourTwo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 58, 54, 367000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 1358,
        }),
      }),
      <Capability.LEGENDABSOLUTE60149_LOCAL_MONTH: 'legendabsolute60149.localMonth'>: dict({
        <Attribute.LOCAL_MONTH: 'localMonth'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 30, 54, 304000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 2,
        }),
      }),
      <Capability.LEGENDABSOLUTE60149_LOCAL_MONTH_DAY_ONE: 'legendabsolute60149.localMonthDayOne'>: dict({
        <Attribute.LOCAL_MONTH_DAY_ONE: 'localMonthDayOne'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 30, 54, 226000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 209,
        }),
      }),
      <Capability.LEGENDABSOLUTE60149_LOCAL_MONTH_DAY_TWO: 'legendabsolute60149.localMonthDayTwo'>: dict({
        <Attribute.LOCAL_MONTH_DAY_TWO: 'localMonthDayTwo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 30, 54, 230000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 209,
        }),
      }),
      <Capability.LEGENDABSOLUTE60149_LOCAL_MONTH_TWO: 'legendabsolute60149.localMonthTwo'>: dict({
        <Attribute.LOCAL_MONTH_TWO: 'localMonthTwo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 30, 54, 306000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 2,
        }),
      }),
      <Capability.LEGENDABSOLUTE60149_LOCAL_WEEK_DAY: 'legendabsolute60149.localWeekDay'>: dict({
        <Attribute.LOCAL_WEEK_DAY: 'localWeekDay'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 30, 54, 347000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
      }),
      <Capability.LEGENDABSOLUTE60149_LOCAL_YEAR: 'legendabsolute60149.localYear'>: dict({
        <Attribute.LOCAL_YEAR: 'localYear'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 30, 54, 306000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 2025,
        }),
      }),
      <Capability.LEGENDABSOLUTE60149_SUN_AZIMUTH_ANGLE: 'legendabsolute60149.sunAzimuthAngle'>: dict({
        <Attribute.SUN_AZIMUTH_ANGLE: 'sunAzimuthAngle'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 58, 54, 376000, tzinfo=datetime.timezone.utc),
          'unit': 'º',
          'value': 190.7,
        }),
      }),
      <Capability.LEGENDABSOLUTE60149_SUN_ELEVATION_ANGLE: 'legendabsolute60149.sunElevationAngle'>: dict({
        <Attribute.SUN_ELEVATION_ANGLE: 'sunElevationAngle'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 56, 54, 376000, tzinfo=datetime.timezone.utc),
          'unit': 'º',
          'value': 35.8,
        }),
      }),
      <Capability.LEGENDABSOLUTE60149_SUN_RISE: 'legendabsolute60149.sunRise'>: dict({
        <Attribute.SUN_RISE: 'sunRise'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 0, 53, 872000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '08:07:00',
        }),
      }),
      <Capability.LEGENDABSOLUTE60149_SUN_RISE_OFFSET1: 'legendabsolute60149.sunRiseOffset1'>: dict({
        <Attribute.SUN_RISE_OFFSET: 'sunRiseOffset'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 58, 54, 320000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 351,
        }),
      }),
      <Capability.LEGENDABSOLUTE60149_SUN_SET: 'legendabsolute60149.sunSet'>: dict({
        <Attribute.SUN_SET: 'sunSet'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 0, 53, 871000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '18:38:00',
        }),
      }),
      <Capability.LEGENDABSOLUTE60149_SUN_SET_OFFSET1: 'legendabsolute60149.sunSetOffset1'>: dict({
        <Attribute.SUN_SET_OFFSET: 'sunSetOffset'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 58, 54, 321000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': -280,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[virtual_thermostat]
  dict({
    'main': dict({
      <Capability.BATTERY: 'battery'>: dict({
        <Attribute.BATTERY: 'battery'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 22, 4, 56, 341000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 100,
        }),
        <Attribute.QUANTITY: 'quantity'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 22, 4, 56, 341000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 51,
        }),
        <Attribute.TYPE: 'type'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 22, 4, 56, 341000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '38140',
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 22, 4, 56, 341000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 8554.194688973037,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 22, 4, 56, 341000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': dict({
            'maximum': 1826.722761785079,
            'minimum': 9268.726934158902,
            'step': 138.2080712609211,
          }),
        }),
      }),
      <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>: dict({
        <Attribute.COOLING_SETPOINT: 'coolingSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 22, 4, 56, 341000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 244.33726326608746,
        }),
        <Attribute.COOLING_SETPOINT_RANGE: 'coolingSetpointRange'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 22, 4, 56, 341000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': dict({
            'maximum': 7288.145606306409,
            'minimum': 4997.721228739137,
            'step': 7620.031701049315,
          }),
        }),
      }),
      <Capability.THERMOSTAT_FAN_MODE: 'thermostatFanMode'>: dict({
        <Attribute.SUPPORTED_THERMOSTAT_FAN_MODES: 'supportedThermostatFanModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 22, 4, 56, 341000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'on',
          ]),
        }),
        <Attribute.THERMOSTAT_FAN_MODE: 'thermostatFanMode'>: dict({
          'data': dict({
          }),
          'timestamp': datetime.datetime(2025, 2, 10, 22, 4, 56, 341000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'followschedule',
        }),
      }),
      <Capability.THERMOSTAT_HEATING_SETPOINT: 'thermostatHeatingSetpoint'>: dict({
        <Attribute.HEATING_SETPOINT: 'heatingSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 22, 4, 56, 341000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 814.7469111058201,
        }),
        <Attribute.HEATING_SETPOINT_RANGE: 'heatingSetpointRange'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 22, 4, 56, 341000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': dict({
            'maximum': 3226.693210895862,
            'minimum': 6214.940743832475,
            'step': 9234.459191378826,
          }),
        }),
      }),
      <Capability.THERMOSTAT_MODE: 'thermostatMode'>: dict({
        <Attribute.SUPPORTED_THERMOSTAT_MODES: 'supportedThermostatModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 22, 4, 56, 341000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': list([
            'rush hour',
          ]),
        }),
        <Attribute.THERMOSTAT_MODE: 'thermostatMode'>: dict({
          'data': dict({
          }),
          'timestamp': datetime.datetime(2025, 2, 10, 22, 4, 56, 341000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'auxheatonly',
        }),
      }),
      <Capability.THERMOSTAT_OPERATING_STATE: 'thermostatOperatingState'>: dict({
        <Attribute.THERMOSTAT_OPERATING_STATE: 'thermostatOperatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 22, 4, 56, 341000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'pending cool',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[virtual_valve]
  dict({
    'main': dict({
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.VALVE: 'valve'>: dict({
        <Attribute.VALVE: 'valve'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 11, 11, 27, 2, 262000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'closed',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[virtual_water_sensor]
  dict({
    'main': dict({
      <Capability.BATTERY: 'battery'>: dict({
        <Attribute.BATTERY: 'battery'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 21, 58, 18, 784000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 100,
        }),
        <Attribute.QUANTITY: 'quantity'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 21, 58, 18, 784000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 84,
        }),
        <Attribute.TYPE: 'type'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 21, 58, 18, 784000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '46120',
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.WATER_SENSOR: 'waterSensor'>: dict({
        <Attribute.WATER: 'water'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 10, 21, 58, 18, 784000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'dry',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[yale_push_button_deadbolt_lock]
  dict({
    'main': dict({
      <Capability.BATTERY: 'battery'>: dict({
        <Attribute.BATTERY: 'battery'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 18, 14, 150000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 86,
        }),
        <Attribute.QUANTITY: 'quantity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TYPE: 'type'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.FIRMWARE_UPDATE: 'firmwareUpdate'>: dict({
        <Attribute.AVAILABLE_VERSION: 'availableVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 11, 48, 45, 331000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '00840847',
        }),
        <Attribute.CURRENT_VERSION: 'currentVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 11, 48, 45, 328000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '00840847',
        }),
        <Attribute.LAST_UPDATE_STATUS: 'lastUpdateStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_UPDATE_STATUS_REASON: 'lastUpdateStatusReason'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_UPDATE_TIME: 'lastUpdateTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.STATE: 'state'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 11, 48, 45, 331000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'normalOperation',
        }),
        <Attribute.SUPPORTED_COMMANDS: 'supportedCommands'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.UPDATE_AVAILABLE: 'updateAvailable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 11, 48, 45, 332000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
      }),
      <Capability.LOCK: 'lock'>: dict({
        <Attribute.LOCK: 'lock'>: dict({
          'data': dict({
          }),
          'timestamp': datetime.datetime(2025, 2, 9, 17, 29, 56, 641000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'locked',
        }),
        <Attribute.SUPPORTED_LOCK_COMMANDS: 'supportedLockCommands'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_LOCK_VALUES: 'supportedLockValues'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_UNLOCK_DIRECTIONS: 'supportedUnlockDirections'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.LOCK_CODES: 'lockCodes'>: dict({
        <Attribute.CODE_CHANGED: 'codeChanged'>: dict({
          'data': dict({
            'codeName': 'Code 8',
          }),
          'timestamp': datetime.datetime(2025, 1, 6, 4, 56, 31, 712000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '8 unset',
        }),
        <Attribute.CODE_LENGTH: 'codeLength'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 8, 4, 15, 29, 24, 127000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.CODE_REPORT: 'codeReport'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 8, 1, 1, 36, 58, 424000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 5,
        }),
        <Attribute.LOCK: 'lock'>: dict({
          'data': dict({
            'method': 'manual',
          }),
          'timestamp': datetime.datetime(2023, 7, 10, 23, 3, 42, 305000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'locked',
        }),
        <Attribute.LOCK_CODES: 'lockCodes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 6, 4, 56, 28, 325000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '{"1":"Salim","2":"Saima","3":"Sarah","4":"Aisha","5":"Moiz"}',
        }),
        <Attribute.MAX_CODE_LENGTH: 'maxCodeLength'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 8, 22, 1, 34, 18, 690000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 8,
        }),
        <Attribute.MAX_CODES: 'maxCodes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 8, 22, 1, 34, 19, 751000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 250,
        }),
        <Attribute.MIN_CODE_LENGTH: 'minCodeLength'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 8, 22, 1, 34, 18, 781000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 4,
        }),
        <Attribute.SCAN_CODES: 'scanCodes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 6, 4, 56, 31, 730000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Complete',
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[zooz_zen16_multirelay]
  dict({
    'main': dict({
      <Capability.PLATEMUSIC11009_ASSOCIATION_GROUP_FOUR: 'platemusic11009.associationGroupFour'>: dict({
        <Attribute.ASSOCIATION_GROUP_FOUR: 'associationGroupFour'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 19, 21, 5, 22, 114000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'None',
        }),
      }),
      <Capability.PLATEMUSIC11009_ASSOCIATION_GROUP_THREE: 'platemusic11009.associationGroupThree'>: dict({
        <Attribute.ASSOCIATION_GROUP_THREE: 'associationGroupThree'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 19, 21, 5, 22, 315000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'None',
        }),
      }),
      <Capability.PLATEMUSIC11009_ASSOCIATION_GROUP_TWO: 'platemusic11009.associationGroupTwo'>: dict({
        <Attribute.ASSOCIATION_GROUP_TWO: 'associationGroupTwo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 19, 21, 5, 22, 663000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'None',
        }),
      }),
      <Capability.PLATEMUSIC11009_DEVICE_NETWORK_ID: 'platemusic11009.deviceNetworkId'>: dict({
        <Attribute.DEVICE_NETWORK_ID: 'deviceNetworkId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 12, 0, 40, 9, 555000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[33]',
        }),
      }),
      <Capability.PLATEMUSIC11009_FIRMWARE: 'platemusic11009.firmware'>: dict({
        <Attribute.FIRMWARE_VERSION: 'firmwareVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 5, 18, 19, 52, 460000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 3.1,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 28, 27, 723000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'on',
        }),
      }),
    }),
    'relay1': dict({
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 28, 27, 170000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'on',
        }),
      }),
    }),
    'relay2': dict({
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 28, 27, 852000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'on',
        }),
      }),
    }),
    'relay3': dict({
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 17, 28, 28, 349000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'on',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_unknown_capability
  dict({
    'main': dict({
      'fakeCapability': dict({
        'fakeAttribute': dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 31, 9, 18, 21, 859000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'BOOOOOOOM',
        }),
      }),
    }),
  })
# ---
