# serializer version: 1
# name: test_fetching_devices[devices_2]
  list([
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': '440063de-a200-40b5-8a6b-f3399eaa0370',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Bathroom spot',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-color-temperature-bulb',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.COLOR_CONTROL: 'colorControl'>,
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SAMSUNG_IM_HUE_SYNC_MODE: 'samsungim.hueSyncMode'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': 'cb958955-b015-498c-9e62-fc0c51abd054',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Standing light',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-rgbw-color-bulb',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': '0b2ed6c7-dc39-42fd-ab64-8f1c75c1fad0',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Hue ambiance spot 3',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-color-temperature-bulb',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.WINDOW_SHADE: 'windowShade'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': '571af102-15db-4030-b76b-245a691f74a5',
      'device_manufacturer_code': 'WonderLabs Company',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Curtain 1A',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'c2c-shade',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.WINDOW_SHADE: 'windowShade'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': '42efbc29-b283-4d01-a343-f0963ae7dba4',
      'device_manufacturer_code': 'WonderLabs Company',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Curtain 1E',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'c2c-shade',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': 'a456cbd5-0503-46be-acc4-54e189dc6ff4',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Sink',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-color-temperature-bulb',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.MOTION_SENSOR: 'motionSensor'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': '08da6244-b3ad-4c45-b005-d8572bd9138f',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Hue motion sensor 1',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'c2c-motion-2',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': '297b909c-ca9a-4517-ba42-7412269cd00e',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Hue ambiance spot 2',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-color-temperature-bulb',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': '4d4f5261-dc3a-4e31-b8f4-15699c934f62',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Hue ambiance spot 4',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-color-temperature-bulb',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.COLOR_CONTROL: 'colorControl'>,
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SAMSUNG_IM_HUE_SYNC_MODE: 'samsungim.hueSyncMode'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': '9eaad965-638d-48c2-8aab-e97aa031226e',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Night light',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-rgbw-color-bulb',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.THERMOSTAT_MODE: 'thermostatMode'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': 'f1e182eb-1e21-43ed-a32d-f3c2796b9865',
      'device_manufacturer_code': 'Netatmo',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Netatmo NAPlug',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'c2c-thermostat-bridge-1',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.COLOR_CONTROL: 'colorControl'>,
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SAMSUNG_IM_HUE_SYNC_MODE: 'samsungim.hueSyncMode'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': '4f43eaf7-b3d1-4d26-be8e-807b37dfe8e0',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Kitchen',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-rgbw-color-bulb',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.RELATIVE_HUMIDITY_MEASUREMENT: 'relativeHumidityMeasurement'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': '5ca2281d-fb11-4835-8990-0ea287556fe5',
      'device_manufacturer_code': 'WonderLabs Company',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Hub 2 08',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'c2c-humidity',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.COLOR_CONTROL: 'colorControl'>,
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SAMSUNG_IM_HUE_SYNC_MODE: 'samsungim.hueSyncMode'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': '3cd2ce09-6e19-48a9-b296-558d8cc55726',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Tv',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-rgbw-color-bulb',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': 'e25e6818-efab-4f45-97f8-867ab2c1c33d',
      'device_manufacturer_code': 'WonderLabs Company',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'TV',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'c2c-switch',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.COLOR_CONTROL: 'colorControl'>,
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SAMSUNG_IM_HUE_SYNC_MODE: 'samsungim.hueSyncMode'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': '5ed8ef33-96dc-4d53-8ad1-4a15e6361c1e',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Bureau',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-rgbw-color-bulb',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': 'f15b3d69-7452-4b21-a27c-d3db3c84e2d4',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Hue ambiance spot 5',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-color-temperature-bulb',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.COLOR_CONTROL: 'colorControl'>,
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SAMSUNG_IM_HUE_SYNC_MODE: 'samsungim.hueSyncMode'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': 'be1152d6-cad0-4859-b4a6-5770e63dd0b5',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Bed',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-rgbw-color-bulb',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': '53fa938e-7586-41ca-84e7-ccc6bcba94df',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Hue ambiance spot 1',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-color-temperature-bulb',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.COLOR_CONTROL: 'colorControl'>,
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SAMSUNG_IM_HUE_SYNC_MODE: 'samsungim.hueSyncMode'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': 'd472222b-0e19-4d33-8375-b2abf6c9df08',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Bed',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-rgbw-color-bulb',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
  ])
# ---
# name: test_fetching_devices[devices_3]
  list([
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>,
            <Capability.OVEN_SETPOINT: 'ovenSetpoint'>,
            <Capability.OVEN_MODE: 'ovenMode'>,
            <Capability.OVEN_OPERATING_STATE: 'ovenOperatingState'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
            <Capability.SAMSUNG_CE_KITCHEN_DEVICE_IDENTIFICATION: 'samsungce.kitchenDeviceIdentification'>,
            <Capability.SAMSUNG_CE_KITCHEN_DEVICE_DEFAULTS: 'samsungce.kitchenDeviceDefaults'>,
            <Capability.SAMSUNG_CE_DOOR_STATE: 'samsungce.doorState'>,
            <Capability.SAMSUNG_CE_CUSTOM_RECIPE: 'samsungce.customRecipe'>,
            <Capability.SAMSUNG_CE_OVEN_MODE: 'samsungce.ovenMode'>,
            <Capability.SAMSUNG_CE_OVEN_OPERATING_STATE: 'samsungce.ovenOperatingState'>,
            <Capability.SAMSUNG_CE_MEAT_PROBE: 'samsungce.meatProbe'>,
            <Capability.SAMSUNG_CE_LAMP: 'samsungce.lamp'>,
            <Capability.SAMSUNG_CE_KITCHEN_MODE_SPECIFICATION: 'samsungce.kitchenModeSpecification'>,
            <Capability.SAMSUNG_CE_KIDS_LOCK: 'samsungce.kidsLock'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.CUSTOM_COOKTOP_OPERATING_STATE: 'custom.cooktopOperatingState'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
        dict({
          'capabilities': list([
            <Capability.OVEN_SETPOINT: 'ovenSetpoint'>,
            <Capability.OVEN_MODE: 'ovenMode'>,
            <Capability.OVEN_OPERATING_STATE: 'ovenOperatingState'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.SAMSUNG_CE_OVEN_MODE: 'samsungce.ovenMode'>,
            <Capability.SAMSUNG_CE_OVEN_OPERATING_STATE: 'samsungce.ovenOperatingState'>,
            <Capability.SAMSUNG_CE_KITCHEN_DEVICE_DEFAULTS: 'samsungce.kitchenDeviceDefaults'>,
            <Capability.CUSTOM_OVEN_CAVITY_STATUS: 'custom.ovenCavityStatus'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'cavity-01',
          'label': 'cavity-01',
        }),
      ]),
      'device_id': '2c3cbaa0-1899-5ddc-7b58-9d657bd53d18',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Range',
      'label': 'Vulcan',
      'location_id': '597a4912-13c9-47ab-5916-3cbe28b61abd',
      'name': 'Samsung Range',
      'type': <DeviceType.OCF: 'OCF'>,
    }),
  ])
# ---
# name: test_fetching_single_device
  dict({
    'components': list([
      dict({
        'capabilities': list([
          <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
          <Capability.SWITCH: 'switch'>,
          <Capability.SWITCH_LEVEL: 'switchLevel'>,
          <Capability.HEALTH_CHECK: 'healthCheck'>,
          <Capability.REFRESH: 'refresh'>,
          <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
          <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
        ]),
        'id': 'main',
        'label': 'main',
      }),
    ]),
    'device_id': '440063de-a200-40b5-8a6b-f3399eaa0370',
    'device_manufacturer_code': 'Signify Netherlands B.V.',
    'device_network_type': None,
    'device_type_id': None,
    'device_type_name': None,
    'label': 'Bathroom spot',
    'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
    'name': 'hue-color-temperature-bulb',
    'type': <DeviceType.VIPER: 'VIPER'>,
  })
# ---
# name: test_fetching_status_of_single_device[c2c_humidity]
  dict({
    'main': dict({
      <Capability.BATTERY: 'battery'>: dict({
        <Attribute.BATTERY: 'battery'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 9, 4, 47, 696000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 100,
        }),
        <Attribute.QUANTITY: 'quantity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TYPE: 'type'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.HEALTH_CHECK: 'healthCheck'>: dict({
        <Attribute.DEVICE_WATCH_DEVICE_STATUS: 'DeviceWatch-DeviceStatus'>: dict({
          'data': dict({
            'reason': 'DEVICE-OFFLINE',
          }),
          'timestamp': datetime.datetime(2025, 2, 8, 9, 4, 47, 696000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'offline',
        }),
        <Attribute.DEVICE_WATCH_ENROLL: 'DeviceWatch-Enroll'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.CHECK_INTERVAL: 'checkInterval'>: dict({
          'data': dict({
            'deviceScheme': 'UNTRACKED',
            'protocol': 'cloud',
          }),
          'timestamp': datetime.datetime(2025, 2, 7, 23, 1, 15, 973000, tzinfo=datetime.timezone.utc),
          'unit': 's',
          'value': 60,
        }),
        <Attribute.HEALTH_STATUS: 'healthStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.RELATIVE_HUMIDITY_MEASUREMENT: 'relativeHumidityMeasurement'>: dict({
        <Attribute.HUMIDITY: 'humidity'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 9, 4, 47, 696000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 26,
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 9, 4, 47, 696000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': 26,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[c2c_motion_2]
  dict({
    'main': dict({
      <Capability.BATTERY: 'battery'>: dict({
        <Attribute.BATTERY: 'battery'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 3, 31, 3, 47000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 64,
        }),
        <Attribute.QUANTITY: 'quantity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TYPE: 'type'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.HEALTH_CHECK: 'healthCheck'>: dict({
        <Attribute.DEVICE_WATCH_DEVICE_STATUS: 'DeviceWatch-DeviceStatus'>: dict({
          'data': dict({
          }),
          'timestamp': datetime.datetime(2025, 2, 7, 15, 14, 53, 765000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'online',
        }),
        <Attribute.DEVICE_WATCH_ENROLL: 'DeviceWatch-Enroll'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.CHECK_INTERVAL: 'checkInterval'>: dict({
          'data': dict({
            'deviceScheme': 'UNTRACKED',
            'protocol': 'cloud',
          }),
          'timestamp': datetime.datetime(2023, 12, 17, 18, 11, 41, 578000, tzinfo=datetime.timezone.utc),
          'unit': 's',
          'value': 60,
        }),
        <Attribute.HEALTH_STATUS: 'healthStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.MOTION_SENSOR: 'motionSensor'>: dict({
        <Attribute.MOTION: 'motion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 7, 46, 49, 463000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'inactive',
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[c2c_shade]
  dict({
    'main': dict({
      <Capability.HEALTH_CHECK: 'healthCheck'>: dict({
        <Attribute.DEVICE_WATCH_DEVICE_STATUS: 'DeviceWatch-DeviceStatus'>: dict({
          'data': dict({
            'reason': 'DEVICE-OFFLINE',
          }),
          'timestamp': datetime.datetime(2025, 2, 8, 9, 4, 47, 694000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'offline',
        }),
        <Attribute.DEVICE_WATCH_ENROLL: 'DeviceWatch-Enroll'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.CHECK_INTERVAL: 'checkInterval'>: dict({
          'data': dict({
            'deviceScheme': 'UNTRACKED',
            'protocol': 'cloud',
          }),
          'timestamp': datetime.datetime(2025, 2, 7, 23, 1, 15, 966000, tzinfo=datetime.timezone.utc),
          'unit': 's',
          'value': 60,
        }),
        <Attribute.HEALTH_STATUS: 'healthStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SWITCH_LEVEL: 'switchLevel'>: dict({
        <Attribute.LEVEL: 'level'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 9, 4, 47, 694000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 100,
        }),
        <Attribute.LEVEL_RANGE: 'levelRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.WINDOW_SHADE: 'windowShade'>: dict({
        <Attribute.SUPPORTED_WINDOW_SHADE_COMMANDS: 'supportedWindowShadeCommands'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WINDOW_SHADE: 'windowShade'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 9, 4, 47, 694000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'open',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[c2c_switch]
  dict({
    'main': dict({
      <Capability.HEALTH_CHECK: 'healthCheck'>: dict({
        <Attribute.DEVICE_WATCH_DEVICE_STATUS: 'DeviceWatch-DeviceStatus'>: dict({
          'data': dict({
            'reason': 'DEVICE-OFFLINE',
          }),
          'timestamp': datetime.datetime(2025, 2, 8, 9, 4, 47, 691000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'offline',
        }),
        <Attribute.DEVICE_WATCH_ENROLL: 'DeviceWatch-Enroll'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.CHECK_INTERVAL: 'checkInterval'>: dict({
          'data': dict({
            'deviceScheme': 'UNTRACKED',
            'protocol': 'cloud',
          }),
          'timestamp': datetime.datetime(2025, 2, 7, 23, 1, 15, 962000, tzinfo=datetime.timezone.utc),
          'unit': 's',
          'value': 60,
        }),
        <Attribute.HEALTH_STATUS: 'healthStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 9, 4, 47, 691000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[c2c_thermostat_bridge_1]
  dict({
    'main': dict({
      <Capability.HEALTH_CHECK: 'healthCheck'>: dict({
        <Attribute.DEVICE_WATCH_DEVICE_STATUS: 'DeviceWatch-DeviceStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DEVICE_WATCH_ENROLL: 'DeviceWatch-Enroll'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.CHECK_INTERVAL: 'checkInterval'>: dict({
          'data': dict({
            'deviceScheme': 'UNTRACKED',
            'protocol': 'cloud',
          }),
          'timestamp': datetime.datetime(2025, 2, 7, 23, 3, 33, 797000, tzinfo=datetime.timezone.utc),
          'unit': 's',
          'value': 60,
        }),
        <Attribute.HEALTH_STATUS: 'healthStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.THERMOSTAT_MODE: 'thermostatMode'>: dict({
        <Attribute.SUPPORTED_THERMOSTAT_MODES: 'supportedThermostatModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.THERMOSTAT_MODE: 'thermostatMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[da_ks_range_0101x]
  dict({
    'cavity-01': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 9, 7, 22, 35, 34, 197000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[]',
        }),
      }),
      <Capability.CUSTOM_OVEN_CAVITY_STATUS: 'custom.ovenCavityStatus'>: dict({
        <Attribute.OVEN_CAVITY_STATUS: 'ovenCavityStatus'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 3, 7, 46, 10, 165000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.OVEN_MODE: 'ovenMode'>: dict({
        <Attribute.OVEN_MODE: 'ovenMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 6, 983000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Others',
        }),
        <Attribute.SUPPORTED_OVEN_MODES: 'supportedOvenModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 8, 409000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['Others']",
        }),
      }),
      <Capability.OVEN_OPERATING_STATE: 'ovenOperatingState'>: dict({
        <Attribute.COMPLETION_TIME: 'completionTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 5, 14, 19, 0, 4, 584000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2024-05-14T19:00:04.579Z',
        }),
        <Attribute.MACHINE_STATE: 'machineState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 5, 415000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.OPERATION_TIME: 'operationTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 5, 415000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
        <Attribute.OVEN_JOB_STATE: 'ovenJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 5, 415000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 5, 415000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 1,
        }),
        <Attribute.SUPPORTED_MACHINE_STATES: 'supportedMachineStates'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.OVEN_SETPOINT: 'ovenSetpoint'>: dict({
        <Attribute.OVEN_SETPOINT: 'ovenSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 6, 976000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
        <Attribute.OVEN_SETPOINT_RANGE: 'ovenSetpointRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_KITCHEN_DEVICE_DEFAULTS: 'samsungce.kitchenDeviceDefaults'>: dict({
        <Attribute.DEFAULT_OPERATION_TIME: 'defaultOperationTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DEFAULT_OVEN_MODE: 'defaultOvenMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 6, 983000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ConvectionBake',
        }),
        <Attribute.DEFAULT_OVEN_SETPOINT: 'defaultOvenSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 6, 976000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 350,
        }),
      }),
      <Capability.SAMSUNG_CE_OVEN_MODE: 'samsungce.ovenMode'>: dict({
        <Attribute.OVEN_MODE: 'ovenMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 6, 983000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'NoOperation',
        }),
        <Attribute.SUPPORTED_OVEN_MODES: 'supportedOvenModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 8, 409000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['SelfClean', 'SteamClean', 'NoOperation']",
        }),
      }),
      <Capability.SAMSUNG_CE_OVEN_OPERATING_STATE: 'samsungce.ovenOperatingState'>: dict({
        <Attribute.COMPLETION_TIME: 'completionTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 5, 14, 19, 0, 4, 584000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2024-05-14T19:00:04.579Z',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 5, 415000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.OPERATION_TIME: 'operationTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 5, 415000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '00:00:00',
        }),
        <Attribute.OVEN_JOB_STATE: 'ovenJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 5, 415000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 5, 415000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 1,
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 6, 976000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 175,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
    'main': dict({
      <Capability.CUSTOM_COOKTOP_OPERATING_STATE: 'custom.cooktopOperatingState'>: dict({
        <Attribute.COOKTOP_OPERATING_STATE: 'cooktopOperatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 49, 976000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.SUPPORTED_COOKTOP_OPERATING_STATE: 'supportedCooktopOperatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 5, 293000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['run', 'ready']",
        }),
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 7, 52, 875000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[]',
        }),
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': dict({
            'href': '/information/vs/0',
          }),
          'timestamp': datetime.datetime(2023, 11, 28, 22, 49, 9, 333000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'payload': dict({
              'if': list([
                'oic.if.baseline',
                'oic.if.a',
              ]),
              'rt': list([
                'x.com.samsung.da.information',
              ]),
              'x.com.samsung.da.description': 'TP1X_DA-KS-OVEN-01011',
              'x.com.samsung.da.items': list([
                dict({
                  'x.com.samsung.da.description': 'Version',
                  'x.com.samsung.da.id': '0',
                  'x.com.samsung.da.newVersionAvailable': '0',
                  'x.com.samsung.da.number': '02144A221005',
                  'x.com.samsung.da.type': 'Software',
                }),
                dict({
                  'x.com.samsung.da.description': 'Version',
                  'x.com.samsung.da.id': '1',
                  'x.com.samsung.da.newVersionAvailable': '0',
                  'x.com.samsung.da.number': '20121600,FFFFFFFF',
                  'x.com.samsung.da.type': 'Firmware',
                }),
              ]),
              'x.com.samsung.da.modelNum': 'TP1X_DA-KS-RANGE-0101X|40445041|5001011E03151101020000000000000',
              'x.com.samsung.da.otnDUID': 'ZPCNQWBWXI53Q',
              'x.com.samsung.da.serialNum': '0J4D7DARB00000K',
            }),
          }),
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 2, 282000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2c3cbaa0-1899-5ddc-7b58-9d657bd48f18',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 12, 19, 22, 33, 9, 710000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '1.2.1',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 2, 282000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 5, 14, 19, 0, 26, 132000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'AKS-WW-TP1-20-OVEN-3-CR_40240205',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 5, 14, 19, 0, 26, 132000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Realtek',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 2, 282000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 2, 282000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 5, 14, 19, 0, 26, 132000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TP1X_DA-KS-RANGE-0101X|40445041|5001011E031511010200000000000000',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 5, 14, 19, 0, 26, 132000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TizenRT 3.1',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 5, 14, 19, 0, 26, 132000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DAWIT 3.0',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 2, 282000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 5, 14, 19, 0, 26, 132000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Range',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 2, 282000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2c3cbaa0-1899-5ddc-7b58-9d657bd48f18',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 2, 282000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA-KS-RANGE-0101X',
        }),
      }),
      <Capability.OVEN_MODE: 'ovenMode'>: dict({
        <Attribute.OVEN_MODE: 'ovenMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 7, 52, 875000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Others',
        }),
        <Attribute.SUPPORTED_OVEN_MODES: 'supportedOvenModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 3, 7, 46, 10, 165000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['Bake', 'Broil', 'ConvectionBake', 'ConvectionRoast', 'warming', 'Others', 'Dehydrate']",
        }),
      }),
      <Capability.OVEN_OPERATING_STATE: 'ovenOperatingState'>: dict({
        <Attribute.COMPLETION_TIME: 'completionTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 48, 830000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2025-02-07T00:50:48.803Z',
        }),
        <Attribute.MACHINE_STATE: 'machineState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 48, 830000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.OPERATION_TIME: 'operationTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 48, 830000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
        <Attribute.OVEN_JOB_STATE: 'ovenJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 49, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 48, 830000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 1,
        }),
        <Attribute.SUPPORTED_MACHINE_STATES: 'supportedMachineStates'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.OVEN_SETPOINT: 'ovenSetpoint'>: dict({
        <Attribute.OVEN_SETPOINT: 'ovenSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 48, 980000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
        <Attribute.OVEN_SETPOINT_RANGE: 'ovenSetpointRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>: dict({
        <Attribute.REMOTE_CONTROL_ENABLED: 'remoteControlEnabled'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 50, 886000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'true',
        }),
      }),
      <Capability.SAMSUNG_CE_CUSTOM_RECIPE: 'samsungce.customRecipe'>: dict({
      }),
      <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>: dict({
        <Attribute.BINARY_ID: 'binaryId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 3, 7, 46, 10, 124000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TP1X_DA-KS-RANGE-0101X',
        }),
        <Attribute.DESCRIPTION: 'description'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MICOM_ASSAY_CODE: 'micomAssayCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_CLASSIFICATION_CODE: 'modelClassificationCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_NAME: 'modelName'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RELEASE_YEAR: 'releaseYear'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER: 'serialNumber'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER_EXTRA: 'serialNumberExtra'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_DOOR_STATE: 'samsungce.doorState'>: dict({
        <Attribute.DOOR_STATE: 'doorState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 5, 24, 873000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'closed',
        }),
      }),
      <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>: dict({
        <Attribute.VERSION_NUMBER: 'versionNumber'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 11, 1, 21, 37, 51, 304000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 22100101,
        }),
      }),
      <Capability.SAMSUNG_CE_KIDS_LOCK: 'samsungce.kidsLock'>: dict({
        <Attribute.LOCK_STATE: 'lockState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 3, 7, 46, 10, 275000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'unlocked',
        }),
      }),
      <Capability.SAMSUNG_CE_KITCHEN_DEVICE_DEFAULTS: 'samsungce.kitchenDeviceDefaults'>: dict({
        <Attribute.DEFAULT_OPERATION_TIME: 'defaultOperationTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 48, 830000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 3600,
        }),
        <Attribute.DEFAULT_OVEN_MODE: 'defaultOvenMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 7, 52, 875000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ConvectionBake',
        }),
        <Attribute.DEFAULT_OVEN_SETPOINT: 'defaultOvenSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 48, 980000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 350,
        }),
      }),
      <Capability.SAMSUNG_CE_KITCHEN_DEVICE_IDENTIFICATION: 'samsungce.kitchenDeviceIdentification'>: dict({
        <Attribute.FUEL: 'fuel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_CODE: 'modelCode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 7, 52, 875000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'NE6516A-/AA0',
        }),
        <Attribute.REGION_CODE: 'regionCode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 7, 52, 875000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'US',
        }),
        <Attribute.REPRESENTATIVE_COMPONENT: 'representativeComponent'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TYPE: 'type'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 2, 487000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'range',
        }),
      }),
      <Capability.SAMSUNG_CE_KITCHEN_MODE_SPECIFICATION: 'samsungce.kitchenModeSpecification'>: dict({
        <Attribute.SPECIFICATION: 'specification'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 5, 14, 19, 0, 30, 62000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'single': list([
              dict({
                'mode': 'Bake',
                'supportedOperations': list([
                  'start',
                  'set',
                ]),
                'supportedOptions': dict({
                  'operationTime': dict({
                    'default': '01:00:00',
                    'max': '09:59:00',
                    'min': '00:01:00',
                    'resolution': '00:01:00',
                  }),
                  'temperature': dict({
                    'C': dict({
                      'default': 175,
                      'max': 285,
                      'min': 80,
                      'resolution': 0,
                    }),
                    'F': dict({
                      'default': 350,
                      'max': 550,
                      'min': 175,
                      'resolution': 0,
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'Broil',
                'supportedOperations': list([
                  'set',
                ]),
                'supportedOptions': dict({
                  'temperature': dict({
                    'C': dict({
                      'default': 61441,
                      'max': 61442,
                      'min': 61441,
                      'supportedValues': list([
                        61441,
                        61442,
                      ]),
                    }),
                    'F': dict({
                      'default': 61441,
                      'max': 61442,
                      'min': 61441,
                      'supportedValues': list([
                        61441,
                        61442,
                      ]),
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'ConvectionBake',
                'supportedOperations': list([
                  'start',
                  'set',
                ]),
                'supportedOptions': dict({
                  'operationTime': dict({
                    'default': '01:00:00',
                    'max': '09:59:00',
                    'min': '00:01:00',
                    'resolution': '00:01:00',
                  }),
                  'temperature': dict({
                    'C': dict({
                      'default': 160,
                      'max': 285,
                      'min': 80,
                      'resolution': 0,
                    }),
                    'F': dict({
                      'default': 325,
                      'max': 550,
                      'min': 175,
                      'resolution': 0,
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'ConvectionRoast',
                'supportedOperations': list([
                  'start',
                  'set',
                ]),
                'supportedOptions': dict({
                  'operationTime': dict({
                    'default': '01:00:00',
                    'max': '09:59:00',
                    'min': '00:01:00',
                    'resolution': '00:01:00',
                  }),
                  'temperature': dict({
                    'C': dict({
                      'default': 160,
                      'max': 285,
                      'min': 80,
                      'resolution': 0,
                    }),
                    'F': dict({
                      'default': 325,
                      'max': 550,
                      'min': 175,
                      'resolution': 0,
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'KeepWarm',
                'supportedOperations': list([
                  'set',
                ]),
                'supportedOptions': dict({
                  'temperature': dict({
                    'C': dict({
                      'default': 80,
                      'max': 80,
                      'min': 80,
                      'supportedValues': list([
                        80,
                      ]),
                    }),
                    'F': dict({
                      'default': 175,
                      'max': 175,
                      'min': 175,
                      'supportedValues': list([
                        175,
                      ]),
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'BreadProof',
                'supportedOperations': list([
                  'set',
                ]),
                'supportedOptions': dict({
                  'temperature': dict({
                    'C': dict({
                      'default': 35,
                      'max': 35,
                      'min': 35,
                      'supportedValues': list([
                        35,
                      ]),
                    }),
                    'F': dict({
                      'default': 95,
                      'max': 95,
                      'min': 95,
                      'supportedValues': list([
                        95,
                      ]),
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'AirFryer',
                'supportedOperations': list([
                  'start',
                  'set',
                ]),
                'supportedOptions': dict({
                  'operationTime': dict({
                    'default': '01:00:00',
                    'max': '09:59:00',
                    'min': '00:01:00',
                    'resolution': '00:01:00',
                  }),
                  'temperature': dict({
                    'C': dict({
                      'default': 220,
                      'max': 260,
                      'min': 175,
                      'resolution': 0,
                    }),
                    'F': dict({
                      'default': 425,
                      'max': 500,
                      'min': 350,
                      'resolution': 0,
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'Dehydrate',
                'supportedOperations': list([
                  'start',
                  'set',
                ]),
                'supportedOptions': dict({
                  'operationTime': dict({
                    'default': '01:00:00',
                    'max': '09:59:00',
                    'min': '00:01:00',
                    'resolution': '00:01:00',
                  }),
                  'temperature': dict({
                    'C': dict({
                      'default': 65,
                      'max': 105,
                      'min': 40,
                      'resolution': 0,
                    }),
                    'F': dict({
                      'default': 150,
                      'max': 225,
                      'min': 100,
                      'resolution': 0,
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'SelfClean',
                'supportedOperations': list([
                ]),
                'supportedOptions': dict({
                }),
              }),
              dict({
                'mode': 'SteamClean',
                'supportedOperations': list([
                ]),
                'supportedOptions': dict({
                }),
              }),
            ]),
          }),
        }),
      }),
      <Capability.SAMSUNG_CE_LAMP: 'samsungce.lamp'>: dict({
        <Attribute.BRIGHTNESS_LEVEL: 'brightnessLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 7, 52, 875000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
        <Attribute.SUPPORTED_BRIGHTNESS_LEVEL: 'supportedBrightnessLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 7, 52, 875000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['off', 'high']",
        }),
      }),
      <Capability.SAMSUNG_CE_MEAT_PROBE: 'samsungce.meatProbe'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 2, 679000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'disconnected',
        }),
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 2, 619000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 0,
        }),
        <Attribute.TEMPERATURE_SETPOINT: 'temperatureSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 2, 619000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 0,
        }),
      }),
      <Capability.SAMSUNG_CE_OVEN_MODE: 'samsungce.ovenMode'>: dict({
        <Attribute.OVEN_MODE: 'ovenMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 7, 52, 875000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'NoOperation',
        }),
        <Attribute.SUPPORTED_OVEN_MODES: 'supportedOvenModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 3, 7, 46, 10, 165000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['Bake', 'Broil', 'ConvectionBake', 'ConvectionRoast', 'KeepWarm', 'BreadProof', 'AirFryer', 'Dehydrate', 'SelfClean', 'SteamClean']",
        }),
      }),
      <Capability.SAMSUNG_CE_OVEN_OPERATING_STATE: 'samsungce.ovenOperatingState'>: dict({
        <Attribute.COMPLETION_TIME: 'completionTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 48, 830000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2025-02-07T00:50:48.803Z',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 48, 830000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.OPERATION_TIME: 'operationTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 48, 830000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '00:00:00',
        }),
        <Attribute.OVEN_JOB_STATE: 'ovenJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 49, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 48, 830000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 1,
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>: dict({
        <Attribute.AVAILABLE_MODULES: 'availableModules'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 3, 7, 46, 10, 124000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[]',
        }),
        <Attribute.LAST_UPDATED_DATE: 'lastUpdatedDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEW_VERSION_AVAILABLE: 'newVersionAvailable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 3, 7, 46, 10, 124000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OTN_D_U_I_D: 'otnDUID'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 3, 7, 46, 10, 124000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ZPCNQWBWXI47Q',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TARGET_MODULE: 'targetModule'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 48, 980000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 175,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[da_wm_wd_00001]
  dict({
    'hca.main': dict({
      <Capability.HCA_DRYER_MODE: 'hca.dryerMode'>: dict({
        <Attribute.MODE: 'mode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 11, 23000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'normal',
        }),
        <Attribute.SUPPORTED_MODES: 'supportedModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 497000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['normal', 'timeDry', 'quickDry']",
        }),
      }),
    }),
    'main': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 7, 5, 16, 4, 6, 674000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['samsungce.dryerCyclePreset', 'samsungce.welcomeMessage', 'samsungce.dongleSoftwareInstallation', 'sec.wifiConfiguration', 'samsungce.quickControl', 'samsungce.deviceInfoPrivate', 'demandResponseLoadControl', 'samsungce.dryerFreezePrevent', 'sec.diagnosticsInformation']",
        }),
      }),
      <Capability.CUSTOM_DRYER_DRY_LEVEL: 'custom.dryerDryLevel'>: dict({
        <Attribute.DRYER_DRY_LEVEL: 'dryerDryLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 840000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'normal',
        }),
        <Attribute.SUPPORTED_DRYER_DRY_LEVEL: 'supportedDryerDryLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 1, 22, 54, 28, 224000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['none', 'damp', 'less', 'normal', 'more', 'very']",
        }),
      }),
      <Capability.CUSTOM_DRYER_WRINKLE_PREVENT: 'custom.dryerWrinklePrevent'>: dict({
        <Attribute.DRYER_WRINKLE_PREVENT: 'dryerWrinklePrevent'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 840000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 497000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
      }),
      <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>: dict({
        <Attribute.DR_MAX_DURATION: 'drMaxDuration'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_INFO: 'energySavingInfo'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_LEVEL: 'energySavingLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_OPERATION: 'energySavingOperation'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_OPERATION_SUPPORT: 'energySavingOperationSupport'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_SUPPORT: 'energySavingSupport'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 6, 14, 6, 49, 2, 721000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.ENERGY_TYPE: 'energyType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 6, 14, 6, 49, 2, 183000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2.0',
        }),
        <Attribute.NOTIFICATION_TEMPLATE_I_D: 'notificationTemplateID'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_ENERGY_SAVING_LEVELS: 'supportedEnergySavingLevels'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_JOB_BEGINNING_STATUS: 'custom.jobBeginningStatus'>: dict({
        <Attribute.JOB_BEGINNING_STATUS: 'jobBeginningStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_SUPPORTED_OPTIONS: 'custom.supportedOptions'>: dict({
        <Attribute.COURSE: 'course'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REFERENCE_TABLE: 'referenceTable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 11, 23000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'id': 'Table_00',
          }),
        }),
        <Attribute.SUPPORTED_COURSES: 'supportedCourses'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 497000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['01', '9C', 'A5', '9E', '9B', '27', 'E5', 'A0', 'A4', 'A6', 'A3', 'A2']",
        }),
      }),
      <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>: dict({
        <Attribute.DEMAND_RESPONSE_LOAD_CONTROL_STATUS: 'drlcStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.DRYER_OPERATING_STATE: 'dryerOperatingState'>: dict({
        <Attribute.COMPLETION_TIME: 'completionTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 962000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2025-02-08T19:25:10Z',
        }),
        <Attribute.DRYER_JOB_STATE: 'dryerJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 962000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
        <Attribute.MACHINE_STATE: 'machineState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 962000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'stop',
        }),
        <Attribute.SUPPORTED_MACHINE_STATES: 'supportedMachineStates'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 962000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['stop', 'run', 'pause']",
        }),
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': dict({
            'href': '/information/vs/0',
          }),
          'timestamp': datetime.datetime(2023, 8, 6, 22, 48, 43, 192000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'payload': dict({
              'if': list([
                'oic.if.baseline',
                'oic.if.a',
              ]),
              'rt': list([
                'x.com.samsung.da.information',
              ]),
              'x.com.samsung.da.description': 'DA_WM_A51_20_COMMON_DV6300R/DC92-02385A_0090',
              'x.com.samsung.da.items': list([
                dict({
                  'x.com.samsung.da.description': 'DA_WM_A51_20_COMMON|20233741|3000000100111100020B000000000000',
                  'x.com.samsung.da.id': '0',
                  'x.com.samsung.da.newVersionAvailable': '0',
                  'x.com.samsung.da.number': '02198A220728(E256)',
                  'x.com.samsung.da.type': 'Software',
                }),
                dict({
                  'x.com.samsung.da.description': 'DA_WM_A51_20_COMMON',
                  'x.com.samsung.da.id': '1',
                  'x.com.samsung.da.newVersionAvailable': '0',
                  'x.com.samsung.da.number': '18112816,20112625',
                  'x.com.samsung.da.type': 'Firmware',
                }),
              ]),
              'x.com.samsung.da.modelNum': 'DA_WM_A51_20_COMMON|20233741|3000000100111100020B000000000000',
              'x.com.samsung.da.otnDUID': '7XCDM6YAIRCGM',
              'x.com.samsung.da.serialNum': 'FFFFFFFFFFFFFFF',
            }),
          }),
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '02f7256e-8353-5bdd-547f-bd5b1647e01b',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'res.1.1.0,sh.1.1.0',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_WM_A51_20_COMMON_30230708',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ARTIK051',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_WM_A51_20_COMMON|20233741|3000000100111100020B000000000000',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TizenRT 1.0 + IPv6',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DAWIT 2.0',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[dryer] Samsung',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '02f7256e-8353-5bdd-547f-bd5b1647e01b',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA-WM-WD-000001',
        }),
      }),
      <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>: dict({
        <Attribute.POWER_CONSUMPTION: 'powerConsumption'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 11, 53000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'deltaEnergy': 0,
            'end': '2025-02-08T18:10:11Z',
            'energy': 4495500,
            'energySaved': 0,
            'persistedEnergy': 0,
            'power': 0,
            'powerEnergy': 0.0,
            'start': '2025-02-07T04:00:19Z',
          }),
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>: dict({
        <Attribute.REMOTE_CONTROL_ENABLED: 'remoteControlEnabled'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 970000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'false',
        }),
      }),
      <Capability.SAMSUNGCE_DETERGENT_ORDER: 'samsungce.detergentOrder'>: dict({
        <Attribute.ALARM_ENABLED: 'alarmEnabled'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 497000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.ORDER_THRESHOLD: 'orderThreshold'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 497000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
      }),
      <Capability.SAMSUNGCE_DETERGENT_STATE: 'samsungce.detergentState'>: dict({
        <Attribute.DETERGENT_TYPE: 'detergentType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 1, 22, 54, 28, 372000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
        <Attribute.DOSAGE: 'dosage'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 497000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.INITIAL_AMOUNT: 'initialAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 497000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.REMAINING_AMOUNT: 'remainingAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 497000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
      }),
      <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>: dict({
        <Attribute.BINARY_ID: 'binaryId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 11, 113000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_WM_A51_20_COMMON',
        }),
        <Attribute.DESCRIPTION: 'description'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 11, 113000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_WM_A51_20_COMMON_DV6300R/DC92-02385A_0090',
        }),
        <Attribute.MICOM_ASSAY_CODE: 'micomAssayCode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 11, 113000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '20233741',
        }),
        <Attribute.MODEL_CLASSIFICATION_CODE: 'modelClassificationCode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 11, 113000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '3000000100111100020B000000000000',
        }),
        <Attribute.MODEL_NAME: 'modelName'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RELEASE_YEAR: 'releaseYear'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER: 'serialNumber'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER_EXTRA: 'serialNumberExtra'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNGCE_DONGLE_SOFTWARE_INSTALLATION: 'samsungce.dongleSoftwareInstallation'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 6, 14, 6, 49, 2, 183000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'completed',
        }),
      }),
      <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>: dict({
        <Attribute.VERSION_NUMBER: 'versionNumber'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 3, 2, 59, 11, 115000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 24110101,
        }),
      }),
      <Capability.SAMSUNGCE_DRYER_AUTO_CYCLE_LINK: 'samsungce.dryerAutoCycleLink'>: dict({
        <Attribute.DRYER_AUTO_CYCLE_LINK: 'dryerAutoCycleLink'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 11, 986000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'on',
        }),
      }),
      <Capability.SAMSUNGCE_DRYER_CYCLE: 'samsungce.dryerCycle'>: dict({
        <Attribute.DRYER_CYCLE: 'dryerCycle'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 11, 23000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Table_00_Course_01',
        }),
        <Attribute.REFERENCE_TABLE: 'referenceTable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 11, 23000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'id': 'Table_00',
          }),
        }),
        <Attribute.SPECIALIZED_FUNCTION_CLASSIFICATION: 'specializedFunctionClassification'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 497000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 4,
        }),
        <Attribute.SUPPORTED_CYCLES: 'supportedCycles'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 884000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "[{'cycle': '01', 'supportedOptions': {'dryingLevel': {'raw': 'D33E', 'default': 'normal', 'options': ['damp', 'less', 'normal', 'more', 'very']}, 'dryingTemperature': {'raw': '8410', 'default': 'medium', 'options': ['medium']}}}, {'cycle': '9C', 'supportedOptions': {'dryingLevel': {'raw': 'D33E', 'default': 'normal', 'options': ['damp', 'less', 'normal', 'more', 'very']}, 'dryingTemperature': {'raw': '8520', 'default': 'high', 'options': ['high']}}}, {'cycle': 'A5', 'supportedOptions': {'dryingLevel': {'raw': 'D33E', 'default': 'normal', 'options': ['damp', 'less', 'normal', 'more', 'very']}, 'dryingTemperature': {'raw': '8520', 'default': 'high', 'options': ['high']}}}, {'cycle': '9E', 'supportedOptions': {'dryingLevel': {'raw': 'D33E', 'default': 'normal', 'options': ['damp', 'less', 'normal', 'more', 'very']}, 'dryingTemperature': {'raw': '8308', 'default': 'mediumLow', 'options': ['mediumLow']}}}, {'cycle': '9B', 'supportedOptions': {'dryingLevel': {'raw': 'D520', 'default': 'very', 'options': ['very']}, 'dryingTemperature': {'raw': '8520', 'default': 'high', 'options': ['high']}}}, {'cycle': '27', 'supportedOptions': {'dryingLevel': {'raw': 'D000', 'default': 'none', 'options': []}, 'dryingTemperature': {'raw': '8520', 'default': 'high', 'options': ['high']}}}, {'cycle': 'E5', 'supportedOptions': {'dryingLevel': {'raw': 'D000', 'default': 'none', 'options': []}, 'dryingTemperature': {'raw': '8000', 'default': 'none', 'options': []}}}, {'cycle': 'A0', 'supportedOptions': {'dryingLevel': {'raw': 'D000', 'default': 'none', 'options': []}, 'dryingTemperature': {'raw': '8000', 'default': 'none', 'options': []}}}, {'cycle': 'A4', 'supportedOptions': {'dryingLevel': {'raw': 'D000', 'default': 'none', 'options': []}, 'dryingTemperature': {'raw': '853E', 'default': 'high', 'options': ['extraLow', 'low', 'mediumLow', 'medium', 'high']}}}, {'cycle': 'A6', 'supportedOptions': {'dryingLevel': {'raw': 'D000', 'default': 'none', 'options': []}, 'dryingTemperature': {'raw': '8520', 'default': 'high', 'options': ['high']}}}, {'cycle': 'A3', 'supportedOptions': {'dryingLevel': {'raw': 'D308', 'default': 'normal', 'options': ['normal']}, 'dryingTemperature': {'raw': '8410', 'default': 'medium', 'options': ['medium']}}}, {'cycle': 'A2', 'supportedOptions': {'dryingLevel': {'raw': 'D33E', 'default': 'normal', 'options': ['damp', 'less', 'normal', 'more', 'very']}, 'dryingTemperature': {'raw': '8102', 'default': 'extraLow', 'options': ['extraLow']}}}]",
        }),
      }),
      <Capability.SAMSUNGCE_DRYER_CYCLE_PRESET: 'samsungce.dryerCyclePreset'>: dict({
        <Attribute.MAX_NUMBER_OF_PRESETS: 'maxNumberOfPresets'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 990000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 10,
        }),
        <Attribute.PRESETS: 'presets'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNGCE_DRYER_DELAY_END: 'samsungce.dryerDelayEnd'>: dict({
        <Attribute.REMAINING_TIME: 'remainingTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 962000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 0,
        }),
      }),
      <Capability.SAMSUNGCE_DRYER_DRYING_TEMPERATURE: 'samsungce.dryerDryingTemperature'>: dict({
        <Attribute.DRYING_TEMPERATURE: 'dryingTemperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 840000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'medium',
        }),
        <Attribute.SUPPORTED_DRYING_TEMPERATURE: 'supportedDryingTemperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 884000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['none', 'extraLow', 'low', 'mediumLow', 'medium', 'high']",
        }),
      }),
      <Capability.SAMSUNGCE_DRYER_DRYING_TIME: 'samsungce.dryerDryingTime'>: dict({
        <Attribute.DRYING_TIME: 'dryingTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 840000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': '0',
        }),
        <Attribute.SUPPORTED_DRYING_TIME: 'supportedDryingTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 1, 22, 54, 28, 224000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['0', '20', '30', '40', '50', '60']",
        }),
      }),
      <Capability.SAMSUNGCE_DRYER_FREEZE_PREVENT: 'samsungce.dryerFreezePrevent'>: dict({
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNGCE_DRYER_OPERATING_STATE: 'samsungce.dryerOperatingState'>: dict({
        <Attribute.DRYER_JOB_STATE: 'dryerJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 4, 0, 18, 186000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 4, 0, 18, 186000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 4, 0, 18, 186000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 1,
        }),
        <Attribute.REMAINING_TIME: 'remainingTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 4, 0, 18, 186000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 75,
        }),
        <Attribute.REMAINING_TIME_STR: 'remainingTimeStr'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 4, 0, 18, 186000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '01:15',
        }),
        <Attribute.SCHEDULED_JOBS: 'scheduledJobs'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 497000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "[{'jobName': 'drying', 'timeInMin': 57}, {'jobName': 'cooling', 'timeInMin': 3}]",
        }),
        <Attribute.SUPPORTED_OPERATING_STATES: 'supportedOperatingStates'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 11, 1, 13, 43, 26, 961000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['ready', 'running', 'paused']",
        }),
      }),
      <Capability.SAMSUNG_CE_KIDS_LOCK: 'samsungce.kidsLock'>: dict({
        <Attribute.LOCK_STATE: 'lockState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 825000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'unlocked',
        }),
      }),
      <Capability.SAMSUNGCE_QUICK_CONTROL: 'samsungce.quickControl'>: dict({
        <Attribute.VERSION: 'version'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>: dict({
        <Attribute.AVAILABLE_MODULES: 'availableModules'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 2, 0, 29, 53, 432000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[]',
        }),
        <Attribute.LAST_UPDATED_DATE: 'lastUpdatedDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEW_VERSION_AVAILABLE: 'newVersionAvailable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 2, 0, 29, 53, 432000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OTN_D_U_I_D: 'otnDUID'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 11, 113000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '7XCDM6YAIRCGM',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TARGET_MODULE: 'targetModule'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNGCE_WELCOME_MESSAGE: 'samsungce.welcomeMessage'>: dict({
        <Attribute.WELCOME_MESSAGE: 'welcomeMessage'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>: dict({
        <Attribute.DUMP_TYPE: 'dumpType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENDPOINT: 'endpoint'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LOG_TYPE: 'logType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MIN_VERSION: 'minVersion'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MN_ID: 'mnId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.PROTOCOL_TYPE: 'protocolType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SETUP_ID: 'setupId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SIGNIN_PERMISSION: 'signinPermission'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TS_ID: 'tsId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>: dict({
        <Attribute.AUTO_RECONNECTION: 'autoReconnection'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MIN_VERSION: 'minVersion'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.PROTOCOL_TYPE: 'protocolType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_AUTH_TYPE: 'supportedAuthType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_WI_FI_FREQ: 'supportedWiFiFreq'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 911000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[hue_color_temperature_bulb]
  dict({
    'main': dict({
      <Capability.COLOR_TEMPERATURE: 'colorTemperature'>: dict({
        <Attribute.COLOR_TEMPERATURE: 'colorTemperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 21, 56, 4, 127000, tzinfo=datetime.timezone.utc),
          'unit': 'K',
          'value': 3000,
        }),
        <Attribute.COLOR_TEMPERATURE_RANGE: 'colorTemperatureRange'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 15, 14, 53, 823000, tzinfo=datetime.timezone.utc),
          'unit': 'K',
          'value': dict({
            'maximum': 6535,
            'minimum': 2000,
          }),
        }),
      }),
      <Capability.HEALTH_CHECK: 'healthCheck'>: dict({
        <Attribute.DEVICE_WATCH_DEVICE_STATUS: 'DeviceWatch-DeviceStatus'>: dict({
          'data': dict({
          }),
          'timestamp': datetime.datetime(2025, 2, 7, 15, 14, 53, 823000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'online',
        }),
        <Attribute.DEVICE_WATCH_ENROLL: 'DeviceWatch-Enroll'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.CHECK_INTERVAL: 'checkInterval'>: dict({
          'data': dict({
            'deviceScheme': 'UNTRACKED',
            'protocol': 'cloud',
          }),
          'timestamp': datetime.datetime(2023, 12, 17, 18, 11, 41, 671000, tzinfo=datetime.timezone.utc),
          'unit': 's',
          'value': 60,
        }),
        <Attribute.HEALTH_STATUS: 'healthStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 21, 56, 4, 127000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'on',
        }),
      }),
      <Capability.SWITCH_LEVEL: 'switchLevel'>: dict({
        <Attribute.LEVEL: 'level'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 21, 56, 4, 127000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 70,
        }),
        <Attribute.LEVEL_RANGE: 'levelRange'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 15, 14, 53, 823000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': dict({
            'maximum': 100,
            'minimum': 1,
          }),
        }),
      }),
      <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>: dict({
        <Attribute.CIRCADIAN: 'circadian'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>: dict({
        <Attribute.FADE: 'fade'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[hue_rgbw_color_bulb]
  dict({
    'main': dict({
      <Capability.COLOR_CONTROL: 'colorControl'>: dict({
        <Attribute.COLOR: 'color'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.HUE: 'hue'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 15, 14, 53, 812000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 60.8072,
        }),
        <Attribute.SATURATION: 'saturation'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 15, 14, 53, 812000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 60,
        }),
      }),
      <Capability.COLOR_TEMPERATURE: 'colorTemperature'>: dict({
        <Attribute.COLOR_TEMPERATURE: 'colorTemperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 21, 56, 2, 381000, tzinfo=datetime.timezone.utc),
          'unit': 'K',
          'value': 3000,
        }),
        <Attribute.COLOR_TEMPERATURE_RANGE: 'colorTemperatureRange'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 15, 14, 52, 807000, tzinfo=datetime.timezone.utc),
          'unit': 'K',
          'value': dict({
            'maximum': 6535,
            'minimum': 2000,
          }),
        }),
      }),
      <Capability.HEALTH_CHECK: 'healthCheck'>: dict({
        <Attribute.DEVICE_WATCH_DEVICE_STATUS: 'DeviceWatch-DeviceStatus'>: dict({
          'data': dict({
          }),
          'timestamp': datetime.datetime(2025, 2, 7, 15, 14, 53, 812000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'online',
        }),
        <Attribute.DEVICE_WATCH_ENROLL: 'DeviceWatch-Enroll'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.CHECK_INTERVAL: 'checkInterval'>: dict({
          'data': dict({
            'deviceScheme': 'UNTRACKED',
            'protocol': 'cloud',
          }),
          'timestamp': datetime.datetime(2023, 12, 17, 18, 11, 41, 678000, tzinfo=datetime.timezone.utc),
          'unit': 's',
          'value': 60,
        }),
        <Attribute.HEALTH_STATUS: 'healthStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SAMSUNG_IM_HUE_SYNC_MODE: 'samsungim.hueSyncMode'>: dict({
        <Attribute.MODE: 'mode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 15, 14, 53, 812000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'normal',
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 7, 8, 19, 519000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.SWITCH_LEVEL: 'switchLevel'>: dict({
        <Attribute.LEVEL: 'level'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 21, 56, 2, 381000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 70,
        }),
        <Attribute.LEVEL_RANGE: 'levelRange'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 15, 14, 53, 812000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': dict({
            'maximum': 100,
            'minimum': 1,
          }),
        }),
      }),
      <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>: dict({
        <Attribute.CIRCADIAN: 'circadian'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>: dict({
        <Attribute.FADE: 'fade'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
