# serializer version: 1
# name: test_fetching_devices[devices_2]
  list([
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': '440063de-a200-40b5-8a6b-f3399eaa0370',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Bathroom spot',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-color-temperature-bulb',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.COLOR_CONTROL: 'colorControl'>,
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SAMSUNG_IM_HUE_SYNC_MODE: 'samsungim.hueSyncMode'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': 'cb958955-b015-498c-9e62-fc0c51abd054',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Standing light',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-rgbw-color-bulb',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': '0b2ed6c7-dc39-42fd-ab64-8f1c75c1fad0',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Hue ambiance spot 3',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-color-temperature-bulb',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.WINDOW_SHADE: 'windowShade'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': '571af102-15db-4030-b76b-245a691f74a5',
      'device_manufacturer_code': 'WonderLabs Company',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Curtain 1A',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'c2c-shade',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.WINDOW_SHADE: 'windowShade'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': '42efbc29-b283-4d01-a343-f0963ae7dba4',
      'device_manufacturer_code': 'WonderLabs Company',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Curtain 1E',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'c2c-shade',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': 'a456cbd5-0503-46be-acc4-54e189dc6ff4',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Sink',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-color-temperature-bulb',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.MOTION_SENSOR: 'motionSensor'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': '08da6244-b3ad-4c45-b005-d8572bd9138f',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Hue motion sensor 1',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'c2c-motion-2',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': '297b909c-ca9a-4517-ba42-7412269cd00e',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Hue ambiance spot 2',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-color-temperature-bulb',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': '4d4f5261-dc3a-4e31-b8f4-15699c934f62',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Hue ambiance spot 4',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-color-temperature-bulb',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.COLOR_CONTROL: 'colorControl'>,
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SAMSUNG_IM_HUE_SYNC_MODE: 'samsungim.hueSyncMode'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': '9eaad965-638d-48c2-8aab-e97aa031226e',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Night light',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-rgbw-color-bulb',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.THERMOSTAT_MODE: 'thermostatMode'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': 'f1e182eb-1e21-43ed-a32d-f3c2796b9865',
      'device_manufacturer_code': 'Netatmo',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Netatmo NAPlug',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'c2c-thermostat-bridge-1',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.COLOR_CONTROL: 'colorControl'>,
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SAMSUNG_IM_HUE_SYNC_MODE: 'samsungim.hueSyncMode'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': '4f43eaf7-b3d1-4d26-be8e-807b37dfe8e0',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Kitchen',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-rgbw-color-bulb',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.RELATIVE_HUMIDITY_MEASUREMENT: 'relativeHumidityMeasurement'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': '5ca2281d-fb11-4835-8990-0ea287556fe5',
      'device_manufacturer_code': 'WonderLabs Company',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Hub 2 08',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'c2c-humidity',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.COLOR_CONTROL: 'colorControl'>,
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SAMSUNG_IM_HUE_SYNC_MODE: 'samsungim.hueSyncMode'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': '3cd2ce09-6e19-48a9-b296-558d8cc55726',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Tv',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-rgbw-color-bulb',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': 'e25e6818-efab-4f45-97f8-867ab2c1c33d',
      'device_manufacturer_code': 'WonderLabs Company',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'TV',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'c2c-switch',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.COLOR_CONTROL: 'colorControl'>,
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SAMSUNG_IM_HUE_SYNC_MODE: 'samsungim.hueSyncMode'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': '5ed8ef33-96dc-4d53-8ad1-4a15e6361c1e',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Bureau',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-rgbw-color-bulb',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': 'f15b3d69-7452-4b21-a27c-d3db3c84e2d4',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Hue ambiance spot 5',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-color-temperature-bulb',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.COLOR_CONTROL: 'colorControl'>,
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SAMSUNG_IM_HUE_SYNC_MODE: 'samsungim.hueSyncMode'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': 'be1152d6-cad0-4859-b4a6-5770e63dd0b5',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Bed',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-rgbw-color-bulb',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': '53fa938e-7586-41ca-84e7-ccc6bcba94df',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Hue ambiance spot 1',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-color-temperature-bulb',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.COLOR_CONTROL: 'colorControl'>,
            <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
            <Capability.SWITCH_LEVEL: 'switchLevel'>,
            <Capability.HEALTH_CHECK: 'healthCheck'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SAMSUNG_IM_HUE_SYNC_MODE: 'samsungim.hueSyncMode'>,
            <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
            <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': 'd472222b-0e19-4d33-8375-b2abf6c9df08',
      'device_manufacturer_code': 'Signify Netherlands B.V.',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'Bed',
      'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
      'name': 'hue-rgbw-color-bulb',
      'type': <DeviceType.VIPER: 'VIPER'>,
    }),
  ])
# ---
# name: test_fetching_devices[devices_3]
  list([
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>,
            <Capability.OVEN_SETPOINT: 'ovenSetpoint'>,
            <Capability.OVEN_MODE: 'ovenMode'>,
            <Capability.OVEN_OPERATING_STATE: 'ovenOperatingState'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
            <Capability.SAMSUNG_CE_KITCHEN_DEVICE_IDENTIFICATION: 'samsungce.kitchenDeviceIdentification'>,
            <Capability.SAMSUNG_CE_KITCHEN_DEVICE_DEFAULTS: 'samsungce.kitchenDeviceDefaults'>,
            <Capability.SAMSUNG_CE_DOOR_STATE: 'samsungce.doorState'>,
            <Capability.SAMSUNG_CE_CUSTOM_RECIPE: 'samsungce.customRecipe'>,
            <Capability.SAMSUNG_CE_OVEN_MODE: 'samsungce.ovenMode'>,
            <Capability.SAMSUNG_CE_OVEN_OPERATING_STATE: 'samsungce.ovenOperatingState'>,
            <Capability.SAMSUNG_CE_MEAT_PROBE: 'samsungce.meatProbe'>,
            <Capability.SAMSUNG_CE_LAMP: 'samsungce.lamp'>,
            <Capability.SAMSUNG_CE_KITCHEN_MODE_SPECIFICATION: 'samsungce.kitchenModeSpecification'>,
            <Capability.SAMSUNG_CE_KIDS_LOCK: 'samsungce.kidsLock'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.CUSTOM_COOKTOP_OPERATING_STATE: 'custom.cooktopOperatingState'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
        dict({
          'capabilities': list([
            <Capability.OVEN_SETPOINT: 'ovenSetpoint'>,
            <Capability.OVEN_MODE: 'ovenMode'>,
            <Capability.OVEN_OPERATING_STATE: 'ovenOperatingState'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.SAMSUNG_CE_OVEN_MODE: 'samsungce.ovenMode'>,
            <Capability.SAMSUNG_CE_OVEN_OPERATING_STATE: 'samsungce.ovenOperatingState'>,
            <Capability.SAMSUNG_CE_KITCHEN_DEVICE_DEFAULTS: 'samsungce.kitchenDeviceDefaults'>,
            <Capability.CUSTOM_OVEN_CAVITY_STATUS: 'custom.ovenCavityStatus'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'cavity-01',
          'label': 'cavity-01',
        }),
      ]),
      'device_id': '2c3cbaa0-1899-5ddc-7b58-9d657bd53d18',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Range',
      'label': 'Vulcan',
      'location_id': '597a4912-13c9-47ab-5916-3cbe28b61abd',
      'name': 'Samsung Range',
      'type': <DeviceType.OCF: 'OCF'>,
    }),
  ])
# ---
# name: test_fetching_devices[devices_4]
  list([
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>,
            <Capability.DRYER_OPERATING_STATE: 'dryerOperatingState'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_DRYER_DRY_LEVEL: 'custom.dryerDryLevel'>,
            <Capability.CUSTOM_DRYER_WRINKLE_PREVENT: 'custom.dryerWrinklePrevent'>,
            <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>,
            <Capability.CUSTOM_JOB_BEGINNING_STATUS: 'custom.jobBeginningStatus'>,
            <Capability.CUSTOM_SUPPORTED_OPTIONS: 'custom.supportedOptions'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.SAMSUNG_CE_DETERGENT_ORDER: 'samsungce.detergentOrder'>,
            <Capability.SAMSUNG_CE_DETERGENT_STATE: 'samsungce.detergentState'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_DONGLE_SOFTWARE_INSTALLATION: 'samsungce.dongleSoftwareInstallation'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
            <Capability.SAMSUNG_CE_DRYER_AUTO_CYCLE_LINK: 'samsungce.dryerAutoCycleLink'>,
            <Capability.SAMSUNG_CE_DRYER_CYCLE: 'samsungce.dryerCycle'>,
            <Capability.SAMSUNG_CE_DRYER_CYCLE_PRESET: 'samsungce.dryerCyclePreset'>,
            <Capability.SAMSUNG_CE_DRYER_DELAY_END: 'samsungce.dryerDelayEnd'>,
            <Capability.SAMSUNG_CE_DRYER_DRYING_TEMPERATURE: 'samsungce.dryerDryingTemperature'>,
            <Capability.SAMSUNG_CE_DRYER_DRYING_TIME: 'samsungce.dryerDryingTime'>,
            <Capability.SAMSUNG_CE_DRYER_FREEZE_PREVENT: 'samsungce.dryerFreezePrevent'>,
            <Capability.SAMSUNG_CE_DRYER_OPERATING_STATE: 'samsungce.dryerOperatingState'>,
            <Capability.SAMSUNG_CE_KIDS_LOCK: 'samsungce.kidsLock'>,
            <Capability.SAMSUNG_CE_WELCOME_MESSAGE: 'samsungce.welcomeMessage'>,
            <Capability.SAMSUNG_CE_QUICK_CONTROL: 'samsungce.quickControl'>,
            <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>,
            <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
        dict({
          'capabilities': list([
            <Capability.HCA_DRYER_MODE: 'hca.dryerMode'>,
          ]),
          'id': 'hca.main',
          'label': 'hca.main',
        }),
      ]),
      'device_id': '02f7256e-8353-5bdd-547f-bd5b1647e01b',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Dryer',
      'label': 'Dryer',
      'location_id': '781d5f1e-c87e-455e-87f7-8e954879e91d',
      'name': '[dryer] Samsung',
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.EXECUTE: 'execute'>,
            <Capability.OCF: 'ocf'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>,
            <Capability.DISHWASHER_OPERATING_STATE: 'dishwasherOperatingState'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_DISHWASHER_OPERATING_PROGRESS: 'custom.dishwasherOperatingProgress'>,
            <Capability.CUSTOM_DISHWASHER_OPERATING_PERCENTAGE: 'custom.dishwasherOperatingPercentage'>,
            <Capability.CUSTOM_DISHWASHER_DELAY_START_TIME: 'custom.dishwasherDelayStartTime'>,
            <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>,
            <Capability.CUSTOM_SUPPORTED_OPTIONS: 'custom.supportedOptions'>,
            <Capability.CUSTOM_WATER_FILTER: 'custom.waterFilter'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_DISHWASHER_JOB_STATE: 'samsungce.dishwasherJobState'>,
            <Capability.SAMSUNG_CE_DISHWASHER_WASHING_COURSE: 'samsungce.dishwasherWashingCourse'>,
            <Capability.SAMSUNG_CE_DISHWASHER_WASHING_COURSE_DETAILS: 'samsungce.dishwasherWashingCourseDetails'>,
            <Capability.SAMSUNG_CE_DISHWASHER_OPERATION: 'samsungce.dishwasherOperation'>,
            <Capability.SAMSUNG_CE_DISHWASHER_WASHING_OPTIONS: 'samsungce.dishwasherWashingOptions'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.SAMSUNG_CE_KIDS_LOCK: 'samsungce.kidsLock'>,
            <Capability.SAMSUNG_CE_WATER_CONSUMPTION_REPORT: 'samsungce.waterConsumptionReport'>,
            <Capability.SAMSUNG_CE_QUICK_CONTROL: 'samsungce.quickControl'>,
            <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>,
            <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': 'f36dc7ce-cac0-0667-dc14-a3704eb5e676',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Dishwasher',
      'label': 'Dishwasher',
      'location_id': '586e4602-34ab-4a22-993e-5f616b04604f',
      'name': '[dishwasher] Samsung',
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>,
            <Capability.OVEN_SETPOINT: 'ovenSetpoint'>,
            <Capability.OVEN_MODE: 'ovenMode'>,
            <Capability.OVEN_OPERATING_STATE: 'ovenOperatingState'>,
            <Capability.DOOR_CONTROL: 'doorControl'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
            <Capability.SAMSUNG_CE_HOOD_FAN_SPEED: 'samsungce.hoodFanSpeed'>,
            <Capability.SAMSUNG_CE_DEFINED_RECIPE: 'samsungce.definedRecipe'>,
            <Capability.SAMSUNG_CE_DOOR_STATE: 'samsungce.doorState'>,
            <Capability.SAMSUNG_CE_KITCHEN_DEVICE_IDENTIFICATION: 'samsungce.kitchenDeviceIdentification'>,
            <Capability.SAMSUNG_CE_KITCHEN_DEVICE_DEFAULTS: 'samsungce.kitchenDeviceDefaults'>,
            <Capability.SAMSUNG_CE_OVEN_MODE: 'samsungce.ovenMode'>,
            <Capability.SAMSUNG_CE_OVEN_OPERATING_STATE: 'samsungce.ovenOperatingState'>,
            <Capability.SAMSUNG_CE_MICROWAVE_POWER: 'samsungce.microwavePower'>,
            <Capability.SAMSUNG_CE_KITCHEN_MODE_SPECIFICATION: 'samsungce.kitchenModeSpecification'>,
            <Capability.SAMSUNG_CE_KIDS_LOCK: 'samsungce.kidsLock'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
        dict({
          'capabilities': list([
            <Capability.SAMSUNG_CE_LAMP: 'samsungce.lamp'>,
            <Capability.SAMSUNG_CE_HOOD_FAN_SPEED: 'samsungce.hoodFanSpeed'>,
          ]),
          'id': 'hood',
          'label': 'hood',
        }),
      ]),
      'device_id': '2bad3237-4886-e699-1b90-4a51a3d55c8a',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'oic.d.microwave',
      'label': 'Microwave',
      'location_id': '586e4602-34ab-4a22-993e-5f616b04604f',
      'name': 'Samsung Microwave',
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.OCF: 'ocf'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.REFRIGERATION: 'refrigeration'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>,
            <Capability.CUSTOM_DEVICE_REPORT_STATE_CONFIGURATION: 'custom.deviceReportStateConfiguration'>,
            <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>,
            <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_DISABLED_COMPONENTS: 'custom.disabledComponents'>,
            <Capability.CUSTOM_WATER_FILTER: 'custom.waterFilter'>,
            <Capability.SAMSUNG_CE_FRIDGE_FOOD_LIST: 'samsungce.fridgeFoodList'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
            <Capability.SAMSUNG_CE_FRIDGE_VACATION_MODE: 'samsungce.fridgeVacationMode'>,
            <Capability.SAMSUNG_CE_POWER_COOL: 'samsungce.powerCool'>,
            <Capability.SAMSUNG_CE_POWER_FREEZE: 'samsungce.powerFreeze'>,
            <Capability.SAMSUNG_CE_SABBATH_MODE: 'samsungce.sabbathMode'>,
            <Capability.SAMSUNG_CE_VIEW_INSIDE: 'samsungce.viewInside'>,
            <Capability.SAMSUNG_CE_RUNESTONE_HOME_CONTEXT: 'samsungce.runestoneHomeContext'>,
            <Capability.SAMSUNG_CE_QUICK_CONTROL: 'samsungce.quickControl'>,
            <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>,
            <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>,
            <Capability.SAMSUNG_CE_FREEZER_CONVERT_MODE: 'samsungce.freezerConvertMode'>,
            <Capability.SAMSUNG_CE_UNAVAILABLE_CAPABILITIES: 'samsungce.unavailableCapabilities'>,
          ]),
          'id': 'freezer',
          'label': 'freezer',
        }),
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>,
            <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>,
            <Capability.SAMSUNG_CE_UNAVAILABLE_CAPABILITIES: 'samsungce.unavailableCapabilities'>,
          ]),
          'id': 'cooler',
          'label': 'cooler',
        }),
        dict({
          'capabilities': list([
            <Capability.CONTACT_SENSOR: 'contactSensor'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>,
          ]),
          'id': 'cvroom',
          'label': 'cvroom',
        }),
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'icemaker',
          'label': 'icemaker',
        }),
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'icemaker-02',
          'label': 'icemaker-02',
        }),
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'icemaker-03',
          'label': 'icemaker-03',
        }),
        dict({
          'capabilities': list([
            <Capability.SAMSUNG_CE_WEIGHT_MEASUREMENT: 'samsungce.weightMeasurement'>,
            <Capability.SAMSUNG_CE_WEIGHT_MEASUREMENT_CALIBRATION: 'samsungce.weightMeasurementCalibration'>,
            <Capability.SAMSUNG_CE_CONNECTION_STATE: 'samsungce.connectionState'>,
            <Capability.SAMSUNG_CE_SCALE_SETTINGS: 'samsungce.scaleSettings'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'scale-10',
          'label': 'scale-10',
        }),
        dict({
          'capabilities': list([
            <Capability.SAMSUNG_CE_WEIGHT_MEASUREMENT: 'samsungce.weightMeasurement'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'scale-11',
          'label': 'scale-11',
        }),
        dict({
          'capabilities': list([
            <Capability.SAMSUNG_CE_FRIDGE_PANTRY_INFO: 'samsungce.fridgePantryInfo'>,
            <Capability.SAMSUNG_CE_FRIDGE_PANTRY_MODE: 'samsungce.fridgePantryMode'>,
            <Capability.SAMSUNG_CE_MEAT_AGING: 'samsungce.meatAging'>,
            <Capability.SAMSUNG_CE_FOOD_DEFROST: 'samsungce.foodDefrost'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'pantry-01',
          'label': 'pantry-01',
        }),
        dict({
          'capabilities': list([
            <Capability.SWITCH: 'switch'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
          ]),
          'id': 'camera-01',
          'label': 'camera-01',
        }),
      ]),
      'device_id': '7d3feb98-8a36-4351-c362-5e21ad3a78dd',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Refrigerator',
      'label': 'Refrigerator',
      'location_id': '2487472a-06c4-4bce-8f4c-700c5f8644f8',
      'name': 'Family Hub',
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.BRIDGE: 'bridge'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
      ]),
      'device_id': 'd1bd03c4-61ea-4e3d-9c7e-c2126c9579a2',
      'device_manufacturer_code': None,
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': None,
      'label': 'SmartThings Hub - FamilyHub',
      'location_id': '2487472a-06c4-4bce-8f4c-700c5f8644f8',
      'name': 'SmartThings Hub',
      'type': <DeviceType.HUB: 'HUB'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.OCF: 'ocf'>,
            <Capability.EXECUTE: 'execute'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.BATTERY: 'battery'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.ROBOT_CLEANER_TURBO_MODE: 'robotCleanerTurboMode'>,
            <Capability.ROBOT_CLEANER_MOVEMENT: 'robotCleanerMovement'>,
            <Capability.ROBOT_CLEANER_CLEANING_MODE: 'robotCleanerCleaningMode'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_DISABLED_COMPONENTS: 'custom.disabledComponents'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.SAMSUNG_CE_ROBOT_CLEANER_CLEANING_MODE: 'samsungce.robotCleanerCleaningMode'>,
            <Capability.SAMSUNG_CE_ROBOT_CLEANER_OPERATING_STATE: 'samsungce.robotCleanerOperatingState'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
          ]),
          'id': 'main',
          'label': 'Robot vacuum',
        }),
      ]),
      'device_id': '3442dfc6-17c0-a65f-dae0-4c6e01786f44',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Robot Vacuum',
      'label': 'Robot vacuum',
      'location_id': '586e4602-34ab-4a22-993e-5f616b04604f',
      'name': '[robot vacuum] Samsung',
      'type': <DeviceType.OCF: 'OCF'>,
    }),
    dict({
      'components': list([
        dict({
          'capabilities': list([
            <Capability.EXECUTE: 'execute'>,
            <Capability.OCF: 'ocf'>,
            <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>,
            <Capability.REFRESH: 'refresh'>,
            <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>,
            <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>,
            <Capability.SWITCH: 'switch'>,
            <Capability.WASHER_OPERATING_STATE: 'washerOperatingState'>,
            <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>,
            <Capability.CUSTOM_DRYER_DRY_LEVEL: 'custom.dryerDryLevel'>,
            <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>,
            <Capability.CUSTOM_JOB_BEGINNING_STATUS: 'custom.jobBeginningStatus'>,
            <Capability.CUSTOM_SUPPORTED_OPTIONS: 'custom.supportedOptions'>,
            <Capability.CUSTOM_WASHER_AUTO_DETERGENT: 'custom.washerAutoDetergent'>,
            <Capability.CUSTOM_WASHER_AUTO_SOFTENER: 'custom.washerAutoSoftener'>,
            <Capability.CUSTOM_WASHER_RINSE_CYCLES: 'custom.washerRinseCycles'>,
            <Capability.CUSTOM_WASHER_SOIL_LEVEL: 'custom.washerSoilLevel'>,
            <Capability.CUSTOM_WASHER_SPIN_LEVEL: 'custom.washerSpinLevel'>,
            <Capability.CUSTOM_WASHER_WATER_TEMPERATURE: 'custom.washerWaterTemperature'>,
            <Capability.SAMSUNG_CE_AUTO_DISPENSE_DETERGENT: 'samsungce.autoDispenseDetergent'>,
            <Capability.SAMSUNG_CE_AUTO_DISPENSE_SOFTENER: 'samsungce.autoDispenseSoftener'>,
            <Capability.SAMSUNG_CE_DETERGENT_ORDER: 'samsungce.detergentOrder'>,
            <Capability.SAMSUNG_CE_DETERGENT_STATE: 'samsungce.detergentState'>,
            <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>,
            <Capability.SAMSUNG_CE_DONGLE_SOFTWARE_INSTALLATION: 'samsungce.dongleSoftwareInstallation'>,
            <Capability.SAMSUNG_CE_DETERGENT_AUTO_REPLENISHMENT: 'samsungce.detergentAutoReplenishment'>,
            <Capability.SAMSUNG_CE_SOFTENER_AUTO_REPLENISHMENT: 'samsungce.softenerAutoReplenishment'>,
            <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>,
            <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>,
            <Capability.SAMSUNG_CE_KIDS_LOCK: 'samsungce.kidsLock'>,
            <Capability.SAMSUNG_CE_SOFTENER_ORDER: 'samsungce.softenerOrder'>,
            <Capability.SAMSUNG_CE_SOFTENER_STATE: 'samsungce.softenerState'>,
            <Capability.SAMSUNG_CE_WASHER_BUBBLE_SOAK: 'samsungce.washerBubbleSoak'>,
            <Capability.SAMSUNG_CE_WASHER_CYCLE: 'samsungce.washerCycle'>,
            <Capability.SAMSUNG_CE_WASHER_CYCLE_PRESET: 'samsungce.washerCyclePreset'>,
            <Capability.SAMSUNG_CE_WASHER_DELAY_END: 'samsungce.washerDelayEnd'>,
            <Capability.SAMSUNG_CE_WASHER_FREEZE_PREVENT: 'samsungce.washerFreezePrevent'>,
            <Capability.SAMSUNG_CE_WASHER_OPERATING_STATE: 'samsungce.washerOperatingState'>,
            <Capability.SAMSUNG_CE_WASHER_WASHING_TIME: 'samsungce.washerWashingTime'>,
            <Capability.SAMSUNG_CE_WASHER_WATER_LEVEL: 'samsungce.washerWaterLevel'>,
            <Capability.SAMSUNG_CE_WASHER_WATER_VALVE: 'samsungce.washerWaterValve'>,
            <Capability.SAMSUNG_CE_WELCOME_MESSAGE: 'samsungce.welcomeMessage'>,
            <Capability.SAMSUNG_CE_WATER_CONSUMPTION_REPORT: 'samsungce.waterConsumptionReport'>,
            <Capability.SAMSUNG_CE_QUICK_CONTROL: 'samsungce.quickControl'>,
            <Capability.SAMSUNG_CE_ENERGY_PLANNER: 'samsungce.energyPlanner'>,
            <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>,
            <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>,
          ]),
          'id': 'main',
          'label': 'main',
        }),
        dict({
          'capabilities': list([
            <Capability.HCA_WASHER_MODE: 'hca.washerMode'>,
          ]),
          'id': 'hca.main',
          'label': 'hca.main',
        }),
      ]),
      'device_id': 'f984b91d-f250-9d42-3436-33f09a422a47',
      'device_manufacturer_code': 'Samsung Electronics',
      'device_network_type': None,
      'device_type_id': None,
      'device_type_name': 'Samsung OCF Washer',
      'label': 'Washer',
      'location_id': '781d5f1e-c87e-455e-87f7-8e954879e91d',
      'name': '[washer] Samsung',
      'type': <DeviceType.OCF: 'OCF'>,
    }),
  ])
# ---
# name: test_fetching_single_device
  dict({
    'components': list([
      dict({
        'capabilities': list([
          <Capability.COLOR_TEMPERATURE: 'colorTemperature'>,
          <Capability.SWITCH: 'switch'>,
          <Capability.SWITCH_LEVEL: 'switchLevel'>,
          <Capability.HEALTH_CHECK: 'healthCheck'>,
          <Capability.REFRESH: 'refresh'>,
          <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>,
          <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>,
        ]),
        'id': 'main',
        'label': 'main',
      }),
    ]),
    'device_id': '440063de-a200-40b5-8a6b-f3399eaa0370',
    'device_manufacturer_code': 'Signify Netherlands B.V.',
    'device_network_type': None,
    'device_type_id': None,
    'device_type_name': None,
    'label': 'Bathroom spot',
    'location_id': '88a3a314-f0c8-40b4-bb44-44ba06c9c42f',
    'name': 'hue-color-temperature-bulb',
    'type': <DeviceType.VIPER: 'VIPER'>,
  })
# ---
# name: test_fetching_status_of_single_device[c2c_humidity]
  dict({
    'main': dict({
      <Capability.BATTERY: 'battery'>: dict({
        <Attribute.BATTERY: 'battery'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 9, 4, 47, 696000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 100,
        }),
        <Attribute.QUANTITY: 'quantity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TYPE: 'type'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.HEALTH_CHECK: 'healthCheck'>: dict({
        <Attribute.DEVICE_WATCH_DEVICE_STATUS: 'DeviceWatch-DeviceStatus'>: dict({
          'data': dict({
            'reason': 'DEVICE-OFFLINE',
          }),
          'timestamp': datetime.datetime(2025, 2, 8, 9, 4, 47, 696000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'offline',
        }),
        <Attribute.DEVICE_WATCH_ENROLL: 'DeviceWatch-Enroll'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.CHECK_INTERVAL: 'checkInterval'>: dict({
          'data': dict({
            'deviceScheme': 'UNTRACKED',
            'protocol': 'cloud',
          }),
          'timestamp': datetime.datetime(2025, 2, 7, 23, 1, 15, 973000, tzinfo=datetime.timezone.utc),
          'unit': 's',
          'value': 60,
        }),
        <Attribute.HEALTH_STATUS: 'healthStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.RELATIVE_HUMIDITY_MEASUREMENT: 'relativeHumidityMeasurement'>: dict({
        <Attribute.HUMIDITY: 'humidity'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 9, 4, 47, 696000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 26,
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 9, 4, 47, 696000, tzinfo=datetime.timezone.utc),
          'unit': 'C',
          'value': 26,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[c2c_motion_2]
  dict({
    'main': dict({
      <Capability.BATTERY: 'battery'>: dict({
        <Attribute.BATTERY: 'battery'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 3, 31, 3, 47000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 64,
        }),
        <Attribute.QUANTITY: 'quantity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TYPE: 'type'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.HEALTH_CHECK: 'healthCheck'>: dict({
        <Attribute.DEVICE_WATCH_DEVICE_STATUS: 'DeviceWatch-DeviceStatus'>: dict({
          'data': dict({
          }),
          'timestamp': datetime.datetime(2025, 2, 7, 15, 14, 53, 765000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'online',
        }),
        <Attribute.DEVICE_WATCH_ENROLL: 'DeviceWatch-Enroll'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.CHECK_INTERVAL: 'checkInterval'>: dict({
          'data': dict({
            'deviceScheme': 'UNTRACKED',
            'protocol': 'cloud',
          }),
          'timestamp': datetime.datetime(2023, 12, 17, 18, 11, 41, 578000, tzinfo=datetime.timezone.utc),
          'unit': 's',
          'value': 60,
        }),
        <Attribute.HEALTH_STATUS: 'healthStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.MOTION_SENSOR: 'motionSensor'>: dict({
        <Attribute.MOTION: 'motion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 7, 46, 49, 463000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'inactive',
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[c2c_shade]
  dict({
    'main': dict({
      <Capability.HEALTH_CHECK: 'healthCheck'>: dict({
        <Attribute.DEVICE_WATCH_DEVICE_STATUS: 'DeviceWatch-DeviceStatus'>: dict({
          'data': dict({
            'reason': 'DEVICE-OFFLINE',
          }),
          'timestamp': datetime.datetime(2025, 2, 8, 9, 4, 47, 694000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'offline',
        }),
        <Attribute.DEVICE_WATCH_ENROLL: 'DeviceWatch-Enroll'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.CHECK_INTERVAL: 'checkInterval'>: dict({
          'data': dict({
            'deviceScheme': 'UNTRACKED',
            'protocol': 'cloud',
          }),
          'timestamp': datetime.datetime(2025, 2, 7, 23, 1, 15, 966000, tzinfo=datetime.timezone.utc),
          'unit': 's',
          'value': 60,
        }),
        <Attribute.HEALTH_STATUS: 'healthStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SWITCH_LEVEL: 'switchLevel'>: dict({
        <Attribute.LEVEL: 'level'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 9, 4, 47, 694000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 100,
        }),
        <Attribute.LEVEL_RANGE: 'levelRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.WINDOW_SHADE: 'windowShade'>: dict({
        <Attribute.SUPPORTED_WINDOW_SHADE_COMMANDS: 'supportedWindowShadeCommands'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WINDOW_SHADE: 'windowShade'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 9, 4, 47, 694000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'open',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[c2c_switch]
  dict({
    'main': dict({
      <Capability.HEALTH_CHECK: 'healthCheck'>: dict({
        <Attribute.DEVICE_WATCH_DEVICE_STATUS: 'DeviceWatch-DeviceStatus'>: dict({
          'data': dict({
            'reason': 'DEVICE-OFFLINE',
          }),
          'timestamp': datetime.datetime(2025, 2, 8, 9, 4, 47, 691000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'offline',
        }),
        <Attribute.DEVICE_WATCH_ENROLL: 'DeviceWatch-Enroll'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.CHECK_INTERVAL: 'checkInterval'>: dict({
          'data': dict({
            'deviceScheme': 'UNTRACKED',
            'protocol': 'cloud',
          }),
          'timestamp': datetime.datetime(2025, 2, 7, 23, 1, 15, 962000, tzinfo=datetime.timezone.utc),
          'unit': 's',
          'value': 60,
        }),
        <Attribute.HEALTH_STATUS: 'healthStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 9, 4, 47, 691000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[c2c_thermostat_bridge_1]
  dict({
    'main': dict({
      <Capability.HEALTH_CHECK: 'healthCheck'>: dict({
        <Attribute.DEVICE_WATCH_DEVICE_STATUS: 'DeviceWatch-DeviceStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DEVICE_WATCH_ENROLL: 'DeviceWatch-Enroll'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.CHECK_INTERVAL: 'checkInterval'>: dict({
          'data': dict({
            'deviceScheme': 'UNTRACKED',
            'protocol': 'cloud',
          }),
          'timestamp': datetime.datetime(2025, 2, 7, 23, 3, 33, 797000, tzinfo=datetime.timezone.utc),
          'unit': 's',
          'value': 60,
        }),
        <Attribute.HEALTH_STATUS: 'healthStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.THERMOSTAT_MODE: 'thermostatMode'>: dict({
        <Attribute.SUPPORTED_THERMOSTAT_MODES: 'supportedThermostatModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.THERMOSTAT_MODE: 'thermostatMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[da_ks_microwave_0101x]
  dict({
    'hood': dict({
      <Capability.SAMSUNG_CE_HOOD_FAN_SPEED: 'samsungce.hoodFanSpeed'>: dict({
        <Attribute.HOOD_FAN_SPEED: 'hoodFanSpeed'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 0, 1, 7, 813000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
        <Attribute.SETTABLE_MAX_FAN_SPEED: 'settableMaxFanSpeed'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 0, 1, 6, 959000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 3,
        }),
        <Attribute.SETTABLE_MIN_FAN_SPEED: 'settableMinFanSpeed'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 0, 1, 6, 959000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
        <Attribute.SUPPORTED_HOOD_FAN_SPEED: 'supportedHoodFanSpeed'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 3, 23, 15, 59, 12, 796000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[0, 1, 2, 3, 4, 5]',
        }),
      }),
      <Capability.SAMSUNG_CE_LAMP: 'samsungce.lamp'>: dict({
        <Attribute.BRIGHTNESS_LEVEL: 'brightnessLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 289000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
        <Attribute.SUPPORTED_BRIGHTNESS_LEVEL: 'supportedBrightnessLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 289000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['off', 'low', 'high']",
        }),
      }),
    }),
    'main': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 152000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['doorControl', 'samsungce.hoodFanSpeed']",
        }),
      }),
      <Capability.DOOR_CONTROL: 'doorControl'>: dict({
        <Attribute.DOOR: 'door'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': dict({
            'href': '/temperatures/vs/0',
          }),
          'timestamp': datetime.datetime(2023, 7, 19, 5, 50, 12, 609000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'payload': dict({
              'if': list([
                'oic.if.baseline',
                'oic.if.a',
              ]),
              'rt': list([
                'x.com.samsung.da.temperatures',
              ]),
              'x.com.samsung.da.items': list([
                dict({
                  'x.com.samsung.da.current': '1',
                  'x.com.samsung.da.description': 'Temperature',
                  'x.com.samsung.da.desired': '0',
                  'x.com.samsung.da.id': '0',
                  'x.com.samsung.da.increment': '5',
                  'x.com.samsung.da.unit': 'Fahrenheit',
                }),
              ]),
            }),
          }),
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 3, 23, 15, 59, 12, 742000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2bad3237-4886-e699-1b90-4a51a3d55c8a',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 7, 3, 22, 0, 58, 832000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'res.1.1.0,sh.1.1.0',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 3, 23, 15, 59, 12, 742000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 7, 3, 6, 44, 54, 757000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'AKS-WW-TP2-20-MICROWAVE-OTR_40230125',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 3, 23, 15, 59, 12, 742000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'MediaTek',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 3, 23, 15, 59, 12, 742000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 3, 23, 15, 59, 12, 742000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 7, 3, 6, 44, 54, 757000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TP2X_DA-KS-MICROWAVE-0101X|40436241|50040100011411000200000000000000',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 7, 3, 6, 44, 54, 757000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TizenRT 2.0 + IPv6',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 7, 3, 6, 44, 54, 757000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DAWIT 3.0',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 3, 23, 15, 59, 12, 742000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 7, 3, 6, 44, 54, 757000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Microwave',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 3, 23, 15, 59, 12, 742000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2bad3237-4886-e699-1b90-4a51a3d55c8a',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 3, 23, 15, 59, 12, 742000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA-KS-MICROWAVE-0101X',
        }),
      }),
      <Capability.OVEN_MODE: 'ovenMode'>: dict({
        <Attribute.OVEN_MODE: 'ovenMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 289000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Others',
        }),
        <Attribute.SUPPORTED_OVEN_MODES: 'supportedOvenModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 21, 3, 790000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['Microwave', 'ConvectionBake', 'ConvectionRoast', 'grill', 'Others', 'warming']",
        }),
      }),
      <Capability.OVEN_OPERATING_STATE: 'ovenOperatingState'>: dict({
        <Attribute.COMPLETION_TIME: 'completionTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 188000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2025-02-08T21:13:36.184Z',
        }),
        <Attribute.MACHINE_STATE: 'machineState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 188000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.OPERATION_TIME: 'operationTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 188000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
        <Attribute.OVEN_JOB_STATE: 'ovenJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 160000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 188000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 0,
        }),
        <Attribute.SUPPORTED_MACHINE_STATES: 'supportedMachineStates'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.OVEN_SETPOINT: 'ovenSetpoint'>: dict({
        <Attribute.OVEN_SETPOINT: 'ovenSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 0, 1, 9, 108000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
        <Attribute.OVEN_SETPOINT_RANGE: 'ovenSetpointRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>: dict({
        <Attribute.REMOTE_CONTROL_ENABLED: 'remoteControlEnabled'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 357000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'false',
        }),
      }),
      <Capability.SAMSUNG_CE_DEFINED_RECIPE: 'samsungce.definedRecipe'>: dict({
        <Attribute.DEFINED_RECIPE: 'definedRecipe'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 160000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'browingLevel': 0,
            'categoryId': 0,
            'cavityId': '0',
            'itemId': 0,
            'option': 0,
            'recipeType': '0',
            'servingSize': 0,
          }),
        }),
      }),
      <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>: dict({
        <Attribute.BINARY_ID: 'binaryId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 256000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TP2X_DA-KS-MICROWAVE-0101X',
        }),
        <Attribute.DESCRIPTION: 'description'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MICOM_ASSAY_CODE: 'micomAssayCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_CLASSIFICATION_CODE: 'modelClassificationCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_NAME: 'modelName'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RELEASE_YEAR: 'releaseYear'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER: 'serialNumber'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER_EXTRA: 'serialNumberExtra'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_DOOR_STATE: 'samsungce.doorState'>: dict({
        <Attribute.DOOR_STATE: 'doorState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 227000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'closed',
        }),
      }),
      <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>: dict({
        <Attribute.VERSION_NUMBER: 'versionNumber'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 7, 3, 9, 36, 13, 282000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 22120101,
        }),
      }),
      <Capability.SAMSUNG_CE_HOOD_FAN_SPEED: 'samsungce.hoodFanSpeed'>: dict({
        <Attribute.HOOD_FAN_SPEED: 'hoodFanSpeed'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 0, 1, 7, 813000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
        <Attribute.SETTABLE_MAX_FAN_SPEED: 'settableMaxFanSpeed'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 0, 1, 6, 959000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 3,
        }),
        <Attribute.SETTABLE_MIN_FAN_SPEED: 'settableMinFanSpeed'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 0, 1, 6, 959000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
        <Attribute.SUPPORTED_HOOD_FAN_SPEED: 'supportedHoodFanSpeed'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 3, 23, 15, 59, 12, 796000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[0, 1, 2, 3, 4, 5]',
        }),
      }),
      <Capability.SAMSUNG_CE_KIDS_LOCK: 'samsungce.kidsLock'>: dict({
        <Attribute.LOCK_STATE: 'lockState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 152000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'unlocked',
        }),
      }),
      <Capability.SAMSUNG_CE_KITCHEN_DEVICE_DEFAULTS: 'samsungce.kitchenDeviceDefaults'>: dict({
        <Attribute.DEFAULT_OPERATION_TIME: 'defaultOperationTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 3, 23, 15, 59, 12, 609000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 30,
        }),
        <Attribute.DEFAULT_OVEN_MODE: 'defaultOvenMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 289000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'MicroWave',
        }),
        <Attribute.DEFAULT_OVEN_SETPOINT: 'defaultOvenSetpoint'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_KITCHEN_DEVICE_IDENTIFICATION: 'samsungce.kitchenDeviceIdentification'>: dict({
        <Attribute.FUEL: 'fuel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_CODE: 'modelCode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 289000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ME8000T-/AA0',
        }),
        <Attribute.REGION_CODE: 'regionCode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 289000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'US',
        }),
        <Attribute.REPRESENTATIVE_COMPONENT: 'representativeComponent'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TYPE: 'type'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 3, 23, 15, 59, 10, 971000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'microwave',
        }),
      }),
      <Capability.SAMSUNG_CE_KITCHEN_MODE_SPECIFICATION: 'samsungce.kitchenModeSpecification'>: dict({
        <Attribute.SPECIFICATION: 'specification'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 21, 3, 790000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'single': list([
              dict({
                'mode': 'MicroWave',
                'supportedOptions': dict({
                  'operationTime': dict({
                    'max': '01:40:00',
                  }),
                  'powerLevel': dict({
                    'default': '100%',
                    'supportedValues': list([
                      '0%',
                      '10%',
                      '20%',
                      '30%',
                      '40%',
                      '50%',
                      '60%',
                      '70%',
                      '80%',
                      '90%',
                      '100%',
                    ]),
                  }),
                }),
              }),
              dict({
                'mode': 'ConvectionBake',
                'supportedOptions': dict({
                  'operationTime': dict({
                    'max': '01:40:00',
                  }),
                  'temperature': dict({
                    'F': dict({
                      'default': 350,
                      'max': 425,
                      'min': 100,
                      'supportedValues': list([
                        100,
                        200,
                        225,
                        250,
                        275,
                        300,
                        325,
                        350,
                        375,
                        400,
                        425,
                      ]),
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'ConvectionRoast',
                'supportedOptions': dict({
                  'operationTime': dict({
                    'max': '01:40:00',
                  }),
                  'temperature': dict({
                    'F': dict({
                      'default': 325,
                      'max': 425,
                      'min': 200,
                      'supportedValues': list([
                        200,
                        225,
                        250,
                        275,
                        300,
                        325,
                        350,
                        375,
                        400,
                        425,
                      ]),
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'Grill',
                'supportedOptions': dict({
                  'operationTime': dict({
                    'max': '01:40:00',
                  }),
                  'temperature': dict({
                    'F': dict({
                      'default': 425,
                      'max': 425,
                      'min': 425,
                      'resolution': 5,
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'SpeedBake',
                'supportedOptions': dict({
                  'operationTime': dict({
                    'max': '01:40:00',
                  }),
                  'powerLevel': dict({
                    'default': '30%',
                    'supportedValues': list([
                      '10%',
                      '30%',
                      '50%',
                      '70%',
                    ]),
                  }),
                }),
              }),
              dict({
                'mode': 'SpeedRoast',
                'supportedOptions': dict({
                  'operationTime': dict({
                    'max': '01:40:00',
                  }),
                  'powerLevel': dict({
                    'default': '30%',
                    'supportedValues': list([
                      '10%',
                      '30%',
                      '50%',
                      '70%',
                    ]),
                  }),
                }),
              }),
              dict({
                'mode': 'KeepWarm',
                'supportedOptions': dict({
                  'operationTime': dict({
                    'max': '01:40:00',
                  }),
                  'temperature': dict({
                    'F': dict({
                      'default': 175,
                      'max': 175,
                      'min': 175,
                      'resolution': 5,
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'Autocook',
                'supportedOptions': dict({
                }),
              }),
              dict({
                'mode': 'Cookie',
                'supportedOptions': dict({
                  'operationTime': dict({
                    'max': '01:40:00',
                  }),
                  'temperature': dict({
                    'F': dict({
                      'default': 325,
                      'max': 325,
                      'min': 325,
                      'resolution': 5,
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'SteamClean',
                'supportedOptions': dict({
                  'operationTime': dict({
                    'max': '00:06:30',
                  }),
                }),
              }),
            ]),
          }),
        }),
      }),
      <Capability.SAMSUNG_CE_MICROWAVE_POWER: 'samsungce.microwavePower'>: dict({
        <Attribute.POWER_LEVEL: 'powerLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 160000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '0%',
        }),
        <Attribute.SUPPORTED_POWER_LEVELS: 'supportedPowerLevels'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 160000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%']",
        }),
      }),
      <Capability.SAMSUNG_CE_OVEN_MODE: 'samsungce.ovenMode'>: dict({
        <Attribute.OVEN_MODE: 'ovenMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 289000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'NoOperation',
        }),
        <Attribute.SUPPORTED_OVEN_MODES: 'supportedOvenModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 10, 21, 3, 790000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['MicroWave', 'ConvectionBake', 'ConvectionRoast', 'Grill', 'SpeedBake', 'SpeedRoast', 'KeepWarm', 'Autocook', 'Cookie', 'SteamClean']",
        }),
      }),
      <Capability.SAMSUNG_CE_OVEN_OPERATING_STATE: 'samsungce.ovenOperatingState'>: dict({
        <Attribute.COMPLETION_TIME: 'completionTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 188000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2025-02-08T21:13:36.184Z',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 188000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.OPERATION_TIME: 'operationTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 188000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '00:00:00',
        }),
        <Attribute.OVEN_JOB_STATE: 'ovenJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 160000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 188000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>: dict({
        <Attribute.AVAILABLE_MODULES: 'availableModules'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 213000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[]',
        }),
        <Attribute.LAST_UPDATED_DATE: 'lastUpdatedDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEW_VERSION_AVAILABLE: 'newVersionAvailable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 213000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OTN_D_U_I_D: 'otnDUID'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 256000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'U7CNQWBWSCD7C',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TARGET_MODULE: 'targetModule'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>: dict({
        <Attribute.DUMP_TYPE: 'dumpType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 256000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'file',
        }),
        <Attribute.ENDPOINT: 'endpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 256000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'SSM',
        }),
        <Attribute.LOG_TYPE: 'logType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 256000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['errCode', 'dump']",
        }),
        <Attribute.MIN_VERSION: 'minVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 256000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '1.0',
        }),
        <Attribute.MN_ID: 'mnId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 256000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '0AJT',
        }),
        <Attribute.PROTOCOL_TYPE: 'protocolType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 256000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'wifi_https',
        }),
        <Attribute.SETUP_ID: 'setupId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 21, 13, 36, 256000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '621',
        }),
        <Attribute.SIGNIN_PERMISSION: 'signinPermission'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TS_ID: 'tsId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 0, 11, 12, 10000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 0, 11, 15, 291000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 1,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[da_ks_range_0101x]
  dict({
    'cavity-01': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 9, 7, 22, 35, 34, 197000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[]',
        }),
      }),
      <Capability.CUSTOM_OVEN_CAVITY_STATUS: 'custom.ovenCavityStatus'>: dict({
        <Attribute.OVEN_CAVITY_STATUS: 'ovenCavityStatus'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 3, 7, 46, 10, 165000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.OVEN_MODE: 'ovenMode'>: dict({
        <Attribute.OVEN_MODE: 'ovenMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 6, 983000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Others',
        }),
        <Attribute.SUPPORTED_OVEN_MODES: 'supportedOvenModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 8, 409000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['Others']",
        }),
      }),
      <Capability.OVEN_OPERATING_STATE: 'ovenOperatingState'>: dict({
        <Attribute.COMPLETION_TIME: 'completionTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 5, 14, 19, 0, 4, 584000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2024-05-14T19:00:04.579Z',
        }),
        <Attribute.MACHINE_STATE: 'machineState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 5, 415000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.OPERATION_TIME: 'operationTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 5, 415000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
        <Attribute.OVEN_JOB_STATE: 'ovenJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 5, 415000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 5, 415000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 1,
        }),
        <Attribute.SUPPORTED_MACHINE_STATES: 'supportedMachineStates'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.OVEN_SETPOINT: 'ovenSetpoint'>: dict({
        <Attribute.OVEN_SETPOINT: 'ovenSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 6, 976000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
        <Attribute.OVEN_SETPOINT_RANGE: 'ovenSetpointRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_KITCHEN_DEVICE_DEFAULTS: 'samsungce.kitchenDeviceDefaults'>: dict({
        <Attribute.DEFAULT_OPERATION_TIME: 'defaultOperationTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DEFAULT_OVEN_MODE: 'defaultOvenMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 6, 983000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ConvectionBake',
        }),
        <Attribute.DEFAULT_OVEN_SETPOINT: 'defaultOvenSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 6, 976000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 350,
        }),
      }),
      <Capability.SAMSUNG_CE_OVEN_MODE: 'samsungce.ovenMode'>: dict({
        <Attribute.OVEN_MODE: 'ovenMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 6, 983000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'NoOperation',
        }),
        <Attribute.SUPPORTED_OVEN_MODES: 'supportedOvenModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 8, 409000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['SelfClean', 'SteamClean', 'NoOperation']",
        }),
      }),
      <Capability.SAMSUNG_CE_OVEN_OPERATING_STATE: 'samsungce.ovenOperatingState'>: dict({
        <Attribute.COMPLETION_TIME: 'completionTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 5, 14, 19, 0, 4, 584000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2024-05-14T19:00:04.579Z',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 5, 415000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.OPERATION_TIME: 'operationTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 5, 415000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '00:00:00',
        }),
        <Attribute.OVEN_JOB_STATE: 'ovenJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 5, 415000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 5, 415000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 1,
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 6, 976000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 175,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
    'main': dict({
      <Capability.CUSTOM_COOKTOP_OPERATING_STATE: 'custom.cooktopOperatingState'>: dict({
        <Attribute.COOKTOP_OPERATING_STATE: 'cooktopOperatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 49, 976000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.SUPPORTED_COOKTOP_OPERATING_STATE: 'supportedCooktopOperatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 5, 293000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['run', 'ready']",
        }),
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 7, 52, 875000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[]',
        }),
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': dict({
            'href': '/information/vs/0',
          }),
          'timestamp': datetime.datetime(2023, 11, 28, 22, 49, 9, 333000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'payload': dict({
              'if': list([
                'oic.if.baseline',
                'oic.if.a',
              ]),
              'rt': list([
                'x.com.samsung.da.information',
              ]),
              'x.com.samsung.da.description': 'TP1X_DA-KS-OVEN-01011',
              'x.com.samsung.da.items': list([
                dict({
                  'x.com.samsung.da.description': 'Version',
                  'x.com.samsung.da.id': '0',
                  'x.com.samsung.da.newVersionAvailable': '0',
                  'x.com.samsung.da.number': '02144A221005',
                  'x.com.samsung.da.type': 'Software',
                }),
                dict({
                  'x.com.samsung.da.description': 'Version',
                  'x.com.samsung.da.id': '1',
                  'x.com.samsung.da.newVersionAvailable': '0',
                  'x.com.samsung.da.number': '20121600,FFFFFFFF',
                  'x.com.samsung.da.type': 'Firmware',
                }),
              ]),
              'x.com.samsung.da.modelNum': 'TP1X_DA-KS-RANGE-0101X|40445041|5001011E03151101020000000000000',
              'x.com.samsung.da.otnDUID': 'ZPCNQWBWXI53Q',
              'x.com.samsung.da.serialNum': '0J4D7DARB00000K',
            }),
          }),
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 2, 282000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2c3cbaa0-1899-5ddc-7b58-9d657bd48f18',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 12, 19, 22, 33, 9, 710000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '1.2.1',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 2, 282000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 5, 14, 19, 0, 26, 132000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'AKS-WW-TP1-20-OVEN-3-CR_40240205',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 5, 14, 19, 0, 26, 132000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Realtek',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 2, 282000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 2, 282000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 5, 14, 19, 0, 26, 132000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TP1X_DA-KS-RANGE-0101X|40445041|5001011E031511010200000000000000',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 5, 14, 19, 0, 26, 132000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TizenRT 3.1',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 5, 14, 19, 0, 26, 132000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DAWIT 3.0',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 2, 282000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 5, 14, 19, 0, 26, 132000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Range',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 2, 282000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2c3cbaa0-1899-5ddc-7b58-9d657bd48f18',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 2, 282000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA-KS-RANGE-0101X',
        }),
      }),
      <Capability.OVEN_MODE: 'ovenMode'>: dict({
        <Attribute.OVEN_MODE: 'ovenMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 7, 52, 875000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Others',
        }),
        <Attribute.SUPPORTED_OVEN_MODES: 'supportedOvenModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 3, 7, 46, 10, 165000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['Bake', 'Broil', 'ConvectionBake', 'ConvectionRoast', 'warming', 'Others', 'Dehydrate']",
        }),
      }),
      <Capability.OVEN_OPERATING_STATE: 'ovenOperatingState'>: dict({
        <Attribute.COMPLETION_TIME: 'completionTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 48, 830000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2025-02-07T00:50:48.803Z',
        }),
        <Attribute.MACHINE_STATE: 'machineState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 48, 830000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.OPERATION_TIME: 'operationTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 48, 830000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
        <Attribute.OVEN_JOB_STATE: 'ovenJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 49, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 48, 830000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 1,
        }),
        <Attribute.SUPPORTED_MACHINE_STATES: 'supportedMachineStates'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.OVEN_SETPOINT: 'ovenSetpoint'>: dict({
        <Attribute.OVEN_SETPOINT: 'ovenSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 48, 980000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 0,
        }),
        <Attribute.OVEN_SETPOINT_RANGE: 'ovenSetpointRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>: dict({
        <Attribute.REMOTE_CONTROL_ENABLED: 'remoteControlEnabled'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 50, 886000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'true',
        }),
      }),
      <Capability.SAMSUNG_CE_CUSTOM_RECIPE: 'samsungce.customRecipe'>: dict({
      }),
      <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>: dict({
        <Attribute.BINARY_ID: 'binaryId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 3, 7, 46, 10, 124000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TP1X_DA-KS-RANGE-0101X',
        }),
        <Attribute.DESCRIPTION: 'description'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MICOM_ASSAY_CODE: 'micomAssayCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_CLASSIFICATION_CODE: 'modelClassificationCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_NAME: 'modelName'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RELEASE_YEAR: 'releaseYear'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER: 'serialNumber'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER_EXTRA: 'serialNumberExtra'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_DOOR_STATE: 'samsungce.doorState'>: dict({
        <Attribute.DOOR_STATE: 'doorState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 5, 24, 873000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'closed',
        }),
      }),
      <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>: dict({
        <Attribute.VERSION_NUMBER: 'versionNumber'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 11, 1, 21, 37, 51, 304000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 22100101,
        }),
      }),
      <Capability.SAMSUNG_CE_KIDS_LOCK: 'samsungce.kidsLock'>: dict({
        <Attribute.LOCK_STATE: 'lockState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 3, 7, 46, 10, 275000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'unlocked',
        }),
      }),
      <Capability.SAMSUNG_CE_KITCHEN_DEVICE_DEFAULTS: 'samsungce.kitchenDeviceDefaults'>: dict({
        <Attribute.DEFAULT_OPERATION_TIME: 'defaultOperationTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 48, 830000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 3600,
        }),
        <Attribute.DEFAULT_OVEN_MODE: 'defaultOvenMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 7, 52, 875000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ConvectionBake',
        }),
        <Attribute.DEFAULT_OVEN_SETPOINT: 'defaultOvenSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 48, 980000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 350,
        }),
      }),
      <Capability.SAMSUNG_CE_KITCHEN_DEVICE_IDENTIFICATION: 'samsungce.kitchenDeviceIdentification'>: dict({
        <Attribute.FUEL: 'fuel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_CODE: 'modelCode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 7, 52, 875000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'NE6516A-/AA0',
        }),
        <Attribute.REGION_CODE: 'regionCode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 7, 52, 875000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'US',
        }),
        <Attribute.REPRESENTATIVE_COMPONENT: 'representativeComponent'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TYPE: 'type'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 2, 487000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'range',
        }),
      }),
      <Capability.SAMSUNG_CE_KITCHEN_MODE_SPECIFICATION: 'samsungce.kitchenModeSpecification'>: dict({
        <Attribute.SPECIFICATION: 'specification'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 5, 14, 19, 0, 30, 62000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'single': list([
              dict({
                'mode': 'Bake',
                'supportedOperations': list([
                  'start',
                  'set',
                ]),
                'supportedOptions': dict({
                  'operationTime': dict({
                    'default': '01:00:00',
                    'max': '09:59:00',
                    'min': '00:01:00',
                    'resolution': '00:01:00',
                  }),
                  'temperature': dict({
                    'C': dict({
                      'default': 175,
                      'max': 285,
                      'min': 80,
                      'resolution': 0,
                    }),
                    'F': dict({
                      'default': 350,
                      'max': 550,
                      'min': 175,
                      'resolution': 0,
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'Broil',
                'supportedOperations': list([
                  'set',
                ]),
                'supportedOptions': dict({
                  'temperature': dict({
                    'C': dict({
                      'default': 61441,
                      'max': 61442,
                      'min': 61441,
                      'supportedValues': list([
                        61441,
                        61442,
                      ]),
                    }),
                    'F': dict({
                      'default': 61441,
                      'max': 61442,
                      'min': 61441,
                      'supportedValues': list([
                        61441,
                        61442,
                      ]),
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'ConvectionBake',
                'supportedOperations': list([
                  'start',
                  'set',
                ]),
                'supportedOptions': dict({
                  'operationTime': dict({
                    'default': '01:00:00',
                    'max': '09:59:00',
                    'min': '00:01:00',
                    'resolution': '00:01:00',
                  }),
                  'temperature': dict({
                    'C': dict({
                      'default': 160,
                      'max': 285,
                      'min': 80,
                      'resolution': 0,
                    }),
                    'F': dict({
                      'default': 325,
                      'max': 550,
                      'min': 175,
                      'resolution': 0,
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'ConvectionRoast',
                'supportedOperations': list([
                  'start',
                  'set',
                ]),
                'supportedOptions': dict({
                  'operationTime': dict({
                    'default': '01:00:00',
                    'max': '09:59:00',
                    'min': '00:01:00',
                    'resolution': '00:01:00',
                  }),
                  'temperature': dict({
                    'C': dict({
                      'default': 160,
                      'max': 285,
                      'min': 80,
                      'resolution': 0,
                    }),
                    'F': dict({
                      'default': 325,
                      'max': 550,
                      'min': 175,
                      'resolution': 0,
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'KeepWarm',
                'supportedOperations': list([
                  'set',
                ]),
                'supportedOptions': dict({
                  'temperature': dict({
                    'C': dict({
                      'default': 80,
                      'max': 80,
                      'min': 80,
                      'supportedValues': list([
                        80,
                      ]),
                    }),
                    'F': dict({
                      'default': 175,
                      'max': 175,
                      'min': 175,
                      'supportedValues': list([
                        175,
                      ]),
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'BreadProof',
                'supportedOperations': list([
                  'set',
                ]),
                'supportedOptions': dict({
                  'temperature': dict({
                    'C': dict({
                      'default': 35,
                      'max': 35,
                      'min': 35,
                      'supportedValues': list([
                        35,
                      ]),
                    }),
                    'F': dict({
                      'default': 95,
                      'max': 95,
                      'min': 95,
                      'supportedValues': list([
                        95,
                      ]),
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'AirFryer',
                'supportedOperations': list([
                  'start',
                  'set',
                ]),
                'supportedOptions': dict({
                  'operationTime': dict({
                    'default': '01:00:00',
                    'max': '09:59:00',
                    'min': '00:01:00',
                    'resolution': '00:01:00',
                  }),
                  'temperature': dict({
                    'C': dict({
                      'default': 220,
                      'max': 260,
                      'min': 175,
                      'resolution': 0,
                    }),
                    'F': dict({
                      'default': 425,
                      'max': 500,
                      'min': 350,
                      'resolution': 0,
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'Dehydrate',
                'supportedOperations': list([
                  'start',
                  'set',
                ]),
                'supportedOptions': dict({
                  'operationTime': dict({
                    'default': '01:00:00',
                    'max': '09:59:00',
                    'min': '00:01:00',
                    'resolution': '00:01:00',
                  }),
                  'temperature': dict({
                    'C': dict({
                      'default': 65,
                      'max': 105,
                      'min': 40,
                      'resolution': 0,
                    }),
                    'F': dict({
                      'default': 150,
                      'max': 225,
                      'min': 100,
                      'resolution': 0,
                    }),
                  }),
                }),
              }),
              dict({
                'mode': 'SelfClean',
                'supportedOperations': list([
                ]),
                'supportedOptions': dict({
                }),
              }),
              dict({
                'mode': 'SteamClean',
                'supportedOperations': list([
                ]),
                'supportedOptions': dict({
                }),
              }),
            ]),
          }),
        }),
      }),
      <Capability.SAMSUNG_CE_LAMP: 'samsungce.lamp'>: dict({
        <Attribute.BRIGHTNESS_LEVEL: 'brightnessLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 7, 52, 875000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
        <Attribute.SUPPORTED_BRIGHTNESS_LEVEL: 'supportedBrightnessLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 7, 52, 875000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['off', 'high']",
        }),
      }),
      <Capability.SAMSUNG_CE_MEAT_PROBE: 'samsungce.meatProbe'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 2, 679000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'disconnected',
        }),
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 2, 619000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 0,
        }),
        <Attribute.TEMPERATURE_SETPOINT: 'temperatureSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 21, 22, 37, 2, 619000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 0,
        }),
      }),
      <Capability.SAMSUNG_CE_OVEN_MODE: 'samsungce.ovenMode'>: dict({
        <Attribute.OVEN_MODE: 'ovenMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 7, 52, 875000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'NoOperation',
        }),
        <Attribute.SUPPORTED_OVEN_MODES: 'supportedOvenModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 3, 7, 46, 10, 165000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['Bake', 'Broil', 'ConvectionBake', 'ConvectionRoast', 'KeepWarm', 'BreadProof', 'AirFryer', 'Dehydrate', 'SelfClean', 'SteamClean']",
        }),
      }),
      <Capability.SAMSUNG_CE_OVEN_OPERATING_STATE: 'samsungce.ovenOperatingState'>: dict({
        <Attribute.COMPLETION_TIME: 'completionTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 48, 830000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2025-02-07T00:50:48.803Z',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 48, 830000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.OPERATION_TIME: 'operationTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 48, 830000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '00:00:00',
        }),
        <Attribute.OVEN_JOB_STATE: 'ovenJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 49, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 48, 830000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 1,
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>: dict({
        <Attribute.AVAILABLE_MODULES: 'availableModules'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 3, 7, 46, 10, 124000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[]',
        }),
        <Attribute.LAST_UPDATED_DATE: 'lastUpdatedDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEW_VERSION_AVAILABLE: 'newVersionAvailable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 3, 7, 46, 10, 124000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OTN_D_U_I_D: 'otnDUID'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 3, 7, 46, 10, 124000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ZPCNQWBWXI47Q',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TARGET_MODULE: 'targetModule'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 0, 50, 48, 980000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 175,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[da_ref_normal_01001]
  dict({
    'camera-01': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 12, 17, 11, 19, 18, 845000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['switch']",
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
    'cooler': dict({
      <Capability.CONTACT_SENSOR: 'contactSensor'>: dict({
        <Attribute.CONTACT: 'contact'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 0, 23, 41, 655000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'closed',
        }),
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 6, 17, 6, 16, 33, 918000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[]',
        }),
      }),
      <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>: dict({
        <Attribute.MAXIMUM_SETPOINT: 'maximumSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 493000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 44,
        }),
        <Attribute.MINIMUM_SETPOINT: 'minimumSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 493000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 34,
        }),
      }),
      <Capability.SAMSUNG_CE_UNAVAILABLE_CAPABILITIES: 'samsungce.unavailableCapabilities'>: dict({
        <Attribute.UNAVAILABLE_COMMANDS: 'unavailableCommands'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 6, 12, 35, 50, 411000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[]',
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 493000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 37,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>: dict({
        <Attribute.COOLING_SETPOINT: 'coolingSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 493000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 37,
        }),
        <Attribute.COOLING_SETPOINT_RANGE: 'coolingSetpointRange'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 493000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': dict({
            'maximum': 44,
            'minimum': 34,
            'step': 1,
          }),
        }),
      }),
    }),
    'cvroom': dict({
      <Capability.CONTACT_SENSOR: 'contactSensor'>: dict({
        <Attribute.CONTACT: 'contact'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 23, 22, 4, 631000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'closed',
        }),
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 7, 27, 1, 19, 43, 145000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[]',
        }),
      }),
      <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>: dict({
        <Attribute.FRIDGE_MODE: 'fridgeMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 448000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'CV_FDR_DELI',
        }),
        <Attribute.FRIDGE_MODE_VALUE: 'fridgeModeValue'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_FRIDGE_MODES: 'supportedFridgeModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 448000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['CV_FDR_WINE', 'CV_FDR_DELI', 'CV_FDR_BEVERAGE', 'CV_FDR_MEAT']",
        }),
      }),
    }),
    'freezer': dict({
      <Capability.CONTACT_SENSOR: 'contactSensor'>: dict({
        <Attribute.CONTACT: 'contact'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 0, 0, 44, 267000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'closed',
        }),
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 6, 9, 0, 29, 743000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['samsungce.freezerConvertMode']",
        }),
      }),
      <Capability.CUSTOM_THERMOSTAT_SETPOINT_CONTROL: 'custom.thermostatSetpointControl'>: dict({
        <Attribute.MAXIMUM_SETPOINT: 'maximumSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 493000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 5,
        }),
        <Attribute.MINIMUM_SETPOINT: 'minimumSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 493000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': -8,
        }),
      }),
      <Capability.SAMSUNG_CE_FREEZER_CONVERT_MODE: 'samsungce.freezerConvertMode'>: dict({
        <Attribute.FREEZER_CONVERT_MODE: 'freezerConvertMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_FREEZER_CONVERT_MODES: 'supportedFreezerConvertModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 448000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[]',
        }),
      }),
      <Capability.SAMSUNG_CE_UNAVAILABLE_CAPABILITIES: 'samsungce.unavailableCapabilities'>: dict({
        <Attribute.UNAVAILABLE_COMMANDS: 'unavailableCommands'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 6, 12, 35, 50, 411000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[]',
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 493000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 0,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>: dict({
        <Attribute.COOLING_SETPOINT: 'coolingSetpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 493000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': 0,
        }),
        <Attribute.COOLING_SETPOINT_RANGE: 'coolingSetpointRange'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 493000, tzinfo=datetime.timezone.utc),
          'unit': 'F',
          'value': dict({
            'maximum': 5,
            'minimum': -8,
            'step': 1,
          }),
        }),
      }),
    }),
    'icemaker': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 7, 10, 54, 5, 580000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[]',
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 12, 1, 52, 528000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'on',
        }),
      }),
    }),
    'icemaker-02': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 7, 28, 18, 47, 7, 39000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[]',
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
    'icemaker-03': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 12, 15, 1, 5, 9, 803000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[]',
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
    'main': dict({
      <Capability.CONTACT_SENSOR: 'contactSensor'>: dict({
        <Attribute.CONTACT: 'contact'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 0, 23, 41, 655000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'closed',
        }),
      }),
      <Capability.CUSTOM_DEVICE_REPORT_STATE_CONFIGURATION: 'custom.deviceReportStateConfiguration'>: dict({
        <Attribute.REPORT_STATE_PERIOD: 'reportStatePeriod'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 345000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'enabled',
        }),
        <Attribute.REPORT_STATE_REALTIME: 'reportStateRealtime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 345000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'state': 'disabled',
          }),
        }),
        <Attribute.REPORT_STATE_REALTIME_PERIOD: 'reportStateRealtimePeriod'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 23, 57, 45, 739000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['thermostatCoolingSetpoint', 'temperatureMeasurement', 'custom.fridgeMode', 'custom.deviceReportStateConfiguration', 'samsungce.fridgeFoodList', 'samsungce.runestoneHomeContext', 'demandResponseLoadControl', 'samsungce.fridgeVacationMode', 'samsungce.sabbathMode']",
        }),
      }),
      <Capability.CUSTOM_DISABLED_COMPONENTS: 'custom.disabledComponents'>: dict({
        <Attribute.DISABLED_COMPONENTS: 'disabledComponents'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 12, 1, 52, 638000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['icemaker-02', 'icemaker-03', 'pantry-01', 'camera-01', 'scale-10', 'scale-11']",
        }),
      }),
      <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>: dict({
        <Attribute.DR_MAX_DURATION: 'drMaxDuration'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 7, 11, 50, 40, 228000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 1440,
        }),
        <Attribute.ENERGY_SAVING_INFO: 'energySavingInfo'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_LEVEL: 'energySavingLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_OPERATION: 'energySavingOperation'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_OPERATION_SUPPORT: 'energySavingOperationSupport'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 7, 11, 50, 40, 228000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.ENERGY_SAVING_SUPPORT: 'energySavingSupport'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 7, 10, 57, 35, 490000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.ENERGY_TYPE: 'energyType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 7, 10, 54, 5, 580000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2.0',
        }),
        <Attribute.NOTIFICATION_TEMPLATE_I_D: 'notificationTemplateID'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_ENERGY_SAVING_LEVELS: 'supportedEnergySavingLevels'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_FRIDGE_MODE: 'custom.fridgeMode'>: dict({
        <Attribute.FRIDGE_MODE: 'fridgeMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.FRIDGE_MODE_VALUE: 'fridgeModeValue'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_FRIDGE_MODES: 'supportedFridgeModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_WATER_FILTER: 'custom.waterFilter'>: dict({
        <Attribute.WATER_FILTER_CAPACITY: 'waterFilterCapacity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WATER_FILTER_LAST_RESET_DATE: 'waterFilterLastResetDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WATER_FILTER_RESET_TYPE: 'waterFilterResetType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 38, 59, 973000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['replaceable']",
        }),
        <Attribute.WATER_FILTER_STATUS: 'waterFilterStatus'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 38, 59, 973000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'normal',
        }),
        <Attribute.WATER_FILTER_USAGE: 'waterFilterUsage'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 5, 6, 45, 769000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 52,
        }),
        <Attribute.WATER_FILTER_USAGE_STEP: 'waterFilterUsageStep'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 38, 59, 973000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 1,
        }),
      }),
      <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>: dict({
        <Attribute.DEMAND_RESPONSE_LOAD_CONTROL_STATUS: 'drlcStatus'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 38, 59, 899000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'drlcLevel': 0,
            'drlcType': 1,
            'duration': 0,
            'override': False,
          }),
        }),
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': dict({
            'href': '/refrigeration/vs/0',
          }),
          'timestamp': datetime.datetime(2024, 3, 26, 9, 6, 17, 169000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'payload': dict({
              'if': list([
                'oic.if.a',
              ]),
              'rt': list([
                'x.com.samsung.da.fridge',
              ]),
              'x.com.samsung.da.rapidFreezing': 'Off',
              'x.com.samsung.da.rapidFridge': 'Off',
            }),
          }),
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 2, 12, 37, 43, 756000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '7d3feb98-8a36-4351-c362-5e21ad3a78dd',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 2, 12, 37, 43, 756000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'res.1.1.0,sh.1.1.0',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 2, 12, 37, 43, 756000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 2, 12, 37, 43, 756000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 2, 12, 37, 43, 756000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '20240616.213423',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 2, 12, 37, 43, 756000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 2, 12, 37, 43, 756000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 2, 12, 37, 43, 756000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 2, 12, 37, 43, 756000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '24K_REF_LCD_FHUB9.0|00113141|0002034e051324200103000000000000',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 2, 12, 37, 43, 756000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Tizen',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 2, 12, 37, 43, 756000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '7.0',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 2, 12, 37, 43, 756000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '',
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 2, 12, 37, 43, 756000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Family Hub',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 2, 12, 37, 43, 756000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '7d3feb98-8a36-4351-c362-5e21ad3a78dd',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 2, 12, 37, 43, 756000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2024-11-08T11:56:59Z',
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 2, 12, 37, 43, 756000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA-REF-NORMAL-01001',
        }),
      }),
      <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>: dict({
        <Attribute.POWER_CONSUMPTION: 'powerConsumption'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 9, 0, 25, 23, 843000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'deltaEnergy': 27,
            'end': '2025-02-09T00:25:23Z',
            'energy': 4381422,
            'energySaved': 0,
            'persistedEnergy': 0,
            'power': 144,
            'powerEnergy': 27.01890500307083,
            'start': '2025-02-09T00:13:39Z',
          }),
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.REFRIGERATION: 'refrigeration'>: dict({
        <Attribute.DEFROST: 'defrost'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 38, 59, 276000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
        <Attribute.RAPID_COOLING: 'rapidCooling'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 497000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
        <Attribute.RAPID_FREEZING: 'rapidFreezing'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 497000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>: dict({
        <Attribute.BINARY_ID: 'binaryId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 12, 1, 53, 67000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '24K_REF_LCD_FHUB9.0',
        }),
        <Attribute.DESCRIPTION: 'description'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MICOM_ASSAY_CODE: 'micomAssayCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_CLASSIFICATION_CODE: 'modelClassificationCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_NAME: 'modelName'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RELEASE_YEAR: 'releaseYear'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 6, 9, 0, 29, 743000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 19,
        }),
        <Attribute.SERIAL_NUMBER: 'serialNumber'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER_EXTRA: 'serialNumberExtra'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>: dict({
        <Attribute.VERSION_NUMBER: 'versionNumber'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 11, 6, 9, 0, 29, 743000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 24090102,
        }),
      }),
      <Capability.SAMSUNG_CE_FRIDGE_FOOD_LIST: 'samsungce.fridgeFoodList'>: dict({
        <Attribute.OUT_OF_SYNC_CHANGES: 'outOfSyncChanges'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REFRESH_RESULT: 'refreshResult'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_FRIDGE_VACATION_MODE: 'samsungce.fridgeVacationMode'>: dict({
        <Attribute.VACATION_MODE: 'vacationMode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_POWER_COOL: 'samsungce.powerCool'>: dict({
        <Attribute.ACTIVATED: 'activated'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 497000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
      }),
      <Capability.SAMSUNG_CE_POWER_FREEZE: 'samsungce.powerFreeze'>: dict({
        <Attribute.ACTIVATED: 'activated'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 497000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
      }),
      <Capability.SAMSUNG_CE_QUICK_CONTROL: 'samsungce.quickControl'>: dict({
        <Attribute.VERSION: 'version'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 1, 848000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '1.0',
        }),
      }),
      <Capability.SAMSUNG_CE_RUNESTONE_HOME_CONTEXT: 'samsungce.runestoneHomeContext'>: dict({
        <Attribute.SUPPORTED_CONTEXTS: 'supportedContexts'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 2, 150000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "[{'context': 'HOME_IN', 'place': 'HOME', 'startTime': '99:99', 'endTime': '99:99'}, {'context': 'ASLEEP', 'place': 'HOME', 'startTime': '99:99', 'endTime': '99:99'}, {'context': 'AWAKE', 'place': 'HOME', 'startTime': '99:99', 'endTime': '99:99'}, {'context': 'COOKING', 'place': 'HOME', 'startTime': '99:99', 'endTime': '99:99'}, {'context': 'FINISH_COOKING', 'place': 'HOME', 'startTime': '99:99', 'endTime': '99:99'}, {'context': 'EATING', 'place': 'HOME', 'startTime': '99:99', 'endTime': '99:99'}, {'context': 'FINISH_EATING', 'place': 'HOME', 'startTime': '99:99', 'endTime': '99:99'}, {'context': 'DOING_LAUNDRY', 'place': 'HOME', 'startTime': '99:99', 'endTime': '99:99'}, {'context': 'FINISH_DOING_LAUNDRY', 'place': 'HOME', 'startTime': '99:99', 'endTime': '99:99'}, {'context': 'CLEANING_HOUSE', 'place': 'HOME', 'startTime': '99:99', 'endTime': '99:99'}, {'context': 'FINISH_CLEANING_HOUSE', 'place': 'HOME', 'startTime': '99:99', 'endTime': '99:99'}, {'context': 'MUSIC_LISTENING', 'place': 'HOME', 'startTime': '99:99', 'endTime': '99:99'}, {'context': 'FINISH_MUSIC_LISTENING', 'place': 'HOME', 'startTime': '99:99', 'endTime': '99:99'}, {'context': 'AIR_CONDITIONING', 'place': 'HOME', 'startTime': '99:99', 'endTime': '99:99'}, {'context': 'FINISH_AIR_CONDITIONING', 'place': 'HOME', 'startTime': '99:99', 'endTime': '99:99'}, {'context': 'WASHING_DISHES', 'place': 'HOME', 'startTime': '99:99', 'endTime': '99:99'}, {'context': 'FINISH_WASHING_DISHES', 'place': 'HOME', 'startTime': '99:99', 'endTime': '99:99'}, {'context': 'CARING_CLOTHING', 'place': 'HOME', 'startTime': '99:99', 'endTime': '99:99'}, {'context': 'FINISH_CARING_CLOTHING', 'place': 'HOME', 'startTime': '99:99', 'endTime': '99:99'}, {'context': 'WATCHING_TV', 'place': 'HOME', 'startTime': '99:99', 'endTime': '99:99'}, {'context': 'FINISH_WATCHING_TV', 'place': 'HOME', 'startTime': '99:99', 'endTime': '99:99'}, {'context': 'BEFORE_BEDTIME', 'place': 'HOME', 'startTime': '99:99', 'endTime': '99:99'}, {'context': 'BEFORE_COOKING', 'place': 'HOME', 'startTime': '99:99', 'endTime': '99:99'}, {'context': 'BEFORE_HOME_OUT', 'place': 'HOME', 'startTime': '99:99', 'endTime': '99:99'}, {'context': 'ORDERING_DELIVERY_FOOD', 'place': 'HOME', 'startTime': '99:99', 'endTime': '99:99'}, {'context': 'FINISH_ORDERING_DELIVERY_FOOD', 'place': 'HOME', 'startTime': '99:99', 'endTime': '99:99'}, {'context': 'ONLINE_GROCERY_SHOPPING', 'place': 'HOME', 'startTime': '99:99', 'endTime': '99:99'}, {'context': 'FINISH_ONLINE_GROCERY_SHOPPING', 'place': 'HOME', 'startTime': '99:99', 'endTime': '99:99'}]",
        }),
      }),
      <Capability.SAMSUNG_CE_SABBATH_MODE: 'samsungce.sabbathMode'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_ACTIONS: 'supportedActions'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>: dict({
        <Attribute.AVAILABLE_MODULES: 'availableModules'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 523000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[]',
        }),
        <Attribute.LAST_UPDATED_DATE: 'lastUpdatedDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEW_VERSION_AVAILABLE: 'newVersionAvailable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 200000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OTN_D_U_I_D: 'otnDUID'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 523000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2DCEZFTFQZPMO',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TARGET_MODULE: 'targetModule'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 200000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
          }),
        }),
      }),
      <Capability.SAMSUNG_CE_VIEW_INSIDE: 'samsungce.viewInside'>: dict({
        <Attribute.CONTENTS: 'contents'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 20, 16, 7, 5, 423000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "[{'fileId': 'd3e1f875-f8b3-a031-737b-366eaa227773', 'mimeType': 'image/jpeg', 'expiredTime': '2025-01-20T16:17:04Z', 'focusArea': 'mainShelves'}, {'fileId': '9fccb6b4-e71f-6c7f-9935-f6082bb6ccfe', 'mimeType': 'image/jpeg', 'expiredTime': '2025-01-20T16:17:04Z', 'focusArea': 'mainShelves'}, {'fileId': '20b57a4d-b7fc-17fc-3a03-0fb84fb4efab', 'mimeType': 'image/jpeg', 'expiredTime': '2025-01-20T16:17:05Z', 'focusArea': 'mainShelves'}]",
        }),
        <Attribute.LAST_UPDATED_TIME: 'lastUpdatedTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 12, 1, 52, 585000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2025-02-07T12:01:52Z',
        }),
        <Attribute.SUPPORTED_FOCUS_AREAS: 'supportedFocusAreas'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 946000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['mainShelves']",
        }),
      }),
      <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>: dict({
        <Attribute.DUMP_TYPE: 'dumpType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 523000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'file',
        }),
        <Attribute.ENDPOINT: 'endpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 523000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'SSM',
        }),
        <Attribute.LOG_TYPE: 'logType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 523000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['errCode', 'dump']",
        }),
        <Attribute.MIN_VERSION: 'minVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 523000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '1.0',
        }),
        <Attribute.MN_ID: 'mnId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 523000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '0AJT',
        }),
        <Attribute.PROTOCOL_TYPE: 'protocolType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 523000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'wifi_https',
        }),
        <Attribute.SETUP_ID: 'setupId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 0, 523000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '500',
        }),
        <Attribute.SIGNIN_PERMISSION: 'signinPermission'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TS_ID: 'tsId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>: dict({
        <Attribute.AUTO_RECONNECTION: 'autoReconnection'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 1, 951000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
        <Attribute.MIN_VERSION: 'minVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 1, 951000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '1.0',
        }),
        <Attribute.PROTOCOL_TYPE: 'protocolType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 1, 951000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['helper_hotspot']",
        }),
        <Attribute.SUPPORTED_AUTH_TYPE: 'supportedAuthType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 1, 951000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['OPEN', 'WEP', 'WPA-PSK', 'WPA2-PSK']",
        }),
        <Attribute.SUPPORTED_WI_FI_FREQ: 'supportedWiFiFreq'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 1, 19, 39, 1, 951000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['2.4G', '5G']",
        }),
      }),
      <Capability.TEMPERATURE_MEASUREMENT: 'temperatureMeasurement'>: dict({
        <Attribute.TEMPERATURE: 'temperature'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TEMPERATURE_RANGE: 'temperatureRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.THERMOSTAT_COOLING_SETPOINT: 'thermostatCoolingSetpoint'>: dict({
        <Attribute.COOLING_SETPOINT: 'coolingSetpoint'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.COOLING_SETPOINT_RANGE: 'coolingSetpointRange'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
    'pantry-01': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 7, 10, 54, 5, 580000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['samsungce.meatAging', 'samsungce.foodDefrost']",
        }),
      }),
      <Capability.SAMSUNG_CE_FOOD_DEFROST: 'samsungce.foodDefrost'>: dict({
        <Attribute.FOOD_TYPE: 'foodType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OPERATION_TIME: 'operationTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REMAINING_TIME: 'remainingTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_OPTIONS: 'supportedOptions'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WEIGHT: 'weight'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_FRIDGE_PANTRY_INFO: 'samsungce.fridgePantryInfo'>: dict({
        <Attribute.NAME: 'name'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_FRIDGE_PANTRY_MODE: 'samsungce.fridgePantryMode'>: dict({
        <Attribute.MODE: 'mode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_MODES: 'supportedModes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_MEAT_AGING: 'samsungce.meatAging'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_AGING_METHODS: 'supportedAgingMethods'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_MEAT_TYPES: 'supportedMeatTypes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ZONE_INFO: 'zoneInfo'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
    'scale-10': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 7, 10, 54, 5, 580000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[]',
        }),
      }),
      <Capability.SAMSUNG_CE_CONNECTION_STATE: 'samsungce.connectionState'>: dict({
        <Attribute.CONNECTION_STATE: 'connectionState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_SCALE_SETTINGS: 'samsungce.scaleSettings'>: dict({
        <Attribute.ENABLED: 'enabled'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WEIGHT_MEASUREMENT: 'samsungce.weightMeasurement'>: dict({
        <Attribute.WEIGHT: 'weight'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WEIGHT_MEASUREMENT_CALIBRATION: 'samsungce.weightMeasurementCalibration'>: dict({
      }),
    }),
    'scale-11': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 2, 7, 10, 54, 5, 580000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[]',
        }),
      }),
      <Capability.SAMSUNG_CE_WEIGHT_MEASUREMENT: 'samsungce.weightMeasurement'>: dict({
        <Attribute.WEIGHT: 'weight'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[da_rvc_normal_000001]
  dict({
    'main': dict({
      <Capability.BATTERY: 'battery'>: dict({
        <Attribute.BATTERY: 'battery'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 9, 9, 22, 55, 13, 962000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 100,
        }),
        <Attribute.QUANTITY: 'quantity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TYPE: 'type'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 9, 8, 1, 3, 48, 820000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['samsungce.robotCleanerMapAreaInfo', 'samsungce.robotCleanerMapCleaningInfo', 'samsungce.robotCleanerPatrol', 'samsungce.robotCleanerPetMonitoring', 'samsungce.robotCleanerPetMonitoringReport', 'samsungce.robotCleanerPetCleaningSchedule', 'soundDetection', 'samsungce.soundDetectionSensitivity', 'samsungce.musicPlaylist', 'mediaPlayback', 'mediaTrackControl', 'imageCapture', 'videoCapture', 'audioVolume', 'audioMute', 'audioNotification', 'powerConsumptionReport', 'custom.hepaFilter', 'samsungce.robotCleanerMotorFilter', 'samsungce.robotCleanerRelayCleaning', 'audioTrackAddressing', 'samsungce.robotCleanerWelcome']",
        }),
      }),
      <Capability.CUSTOM_DISABLED_COMPONENTS: 'custom.disabledComponents'>: dict({
        <Attribute.DISABLED_COMPONENTS: 'disabledComponents'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 11, 3, 4, 43, 7, 114000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['station']",
        }),
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': dict({
            'href': '/alarms/vs/0',
          }),
          'timestamp': datetime.datetime(2023, 6, 18, 15, 59, 28, 267000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'payload': dict({
              'if': list([
                'oic.if.baseline',
                'oic.if.a',
              ]),
              'rt': list([
                'x.com.samsung.da.alarms',
              ]),
              'x.com.samsung.da.items': list([
                dict({
                  'x.com.samsung.da.alarmType': 'Device',
                  'x.com.samsung.da.code': '4',
                  'x.com.samsung.da.state': 'deleted',
                  'x.com.samsung.da.triggeredTime': '2023-06-18T15:59:30',
                }),
              ]),
            }),
          }),
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2019, 7, 7, 19, 45, 19, 771000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '3442dfc6-17c0-a65f-dae0-4c6e01786f44',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 12, 23, 7, 9, 40, 610000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'res.1.1.0,sh.1.1.0',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2019, 7, 7, 19, 45, 19, 771000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 6, 3, 13, 34, 18, 508000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2019, 7, 7, 19, 45, 19, 771000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '1.0',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2019, 7, 7, 19, 45, 19, 771000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '1.0',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2019, 7, 7, 19, 45, 19, 771000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2019, 7, 7, 19, 45, 19, 771000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 9, 7, 6, 42, 36, 551000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'powerbot_7000_17M|50016055|80010404011141000100000000000000',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2019, 7, 7, 19, 45, 19, 771000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Tizen(3/0)',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2019, 7, 7, 19, 45, 19, 771000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '00',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 6, 3, 0, 49, 53, 813000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2019, 7, 7, 19, 45, 19, 771000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[robot vacuum] Samsung',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2019, 7, 7, 19, 45, 19, 771000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '3442dfc6-17c0-a65f-dae0-4c6e01786f44',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 6, 2, 23, 30, 52, 793000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2019, 7, 7, 19, 45, 19, 771000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA-RVC-NORMAL-000001',
        }),
      }),
      <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>: dict({
        <Attribute.POWER_CONSUMPTION: 'powerConsumption'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 11, 3, 4, 43, 7, 92000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.ROBOT_CLEANER_CLEANING_MODE: 'robotCleanerCleaningMode'>: dict({
        <Attribute.ROBOT_CLEANER_CLEANING_MODE: 'robotCleanerCleaningMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 9, 9, 21, 25, 20, 601000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'stop',
        }),
      }),
      <Capability.ROBOT_CLEANER_MOVEMENT: 'robotCleanerMovement'>: dict({
        <Attribute.ROBOT_CLEANER_MOVEMENT: 'robotCleanerMovement'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 6, 18, 15, 59, 24, 580000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'idle',
        }),
      }),
      <Capability.ROBOT_CLEANER_TURBO_MODE: 'robotCleanerTurboMode'>: dict({
        <Attribute.ROBOT_CLEANER_TURBO_MODE: 'robotCleanerTurboMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 9, 8, 2, 53, 49, 826000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>: dict({
        <Attribute.BINARY_ID: 'binaryId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DESCRIPTION: 'description'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MICOM_ASSAY_CODE: 'micomAssayCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_CLASSIFICATION_CODE: 'modelClassificationCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_NAME: 'modelName'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RELEASE_YEAR: 'releaseYear'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER: 'serialNumber'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER_EXTRA: 'serialNumberExtra'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>: dict({
        <Attribute.VERSION_NUMBER: 'versionNumber'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 11, 1, 9, 26, 7, 107000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 22100101,
        }),
      }),
      <Capability.SAMSUNG_CE_ROBOT_CLEANER_CLEANING_MODE: 'samsungce.robotCleanerCleaningMode'>: dict({
        <Attribute.CLEANING_MODE: 'cleaningMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 9, 9, 21, 25, 20, 601000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'stop',
        }),
        <Attribute.REPEAT_MODE_ENABLED: 'repeatModeEnabled'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 12, 21, 1, 32, 56, 245000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.SUPPORT_REPEAT_MODE: 'supportRepeatMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 11, 3, 4, 43, 6, 547000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
        <Attribute.SUPPORTED_CLEANING_MODE: 'supportedCleaningMode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 11, 3, 4, 43, 6, 547000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['auto', 'spot', 'manual', 'stop']",
        }),
      }),
      <Capability.SAMSUNG_CE_ROBOT_CLEANER_OPERATING_STATE: 'samsungce.robotCleanerOperatingState'>: dict({
        <Attribute.CLEANING_STEP: 'cleaningStep'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.HOMING_REASON: 'homingReason'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 11, 3, 4, 43, 22, 926000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
        <Attribute.IS_MAP_BASED_OPERATION_AVAILABLE: 'isMapBasedOperationAvailable'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 6, 18, 15, 59, 24, 580000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'idle',
        }),
        <Attribute.SUPPORTED_OPERATING_STATE: 'supportedOperatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2020, 11, 3, 4, 43, 6, 547000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['homing', 'error', 'idle', 'charging', 'chargingForRemainingJob', 'paused', 'cleaning']",
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>: dict({
        <Attribute.AVAILABLE_MODULES: 'availableModules'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LAST_UPDATED_DATE: 'lastUpdatedDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEW_VERSION_AVAILABLE: 'newVersionAvailable'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OTN_D_U_I_D: 'otnDUID'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TARGET_MODULE: 'targetModule'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 6, 18, 15, 59, 27, 658000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[da_wm_dw_00001]
  dict({
    'main': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 19, 29, 32, 447000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['samsungce.waterConsumptionReport', 'sec.wifiConfiguration', 'samsungce.quickControl', 'samsungce.deviceInfoPrivate', 'demandResponseLoadControl', 'sec.diagnosticsInformation', 'custom.waterFilter']",
        }),
      }),
      <Capability.CUSTOM_DISHWASHER_DELAY_START_TIME: 'custom.dishwasherDelayStartTime'>: dict({
        <Attribute.DISHWASHER_DELAY_START_TIME: 'dishwasherDelayStartTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 0, 37, 482000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '00:00:00',
        }),
      }),
      <Capability.CUSTOM_DISHWASHER_OPERATING_PERCENTAGE: 'custom.dishwasherOperatingPercentage'>: dict({
        <Attribute.DISHWASHER_OPERATING_PERCENTAGE: 'dishwasherOperatingPercentage'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 20, 21, 26, 452000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 1,
        }),
      }),
      <Capability.CUSTOM_DISHWASHER_OPERATING_PROGRESS: 'custom.dishwasherOperatingProgress'>: dict({
        <Attribute.DISHWASHER_OPERATING_PROGRESS: 'dishwasherOperatingProgress'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 20, 21, 26, 452000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
      }),
      <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>: dict({
        <Attribute.DR_MAX_DURATION: 'drMaxDuration'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_INFO: 'energySavingInfo'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_LEVEL: 'energySavingLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_OPERATION: 'energySavingOperation'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_OPERATION_SUPPORT: 'energySavingOperationSupport'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_SUPPORT: 'energySavingSupport'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 10, 1, 0, 8, 9, 813000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'True',
        }),
        <Attribute.ENERGY_TYPE: 'energyType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 8, 25, 3, 23, 6, 667000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2.0',
        }),
        <Attribute.NOTIFICATION_TEMPLATE_I_D: 'notificationTemplateID'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_ENERGY_SAVING_LEVELS: 'supportedEnergySavingLevels'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_SUPPORTED_OPTIONS: 'custom.supportedOptions'>: dict({
        <Attribute.COURSE: 'course'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REFERENCE_TABLE: 'referenceTable'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_COURSES: 'supportedCourses'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 0, 37, 194000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['82', '83', '84', '85', '86', '87', '88']",
        }),
      }),
      <Capability.CUSTOM_WATER_FILTER: 'custom.waterFilter'>: dict({
        <Attribute.WATER_FILTER_CAPACITY: 'waterFilterCapacity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WATER_FILTER_LAST_RESET_DATE: 'waterFilterLastResetDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WATER_FILTER_RESET_TYPE: 'waterFilterResetType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WATER_FILTER_STATUS: 'waterFilterStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WATER_FILTER_USAGE: 'waterFilterUsage'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WATER_FILTER_USAGE_STEP: 'waterFilterUsageStep'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>: dict({
        <Attribute.DEMAND_RESPONSE_LOAD_CONTROL_STATUS: 'drlcStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.DISHWASHER_OPERATING_STATE: 'dishwasherOperatingState'>: dict({
        <Attribute.COMPLETION_TIME: 'completionTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 20, 21, 26, 452000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2025-02-08T22:49:26Z',
        }),
        <Attribute.DISHWASHER_JOB_STATE: 'dishwasherJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 20, 21, 26, 452000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'unknown',
        }),
        <Attribute.MACHINE_STATE: 'machineState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 20, 21, 26, 452000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'stop',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_MACHINE_STATES: 'supportedMachineStates'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 10, 10, 21, 2, 853000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['stop', 'run', 'pause']",
        }),
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': dict({
            'href': '/operational/state/0',
          }),
          'timestamp': datetime.datetime(2023, 7, 19, 4, 23, 15, 606000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'payload': dict({
              'currentJobState': 'None',
              'currentMachineState': 'idle',
              'if': list([
                'oic.if.baseline',
                'oic.if.a',
              ]),
              'jobStates': list([
                'None',
                'Predrain',
                'Prewash',
                'Wash',
                'Rinse',
                'Drying',
                'Finish',
              ]),
              'machineStates': list([
                'pause',
                'active',
                'idle',
              ]),
              'progressPercentage': '1',
              'remainingTime': '02:16:00',
              'rt': list([
                'oic.r.operational.state',
              ]),
            }),
          }),
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 27, 1, 19, 37, 615000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'f36dc7ce-cac0-0667-dc14-a3704eb5e676',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 7, 4, 13, 53, 32, 32000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'res.1.1.0,sh.1.1.0',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 27, 1, 19, 37, 615000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 11, 2, 15, 58, 55, 699000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_DW_A51_20_COMMON_30230714',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 27, 1, 19, 37, 615000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ARTIK051',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 27, 1, 19, 37, 615000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 27, 1, 19, 37, 615000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 27, 1, 19, 37, 615000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_DW_A51_20_COMMON|30007242|40010201001311000101000000000000',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 27, 1, 19, 37, 615000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TizenRT 1.0 + IPv6',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 27, 1, 19, 37, 615000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DAWIT 2.0',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 27, 1, 19, 37, 615000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 27, 1, 19, 37, 615000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[dishwasher] Samsung',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 27, 1, 19, 37, 615000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'f36dc7ce-cac0-0667-dc14-a3704eb5e676',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 27, 1, 19, 37, 615000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA-WM-DW-000001',
        }),
      }),
      <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>: dict({
        <Attribute.POWER_CONSUMPTION: 'powerConsumption'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 20, 21, 26, 596000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'deltaEnergy': 0,
            'end': '2025-02-08T20:21:26Z',
            'energy': 101600,
            'energySaved': 0,
            'persistedEnergy': 0,
            'persistedSavedEnergy': 0,
            'power': 0,
            'powerEnergy': 0.0,
            'start': '2025-02-08T20:21:21Z',
          }),
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>: dict({
        <Attribute.REMOTE_CONTROL_ENABLED: 'remoteControlEnabled'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 0, 37, 555000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'false',
        }),
      }),
      <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>: dict({
        <Attribute.BINARY_ID: 'binaryId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 19, 29, 30, 987000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_DW_A51_20_COMMON',
        }),
        <Attribute.DESCRIPTION: 'description'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MICOM_ASSAY_CODE: 'micomAssayCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_CLASSIFICATION_CODE: 'modelClassificationCode'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MODEL_NAME: 'modelName'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RELEASE_YEAR: 'releaseYear'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER: 'serialNumber'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER_EXTRA: 'serialNumberExtra'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_DISHWASHER_JOB_STATE: 'samsungce.dishwasherJobState'>: dict({
        <Attribute.DISHWASHER_JOB_STATE: 'dishwasherJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 20, 21, 26, 452000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
        <Attribute.SCHEDULED_JOBS: 'scheduledJobs'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 20, 21, 26, 928000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "[{'jobName': 'washing', 'timeInSec': 3600}, {'jobName': 'rinsing', 'timeInSec': 1020}, {'jobName': 'drying', 'timeInSec': 1200}]",
        }),
      }),
      <Capability.SAMSUNG_CE_DISHWASHER_OPERATION: 'samsungce.dishwasherOperation'>: dict({
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 20, 21, 26, 452000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.OPERATION_TIME: 'operationTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.PROGRESS_PERCENTAGE: 'progressPercentage'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 20, 21, 26, 452000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 1,
        }),
        <Attribute.REMAINING_TIME: 'remainingTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 20, 21, 26, 452000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 148.0,
        }),
        <Attribute.REMAINING_TIME_STR: 'remainingTimeStr'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 20, 21, 26, 452000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '02:28',
        }),
        <Attribute.RESERVABLE: 'reservable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 0, 37, 194000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.SUPPORTED_OPERATING_STATE: 'supportedOperatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 9, 10, 10, 21, 2, 853000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['ready', 'running', 'paused']",
        }),
        <Attribute.TIME_LEFT_TO_START: 'timeLeftToStart'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 0, 37, 482000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 0.0,
        }),
      }),
      <Capability.SAMSUNG_CE_DISHWASHER_WASHING_COURSE: 'samsungce.dishwasherWashingCourse'>: dict({
        <Attribute.CUSTOM_COURSE_CANDIDATES: 'customCourseCandidates'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_COURSES: 'supportedCourses'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 0, 37, 194000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['auto', 'normal', 'heavy', 'delicate', 'express', 'rinseOnly', 'selfClean']",
        }),
        <Attribute.WASHING_COURSE: 'washingCourse'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 20, 21, 26, 497000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'normal',
        }),
      }),
      <Capability.SAMSUNG_CE_DISHWASHER_WASHING_COURSE_DETAILS: 'samsungce.dishwasherWashingCourseDetails'>: dict({
        <Attribute.ENERGY_USAGE_MAX: 'energyUsageMax'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 0, 37, 194000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 5,
        }),
        <Attribute.PREDEFINED_COURSES: 'predefinedCourses'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 0, 37, 194000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "[{'courseName': 'auto', 'energyUsage': 3, 'waterUsage': 3, 'temperature': {'min': 50, 'max': 60, 'unit': 'C'}, 'expectedTime': {'time': 136, 'unit': 'min'}, 'options': {'highTempWash': {'default': False, 'settable': [False, True]}, 'sanitize': {'default': False, 'settable': [False, True]}, 'speedBooster': {'default': False, 'settable': [False, True]}, 'zoneBooster': {'default': 'none', 'settable': ['none', 'left']}, 'selectedZone': {'default': 'all', 'settable': ['none', 'lower', 'all']}}}, {'courseName': 'normal', 'energyUsage': 3, 'waterUsage': 4, 'temperature': {'min': 45, 'max': 62, 'unit': 'C'}, 'expectedTime': {'time': 148, 'unit': 'min'}, 'options': {'highTempWash': {'default': False, 'settable': [False, True]}, 'sanitize': {'default': False, 'settable': [False, True]}, 'speedBooster': {'default': False, 'settable': [False, True]}, 'zoneBooster': {'default': 'none', 'settable': ['none', 'left']}, 'selectedZone': {'default': 'all', 'settable': ['none', 'lower', 'all']}}}, {'courseName': 'heavy', 'energyUsage': 4, 'waterUsage': 5, 'temperature': {'min': 65, 'max': 65, 'unit': 'C'}, 'expectedTime': {'time': 155, 'unit': 'min'}, 'options': {'highTempWash': {'default': False, 'settable': [False, True]}, 'sanitize': {'default': False, 'settable': [False, True]}, 'speedBooster': {'default': False, 'settable': [False, True]}, 'zoneBooster': {'default': 'none', 'settable': ['none', 'left']}, 'selectedZone': {'default': 'all', 'settable': ['none', 'lower', 'all']}}}, {'courseName': 'delicate', 'energyUsage': 2, 'waterUsage': 3, 'temperature': {'min': 50, 'max': 50, 'unit': 'C'}, 'expectedTime': {'time': 112, 'unit': 'min'}, 'options': {'highTempWash': {'default': False, 'settable': []}, 'sanitize': {'default': False, 'settable': []}, 'speedBooster': {'default': False, 'settable': [False, True]}, 'zoneBooster': {'default': 'none', 'settable': []}, 'selectedZone': {'default': 'all', 'settable': ['none', 'lower', 'all']}}}, {'courseName': 'express', 'energyUsage': 2, 'waterUsage': 2, 'temperature': {'min': 52, 'max': 52, 'unit': 'C'}, 'expectedTime': {'time': 60, 'unit': 'min'}, 'options': {'highTempWash': {'default': False, 'settable': [False, True]}, 'sanitize': {'default': False, 'settable': [False, True]}, 'speedBooster': {'default': False, 'settable': []}, 'zoneBooster': {'default': 'none', 'settable': ['none', 'left']}, 'selectedZone': {'default': 'all', 'settable': ['none', 'lower', 'all']}}}, {'courseName': 'rinseOnly', 'energyUsage': 1, 'waterUsage': 1, 'temperature': {'min': 40, 'max': 40, 'unit': 'C'}, 'expectedTime': {'time': 14, 'unit': 'min'}, 'options': {'highTempWash': {'default': False, 'settable': []}, 'sanitize': {'default': False, 'settable': []}, 'speedBooster': {'default': False, 'settable': []}, 'zoneBooster': {'default': 'none', 'settable': []}, 'selectedZone': {'default': 'all', 'settable': ['none', 'lower', 'all']}}}, {'courseName': 'selfClean', 'energyUsage': 5, 'waterUsage': 4, 'temperature': {'min': 70, 'max': 70, 'unit': 'C'}, 'expectedTime': {'time': 139, 'unit': 'min'}, 'options': {'highTempWash': {'default': False, 'settable': []}, 'sanitize': {'default': False, 'settable': []}, 'speedBooster': {'default': False, 'settable': []}, 'zoneBooster': {'default': 'none', 'settable': []}, 'selectedZone': {'default': 'all', 'settable': ['none', 'all']}}}]",
        }),
        <Attribute.WATER_USAGE_MAX: 'waterUsageMax'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 0, 37, 194000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 5,
        }),
      }),
      <Capability.SAMSUNG_CE_DISHWASHER_WASHING_OPTIONS: 'samsungce.dishwasherWashingOptions'>: dict({
        <Attribute.ADD_RINSE: 'addRinse'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DRY_PLUS: 'dryPlus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.HEATED_DRY: 'heatedDry'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.HIGH_TEMP_WASH: 'highTempWash'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 7, 39, 54, 739000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'settable': list([
              False,
              True,
            ]),
            'value': False,
          }),
        }),
        <Attribute.HOT_AIR_DRY: 'hotAirDry'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RINSE_PLUS: 'rinsePlus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SANITIZE: 'sanitize'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 18, 23, 49, 9, 964000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'settable': list([
              False,
              True,
            ]),
            'value': False,
          }),
        }),
        <Attribute.SANITIZING_WASH: 'sanitizingWash'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SELECTED_ZONE: 'selectedZone'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 11, 9, 0, 20, 42, 461000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'settable': list([
              'none',
              'upper',
              'lower',
              'all',
            ]),
            'value': 'all',
          }),
        }),
        <Attribute.SPEED_BOOSTER: 'speedBooster'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2023, 11, 24, 14, 46, 55, 375000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'settable': list([
              False,
              True,
            ]),
            'value': False,
          }),
        }),
        <Attribute.STEAM_SOAK: 'steamSoak'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.STORM_WASH: 'stormWash'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_LIST: 'supportedList'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 27, 1, 19, 38, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['selectedZone', 'zoneBooster', 'speedBooster', 'sanitize', 'highTempWash']",
        }),
        <Attribute.ZONE_BOOSTER: 'zoneBooster'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 11, 20, 7, 10, 27, 445000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'settable': list([
              'none',
              'left',
              'right',
              'all',
            ]),
            'value': 'none',
          }),
        }),
      }),
      <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>: dict({
        <Attribute.VERSION_NUMBER: 'versionNumber'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 7, 2, 2, 56, 22, 508000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 24040105,
        }),
      }),
      <Capability.SAMSUNG_CE_KIDS_LOCK: 'samsungce.kidsLock'>: dict({
        <Attribute.LOCK_STATE: 'lockState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 0, 37, 450000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'unlocked',
        }),
      }),
      <Capability.SAMSUNG_CE_QUICK_CONTROL: 'samsungce.quickControl'>: dict({
        <Attribute.VERSION: 'version'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>: dict({
        <Attribute.AVAILABLE_MODULES: 'availableModules'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 7, 20, 3, 37, 30, 706000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[]',
        }),
        <Attribute.LAST_UPDATED_DATE: 'lastUpdatedDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEW_VERSION_AVAILABLE: 'newVersionAvailable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 0, 37, 538000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OTN_D_U_I_D: 'otnDUID'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 0, 37, 538000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'MTCNQWBWIV6TS',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TARGET_MODULE: 'targetModule'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WATER_CONSUMPTION_REPORT: 'samsungce.waterConsumptionReport'>: dict({
        <Attribute.WATER_CONSUMPTION: 'waterConsumption'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>: dict({
        <Attribute.DUMP_TYPE: 'dumpType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENDPOINT: 'endpoint'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LOG_TYPE: 'logType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MIN_VERSION: 'minVersion'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MN_ID: 'mnId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.PROTOCOL_TYPE: 'protocolType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SETUP_ID: 'setupId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SIGNIN_PERMISSION: 'signinPermission'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TS_ID: 'tsId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>: dict({
        <Attribute.AUTO_RECONNECTION: 'autoReconnection'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MIN_VERSION: 'minVersion'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.PROTOCOL_TYPE: 'protocolType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_AUTH_TYPE: 'supportedAuthType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_WI_FI_FREQ: 'supportedWiFiFreq'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 20, 21, 26, 386000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[da_wm_wd_00001]
  dict({
    'hca.main': dict({
      <Capability.HCA_DRYER_MODE: 'hca.dryerMode'>: dict({
        <Attribute.MODE: 'mode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 11, 23000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'normal',
        }),
        <Attribute.SUPPORTED_MODES: 'supportedModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 497000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['normal', 'timeDry', 'quickDry']",
        }),
      }),
    }),
    'main': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 7, 5, 16, 4, 6, 674000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['samsungce.dryerCyclePreset', 'samsungce.welcomeMessage', 'samsungce.dongleSoftwareInstallation', 'sec.wifiConfiguration', 'samsungce.quickControl', 'samsungce.deviceInfoPrivate', 'demandResponseLoadControl', 'samsungce.dryerFreezePrevent', 'sec.diagnosticsInformation']",
        }),
      }),
      <Capability.CUSTOM_DRYER_DRY_LEVEL: 'custom.dryerDryLevel'>: dict({
        <Attribute.DRYER_DRY_LEVEL: 'dryerDryLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 840000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'normal',
        }),
        <Attribute.SUPPORTED_DRYER_DRY_LEVEL: 'supportedDryerDryLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 1, 22, 54, 28, 224000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['none', 'damp', 'less', 'normal', 'more', 'very']",
        }),
      }),
      <Capability.CUSTOM_DRYER_WRINKLE_PREVENT: 'custom.dryerWrinklePrevent'>: dict({
        <Attribute.DRYER_WRINKLE_PREVENT: 'dryerWrinklePrevent'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 840000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 497000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
      }),
      <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>: dict({
        <Attribute.DR_MAX_DURATION: 'drMaxDuration'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_INFO: 'energySavingInfo'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_LEVEL: 'energySavingLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_OPERATION: 'energySavingOperation'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_OPERATION_SUPPORT: 'energySavingOperationSupport'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_SUPPORT: 'energySavingSupport'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 6, 14, 6, 49, 2, 721000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.ENERGY_TYPE: 'energyType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 6, 14, 6, 49, 2, 183000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2.0',
        }),
        <Attribute.NOTIFICATION_TEMPLATE_I_D: 'notificationTemplateID'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_ENERGY_SAVING_LEVELS: 'supportedEnergySavingLevels'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_JOB_BEGINNING_STATUS: 'custom.jobBeginningStatus'>: dict({
        <Attribute.JOB_BEGINNING_STATUS: 'jobBeginningStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_SUPPORTED_OPTIONS: 'custom.supportedOptions'>: dict({
        <Attribute.COURSE: 'course'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REFERENCE_TABLE: 'referenceTable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 11, 23000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'id': 'Table_00',
          }),
        }),
        <Attribute.SUPPORTED_COURSES: 'supportedCourses'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 497000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['01', '9C', 'A5', '9E', '9B', '27', 'E5', 'A0', 'A4', 'A6', 'A3', 'A2']",
        }),
      }),
      <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>: dict({
        <Attribute.DEMAND_RESPONSE_LOAD_CONTROL_STATUS: 'drlcStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.DRYER_OPERATING_STATE: 'dryerOperatingState'>: dict({
        <Attribute.COMPLETION_TIME: 'completionTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 962000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2025-02-08T19:25:10Z',
        }),
        <Attribute.DRYER_JOB_STATE: 'dryerJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 962000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
        <Attribute.MACHINE_STATE: 'machineState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 962000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'stop',
        }),
        <Attribute.SUPPORTED_MACHINE_STATES: 'supportedMachineStates'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 962000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['stop', 'run', 'pause']",
        }),
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': dict({
            'href': '/information/vs/0',
          }),
          'timestamp': datetime.datetime(2023, 8, 6, 22, 48, 43, 192000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'payload': dict({
              'if': list([
                'oic.if.baseline',
                'oic.if.a',
              ]),
              'rt': list([
                'x.com.samsung.da.information',
              ]),
              'x.com.samsung.da.description': 'DA_WM_A51_20_COMMON_DV6300R/DC92-02385A_0090',
              'x.com.samsung.da.items': list([
                dict({
                  'x.com.samsung.da.description': 'DA_WM_A51_20_COMMON|20233741|3000000100111100020B000000000000',
                  'x.com.samsung.da.id': '0',
                  'x.com.samsung.da.newVersionAvailable': '0',
                  'x.com.samsung.da.number': '02198A220728(E256)',
                  'x.com.samsung.da.type': 'Software',
                }),
                dict({
                  'x.com.samsung.da.description': 'DA_WM_A51_20_COMMON',
                  'x.com.samsung.da.id': '1',
                  'x.com.samsung.da.newVersionAvailable': '0',
                  'x.com.samsung.da.number': '18112816,20112625',
                  'x.com.samsung.da.type': 'Firmware',
                }),
              ]),
              'x.com.samsung.da.modelNum': 'DA_WM_A51_20_COMMON|20233741|3000000100111100020B000000000000',
              'x.com.samsung.da.otnDUID': '7XCDM6YAIRCGM',
              'x.com.samsung.da.serialNum': 'FFFFFFFFFFFFFFF',
            }),
          }),
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '02f7256e-8353-5bdd-547f-bd5b1647e01b',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'res.1.1.0,sh.1.1.0',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_WM_A51_20_COMMON_30230708',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ARTIK051',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_WM_A51_20_COMMON|20233741|3000000100111100020B000000000000',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TizenRT 1.0 + IPv6',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DAWIT 2.0',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[dryer] Samsung',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '02f7256e-8353-5bdd-547f-bd5b1647e01b',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 222000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA-WM-WD-000001',
        }),
      }),
      <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>: dict({
        <Attribute.POWER_CONSUMPTION: 'powerConsumption'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 11, 53000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'deltaEnergy': 0,
            'end': '2025-02-08T18:10:11Z',
            'energy': 4495500,
            'energySaved': 0,
            'persistedEnergy': 0,
            'power': 0,
            'powerEnergy': 0.0,
            'start': '2025-02-07T04:00:19Z',
          }),
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>: dict({
        <Attribute.REMOTE_CONTROL_ENABLED: 'remoteControlEnabled'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 970000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'false',
        }),
      }),
      <Capability.SAMSUNG_CE_DETERGENT_ORDER: 'samsungce.detergentOrder'>: dict({
        <Attribute.ALARM_ENABLED: 'alarmEnabled'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 497000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.ORDER_THRESHOLD: 'orderThreshold'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 497000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
      }),
      <Capability.SAMSUNG_CE_DETERGENT_STATE: 'samsungce.detergentState'>: dict({
        <Attribute.DETERGENT_TYPE: 'detergentType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 1, 22, 54, 28, 372000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
        <Attribute.DOSAGE: 'dosage'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 497000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.INITIAL_AMOUNT: 'initialAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 497000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.REMAINING_AMOUNT: 'remainingAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 497000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
      }),
      <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>: dict({
        <Attribute.BINARY_ID: 'binaryId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 11, 113000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_WM_A51_20_COMMON',
        }),
        <Attribute.DESCRIPTION: 'description'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 11, 113000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_WM_A51_20_COMMON_DV6300R/DC92-02385A_0090',
        }),
        <Attribute.MICOM_ASSAY_CODE: 'micomAssayCode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 11, 113000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '20233741',
        }),
        <Attribute.MODEL_CLASSIFICATION_CODE: 'modelClassificationCode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 11, 113000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '3000000100111100020B000000000000',
        }),
        <Attribute.MODEL_NAME: 'modelName'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RELEASE_YEAR: 'releaseYear'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER: 'serialNumber'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER_EXTRA: 'serialNumberExtra'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_DONGLE_SOFTWARE_INSTALLATION: 'samsungce.dongleSoftwareInstallation'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 6, 14, 6, 49, 2, 183000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'completed',
        }),
      }),
      <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>: dict({
        <Attribute.VERSION_NUMBER: 'versionNumber'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 3, 2, 59, 11, 115000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 24110101,
        }),
      }),
      <Capability.SAMSUNG_CE_DRYER_AUTO_CYCLE_LINK: 'samsungce.dryerAutoCycleLink'>: dict({
        <Attribute.DRYER_AUTO_CYCLE_LINK: 'dryerAutoCycleLink'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 11, 986000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'on',
        }),
      }),
      <Capability.SAMSUNG_CE_DRYER_CYCLE: 'samsungce.dryerCycle'>: dict({
        <Attribute.DRYER_CYCLE: 'dryerCycle'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 11, 23000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Table_00_Course_01',
        }),
        <Attribute.REFERENCE_TABLE: 'referenceTable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 11, 23000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'id': 'Table_00',
          }),
        }),
        <Attribute.SPECIALIZED_FUNCTION_CLASSIFICATION: 'specializedFunctionClassification'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 497000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 4,
        }),
        <Attribute.SUPPORTED_CYCLES: 'supportedCycles'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 884000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "[{'cycle': '01', 'supportedOptions': {'dryingLevel': {'raw': 'D33E', 'default': 'normal', 'options': ['damp', 'less', 'normal', 'more', 'very']}, 'dryingTemperature': {'raw': '8410', 'default': 'medium', 'options': ['medium']}}}, {'cycle': '9C', 'supportedOptions': {'dryingLevel': {'raw': 'D33E', 'default': 'normal', 'options': ['damp', 'less', 'normal', 'more', 'very']}, 'dryingTemperature': {'raw': '8520', 'default': 'high', 'options': ['high']}}}, {'cycle': 'A5', 'supportedOptions': {'dryingLevel': {'raw': 'D33E', 'default': 'normal', 'options': ['damp', 'less', 'normal', 'more', 'very']}, 'dryingTemperature': {'raw': '8520', 'default': 'high', 'options': ['high']}}}, {'cycle': '9E', 'supportedOptions': {'dryingLevel': {'raw': 'D33E', 'default': 'normal', 'options': ['damp', 'less', 'normal', 'more', 'very']}, 'dryingTemperature': {'raw': '8308', 'default': 'mediumLow', 'options': ['mediumLow']}}}, {'cycle': '9B', 'supportedOptions': {'dryingLevel': {'raw': 'D520', 'default': 'very', 'options': ['very']}, 'dryingTemperature': {'raw': '8520', 'default': 'high', 'options': ['high']}}}, {'cycle': '27', 'supportedOptions': {'dryingLevel': {'raw': 'D000', 'default': 'none', 'options': []}, 'dryingTemperature': {'raw': '8520', 'default': 'high', 'options': ['high']}}}, {'cycle': 'E5', 'supportedOptions': {'dryingLevel': {'raw': 'D000', 'default': 'none', 'options': []}, 'dryingTemperature': {'raw': '8000', 'default': 'none', 'options': []}}}, {'cycle': 'A0', 'supportedOptions': {'dryingLevel': {'raw': 'D000', 'default': 'none', 'options': []}, 'dryingTemperature': {'raw': '8000', 'default': 'none', 'options': []}}}, {'cycle': 'A4', 'supportedOptions': {'dryingLevel': {'raw': 'D000', 'default': 'none', 'options': []}, 'dryingTemperature': {'raw': '853E', 'default': 'high', 'options': ['extraLow', 'low', 'mediumLow', 'medium', 'high']}}}, {'cycle': 'A6', 'supportedOptions': {'dryingLevel': {'raw': 'D000', 'default': 'none', 'options': []}, 'dryingTemperature': {'raw': '8520', 'default': 'high', 'options': ['high']}}}, {'cycle': 'A3', 'supportedOptions': {'dryingLevel': {'raw': 'D308', 'default': 'normal', 'options': ['normal']}, 'dryingTemperature': {'raw': '8410', 'default': 'medium', 'options': ['medium']}}}, {'cycle': 'A2', 'supportedOptions': {'dryingLevel': {'raw': 'D33E', 'default': 'normal', 'options': ['damp', 'less', 'normal', 'more', 'very']}, 'dryingTemperature': {'raw': '8102', 'default': 'extraLow', 'options': ['extraLow']}}}]",
        }),
      }),
      <Capability.SAMSUNG_CE_DRYER_CYCLE_PRESET: 'samsungce.dryerCyclePreset'>: dict({
        <Attribute.MAX_NUMBER_OF_PRESETS: 'maxNumberOfPresets'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 990000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 10,
        }),
        <Attribute.PRESETS: 'presets'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_DRYER_DELAY_END: 'samsungce.dryerDelayEnd'>: dict({
        <Attribute.REMAINING_TIME: 'remainingTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 962000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 0,
        }),
      }),
      <Capability.SAMSUNG_CE_DRYER_DRYING_TEMPERATURE: 'samsungce.dryerDryingTemperature'>: dict({
        <Attribute.DRYING_TEMPERATURE: 'dryingTemperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 840000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'medium',
        }),
        <Attribute.SUPPORTED_DRYING_TEMPERATURE: 'supportedDryingTemperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 1, 4, 22, 52, 14, 884000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['none', 'extraLow', 'low', 'mediumLow', 'medium', 'high']",
        }),
      }),
      <Capability.SAMSUNG_CE_DRYER_DRYING_TIME: 'samsungce.dryerDryingTime'>: dict({
        <Attribute.DRYING_TIME: 'dryingTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 840000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': '0',
        }),
        <Attribute.SUPPORTED_DRYING_TIME: 'supportedDryingTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 1, 22, 54, 28, 224000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['0', '20', '30', '40', '50', '60']",
        }),
      }),
      <Capability.SAMSUNG_CE_DRYER_FREEZE_PREVENT: 'samsungce.dryerFreezePrevent'>: dict({
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_DRYER_OPERATING_STATE: 'samsungce.dryerOperatingState'>: dict({
        <Attribute.DRYER_JOB_STATE: 'dryerJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 4, 0, 18, 186000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 4, 0, 18, 186000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 4, 0, 18, 186000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 1,
        }),
        <Attribute.REMAINING_TIME: 'remainingTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 4, 0, 18, 186000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 75,
        }),
        <Attribute.REMAINING_TIME_STR: 'remainingTimeStr'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 4, 0, 18, 186000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '01:15',
        }),
        <Attribute.SCHEDULED_JOBS: 'scheduledJobs'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 497000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "[{'jobName': 'drying', 'timeInMin': 57}, {'jobName': 'cooling', 'timeInMin': 3}]",
        }),
        <Attribute.SUPPORTED_OPERATING_STATES: 'supportedOperatingStates'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 11, 1, 13, 43, 26, 961000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['ready', 'running', 'paused']",
        }),
      }),
      <Capability.SAMSUNG_CE_KIDS_LOCK: 'samsungce.kidsLock'>: dict({
        <Attribute.LOCK_STATE: 'lockState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 825000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'unlocked',
        }),
      }),
      <Capability.SAMSUNG_CE_QUICK_CONTROL: 'samsungce.quickControl'>: dict({
        <Attribute.VERSION: 'version'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>: dict({
        <Attribute.AVAILABLE_MODULES: 'availableModules'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 2, 0, 29, 53, 432000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[]',
        }),
        <Attribute.LAST_UPDATED_DATE: 'lastUpdatedDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEW_VERSION_AVAILABLE: 'newVersionAvailable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 2, 0, 29, 53, 432000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OTN_D_U_I_D: 'otnDUID'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 11, 113000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '7XCDM6YAIRCGM',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TARGET_MODULE: 'targetModule'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WELCOME_MESSAGE: 'samsungce.welcomeMessage'>: dict({
        <Attribute.WELCOME_MESSAGE: 'welcomeMessage'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>: dict({
        <Attribute.DUMP_TYPE: 'dumpType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENDPOINT: 'endpoint'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.LOG_TYPE: 'logType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MIN_VERSION: 'minVersion'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MN_ID: 'mnId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.PROTOCOL_TYPE: 'protocolType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SETUP_ID: 'setupId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SIGNIN_PERMISSION: 'signinPermission'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TS_ID: 'tsId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>: dict({
        <Attribute.AUTO_RECONNECTION: 'autoReconnection'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MIN_VERSION: 'minVersion'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.PROTOCOL_TYPE: 'protocolType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_AUTH_TYPE: 'supportedAuthType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_WI_FI_FREQ: 'supportedWiFiFreq'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 18, 10, 10, 911000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[da_wm_wm_000001]
  dict({
    'hca.main': dict({
      <Capability.HCA_WASHER_MODE: 'hca.washerMode'>: dict({
        <Attribute.MODE: 'mode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 623000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'normal',
        }),
        <Attribute.SUPPORTED_MODES: 'supportedModes'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 152000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['normal', 'quickWash']",
        }),
      }),
    }),
    'main': dict({
      <Capability.CUSTOM_DISABLED_CAPABILITIES: 'custom.disabledCapabilities'>: dict({
        <Attribute.DISABLED_CAPABILITIES: 'disabledCapabilities'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 7, 1, 16, 13, 35, 173000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['samsungce.autoDispenseDetergent', 'samsungce.autoDispenseSoftener', 'samsungce.waterConsumptionReport', 'samsungce.washerCyclePreset', 'samsungce.welcomeMessage', 'samsungce.dongleSoftwareInstallation', 'sec.wifiConfiguration', 'samsungce.quickControl', 'samsungce.deviceInfoPrivate', 'samsungce.energyPlanner', 'demandResponseLoadControl', 'samsungce.softenerAutoReplenishment', 'samsungce.softenerOrder', 'samsungce.softenerState', 'samsungce.washerBubbleSoak', 'samsungce.washerFreezePrevent', 'custom.dryerDryLevel', 'samsungce.washerWaterLevel', 'samsungce.washerWaterValve', 'samsungce.washerWashingTime', 'custom.washerAutoDetergent', 'custom.washerAutoSoftener']",
        }),
      }),
      <Capability.CUSTOM_DRYER_DRY_LEVEL: 'custom.dryerDryLevel'>: dict({
        <Attribute.DRYER_DRY_LEVEL: 'dryerDryLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_DRYER_DRY_LEVEL: 'supportedDryerDryLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_ENERGY_TYPE: 'custom.energyType'>: dict({
        <Attribute.DR_MAX_DURATION: 'drMaxDuration'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 6, 15, 14, 11, 37, 255000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 99999999,
        }),
        <Attribute.ENERGY_SAVING_INFO: 'energySavingInfo'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_LEVEL: 'energySavingLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_OPERATION: 'energySavingOperation'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ENERGY_SAVING_OPERATION_SUPPORT: 'energySavingOperationSupport'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 6, 15, 14, 11, 37, 255000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.ENERGY_SAVING_SUPPORT: 'energySavingSupport'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 6, 15, 14, 26, 38, 584000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.ENERGY_TYPE: 'energyType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 6, 15, 14, 11, 34, 909000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2.0',
        }),
        <Attribute.NOTIFICATION_TEMPLATE_I_D: 'notificationTemplateID'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_ENERGY_SAVING_LEVELS: 'supportedEnergySavingLevels'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_JOB_BEGINNING_STATUS: 'custom.jobBeginningStatus'>: dict({
        <Attribute.JOB_BEGINNING_STATUS: 'jobBeginningStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_SUPPORTED_OPTIONS: 'custom.supportedOptions'>: dict({
        <Attribute.COURSE: 'course'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REFERENCE_TABLE: 'referenceTable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 623000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'id': 'Table_00',
          }),
        }),
        <Attribute.SUPPORTED_COURSES: 'supportedCourses'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 152000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['01', '70', '55', '71', '72', '77', 'E5', '57', '73', '74', '75', '78']",
        }),
      }),
      <Capability.CUSTOM_WASHER_AUTO_DETERGENT: 'custom.washerAutoDetergent'>: dict({
        <Attribute.WASHER_AUTO_DETERGENT: 'washerAutoDetergent'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_WASHER_AUTO_SOFTENER: 'custom.washerAutoSoftener'>: dict({
        <Attribute.WASHER_AUTO_SOFTENER: 'washerAutoSoftener'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.CUSTOM_WASHER_RINSE_CYCLES: 'custom.washerRinseCycles'>: dict({
        <Attribute.SUPPORTED_WASHER_RINSE_CYCLES: 'supportedWasherRinseCycles'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 760000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['0', '1', '2', '3', '4', '5']",
        }),
        <Attribute.WASHER_RINSE_CYCLES: 'washerRinseCycles'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 691000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2',
        }),
      }),
      <Capability.CUSTOM_WASHER_SOIL_LEVEL: 'custom.washerSoilLevel'>: dict({
        <Attribute.SUPPORTED_WASHER_SOIL_LEVEL: 'supportedWasherSoilLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 760000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['none', 'extraLight', 'light', 'normal', 'heavy', 'extraHeavy']",
        }),
        <Attribute.WASHER_SOIL_LEVEL: 'washerSoilLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 691000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'normal',
        }),
      }),
      <Capability.CUSTOM_WASHER_SPIN_LEVEL: 'custom.washerSpinLevel'>: dict({
        <Attribute.SUPPORTED_WASHER_SPIN_LEVEL: 'supportedWasherSpinLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 760000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['rinseHold', 'noSpin', 'low', 'medium', 'high', 'extraHigh']",
        }),
        <Attribute.WASHER_SPIN_LEVEL: 'washerSpinLevel'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 691000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'high',
        }),
      }),
      <Capability.CUSTOM_WASHER_WATER_TEMPERATURE: 'custom.washerWaterTemperature'>: dict({
        <Attribute.SUPPORTED_WASHER_WATER_TEMPERATURE: 'supportedWasherWaterTemperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 760000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['none', 'tapCold', 'cold', 'warm', 'hot', 'extraHot']",
        }),
        <Attribute.WASHER_WATER_TEMPERATURE: 'washerWaterTemperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 691000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'warm',
        }),
      }),
      <Capability.DEMAND_RESPONSE_LOAD_CONTROL: 'demandResponseLoadControl'>: dict({
        <Attribute.DEMAND_RESPONSE_LOAD_CONTROL_STATUS: 'drlcStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.EXECUTE: 'execute'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': dict({
            'href': '/information/vs/0',
          }),
          'timestamp': datetime.datetime(2023, 8, 6, 16, 52, 15, 994000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'payload': dict({
              'if': list([
                'oic.if.baseline',
                'oic.if.a',
              ]),
              'rt': list([
                'x.com.samsung.da.information',
              ]),
              'x.com.samsung.da.description': 'DA_WM_TP2_20_COMMON_WF6300R/DC92-02338B_0080',
              'x.com.samsung.da.diagDumpType': 'file',
              'x.com.samsung.da.diagEndPoint': 'SSM',
              'x.com.samsung.da.diagLogType': list([
                'errCode',
                'dump',
              ]),
              'x.com.samsung.da.diagMinVersion': '1.0',
              'x.com.samsung.da.diagMnid': '0AJT',
              'x.com.samsung.da.diagProtocolType': 'WIFI_HTTPS',
              'x.com.samsung.da.diagSetupid': '210',
              'x.com.samsung.da.items': list([
                dict({
                  'x.com.samsung.da.description': 'DA_WM_TP2_20_COMMON|20233741|2001000100131100022B010000000000',
                  'x.com.samsung.da.id': '0',
                  'x.com.samsung.da.newVersionAvailable': '0',
                  'x.com.samsung.da.number': '02674A220725(F541)',
                  'x.com.samsung.da.type': 'Software',
                }),
                dict({
                  'x.com.samsung.da.description': 'DA_WM_TP2_20_COMMON',
                  'x.com.samsung.da.id': '1',
                  'x.com.samsung.da.newVersionAvailable': '0',
                  'x.com.samsung.da.number': '18112816,20050607',
                  'x.com.samsung.da.type': 'Firmware',
                }),
              ]),
              'x.com.samsung.da.modelNum': 'DA_WM_TP2_20_COMMON|20233741|2001000100131100022B010000000000',
              'x.com.samsung.da.otnDUID': 'U7CNQWBWJM5U4',
              'x.com.samsung.da.serialNum': '01FW57AR401623N',
            }),
          }),
        }),
      }),
      <Capability.OCF: 'ocf'>: dict({
        <Attribute.DEVICE_ID: 'di'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 131000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'f984b91d-f250-9d42-3436-33f09a422a47',
        }),
        <Attribute.DATA_MODEL_VERSION: 'dmv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 131000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'res.1.1.0,sh.1.1.0',
        }),
        <Attribute.SPEC_VERSION: 'icv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 131000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'core.1.1.0',
        }),
        <Attribute.MANUFACTURE_DATE: 'mndt'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.FIRMWARE_VERSION: 'mnfv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 131000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_WM_TP2_20_COMMON_30230804',
        }),
        <Attribute.HARDWARE_VERSION: 'mnhw'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 131000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'MediaTek',
        }),
        <Attribute.MANUFACTURER_DETAILS_LINK: 'mnml'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 131000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.MANUFACTURER_NAME: 'mnmn'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 131000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Samsung Electronics',
        }),
        <Attribute.MODEL_NUMBER: 'mnmo'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 131000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_WM_TP2_20_COMMON|20233741|2001000100131100022B010000000000',
        }),
        <Attribute.OS_VERSION: 'mnos'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 131000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'TizenRT 2.0 + IPv6',
        }),
        <Attribute.PLATFORM_VERSION: 'mnpv'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 131000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DAWIT 2.0',
        }),
        <Attribute.SUPPORT_LINK: 'mnsl'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 131000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'http://www.samsung.com',
        }),
        <Attribute.DEVICE_NAME: 'n'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 131000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[washer] Samsung',
        }),
        <Attribute.PLATFORM_ID: 'pi'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 131000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'f984b91d-f250-9d42-3436-33f09a422a47',
        }),
        <Attribute.SYSTEM_TIME: 'st'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.VENDOR_ID: 'vid'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 131000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA-WM-WM-000001',
        }),
      }),
      <Capability.POWER_CONSUMPTION_REPORT: 'powerConsumptionReport'>: dict({
        <Attribute.POWER_CONSUMPTION: 'powerConsumption'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 9, 45, 703000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'deltaEnergy': 0,
            'end': '2025-02-07T03:09:45Z',
            'energy': 352800,
            'energySaved': 0,
            'persistedEnergy': 0,
            'power': 0,
            'powerEnergy': 0.0,
            'start': '2025-02-07T03:09:24Z',
          }),
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.REMOTE_CONTROL_STATUS: 'remoteControlStatus'>: dict({
        <Attribute.REMOTE_CONTROL_ENABLED: 'remoteControlEnabled'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 634000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'false',
        }),
      }),
      <Capability.SAMSUNG_CE_AUTO_DISPENSE_DETERGENT: 'samsungce.autoDispenseDetergent'>: dict({
        <Attribute.AMOUNT: 'amount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.AVAILABLE_TYPES: 'availableTypes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DENSITY: 'density'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RECOMMENDED_AMOUNT: 'recommendedAmount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REMAINING_AMOUNT: 'remainingAmount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_AMOUNT: 'supportedAmount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_DENSITY: 'supportedDensity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TYPE: 'type'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_AUTO_DISPENSE_SOFTENER: 'samsungce.autoDispenseSoftener'>: dict({
        <Attribute.AMOUNT: 'amount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.DENSITY: 'density'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REMAINING_AMOUNT: 'remainingAmount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_AMOUNT: 'supportedAmount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_DENSITY: 'supportedDensity'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_DETERGENT_AUTO_REPLENISHMENT: 'samsungce.detergentAutoReplenishment'>: dict({
        <Attribute.BABY_DETERGENT_ALARM_ENABLED: 'babyDetergentAlarmEnabled'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.BABY_DETERGENT_DOSAGE: 'babyDetergentDosage'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.BABY_DETERGENT_INITIAL_AMOUNT: 'babyDetergentInitialAmount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.BABY_DETERGENT_ORDER_THRESHOLD: 'babyDetergentOrderThreshold'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.BABY_DETERGENT_REMAINING_AMOUNT: 'babyDetergentRemainingAmount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.BABY_DETERGENT_TYPE: 'babyDetergentType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEUTRAL_DETERGENT_ALARM_ENABLED: 'neutralDetergentAlarmEnabled'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEUTRAL_DETERGENT_DOSAGE: 'neutralDetergentDosage'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEUTRAL_DETERGENT_INITIAL_AMOUNT: 'neutralDetergentInitialAmount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEUTRAL_DETERGENT_ORDER_THRESHOLD: 'neutralDetergentOrderThreshold'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEUTRAL_DETERGENT_REMAINING_AMOUNT: 'neutralDetergentRemainingAmount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEUTRAL_DETERGENT_TYPE: 'neutralDetergentType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REGULAR_DETERGENT_ALARM_ENABLED: 'regularDetergentAlarmEnabled'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 152000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.REGULAR_DETERGENT_DOSAGE: 'regularDetergentDosage'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 152000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.REGULAR_DETERGENT_INITIAL_AMOUNT: 'regularDetergentInitialAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 152000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.REGULAR_DETERGENT_ORDER_THRESHOLD: 'regularDetergentOrderThreshold'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 152000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.REGULAR_DETERGENT_REMAINING_AMOUNT: 'regularDetergentRemainingAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 152000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.REGULAR_DETERGENT_TYPE: 'regularDetergentType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 152000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
      }),
      <Capability.SAMSUNG_CE_DETERGENT_ORDER: 'samsungce.detergentOrder'>: dict({
        <Attribute.ALARM_ENABLED: 'alarmEnabled'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 152000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.ORDER_THRESHOLD: 'orderThreshold'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 152000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
      }),
      <Capability.SAMSUNG_CE_DETERGENT_STATE: 'samsungce.detergentState'>: dict({
        <Attribute.DETERGENT_TYPE: 'detergentType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 1, 22, 52, 19, 999000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
        <Attribute.DOSAGE: 'dosage'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 152000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.INITIAL_AMOUNT: 'initialAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 152000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
        <Attribute.REMAINING_AMOUNT: 'remainingAmount'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 152000, tzinfo=datetime.timezone.utc),
          'unit': 'cc',
          'value': 0,
        }),
      }),
      <Capability.SAMSUNG_CE_DEVICE_IDENTIFICATION: 'samsungce.deviceIdentification'>: dict({
        <Attribute.BINARY_ID: 'binaryId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 453000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_WM_TP2_20_COMMON',
        }),
        <Attribute.DESCRIPTION: 'description'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 453000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'DA_WM_TP2_20_COMMON_WF6300R/DC92-02338B_0080',
        }),
        <Attribute.MICOM_ASSAY_CODE: 'micomAssayCode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 453000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '20233741',
        }),
        <Attribute.MODEL_CLASSIFICATION_CODE: 'modelClassificationCode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 453000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2001000100131100022B010000000000',
        }),
        <Attribute.MODEL_NAME: 'modelName'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.RELEASE_YEAR: 'releaseYear'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER: 'serialNumber'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SERIAL_NUMBER_EXTRA: 'serialNumberExtra'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_DONGLE_SOFTWARE_INSTALLATION: 'samsungce.dongleSoftwareInstallation'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 6, 15, 14, 11, 34, 909000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'completed',
        }),
      }),
      <Capability.SAMSUNG_CE_DRIVER_VERSION: 'samsungce.driverVersion'>: dict({
        <Attribute.VERSION_NUMBER: 'versionNumber'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 3, 2, 14, 52, 963000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 24110101,
        }),
      }),
      <Capability.SAMSUNG_CE_ENERGY_PLANNER: 'samsungce.energyPlanner'>: dict({
        <Attribute.DATA: 'data'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.PLAN: 'plan'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_KIDS_LOCK: 'samsungce.kidsLock'>: dict({
        <Attribute.LOCK_STATE: 'lockState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 407000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'unlocked',
        }),
      }),
      <Capability.SAMSUNG_CE_QUICK_CONTROL: 'samsungce.quickControl'>: dict({
        <Attribute.VERSION: 'version'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTENER_AUTO_REPLENISHMENT: 'samsungce.softenerAutoReplenishment'>: dict({
        <Attribute.REGULAR_SOFTENER_ALARM_ENABLED: 'regularSoftenerAlarmEnabled'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REGULAR_SOFTENER_DOSAGE: 'regularSoftenerDosage'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REGULAR_SOFTENER_INITIAL_AMOUNT: 'regularSoftenerInitialAmount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REGULAR_SOFTENER_ORDER_THRESHOLD: 'regularSoftenerOrderThreshold'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REGULAR_SOFTENER_REMAINING_AMOUNT: 'regularSoftenerRemainingAmount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REGULAR_SOFTENER_TYPE: 'regularSoftenerType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTENER_ORDER: 'samsungce.softenerOrder'>: dict({
        <Attribute.ALARM_ENABLED: 'alarmEnabled'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.ORDER_THRESHOLD: 'orderThreshold'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTENER_STATE: 'samsungce.softenerState'>: dict({
        <Attribute.DOSAGE: 'dosage'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.INITIAL_AMOUNT: 'initialAmount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.REMAINING_AMOUNT: 'remainingAmount'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SOFTENER_TYPE: 'softenerType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_SOFTWARE_UPDATE: 'samsungce.softwareUpdate'>: dict({
        <Attribute.AVAILABLE_MODULES: 'availableModules'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 1, 23, 36, 22, 798000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '[]',
        }),
        <Attribute.LAST_UPDATED_DATE: 'lastUpdatedDate'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.NEW_VERSION_AVAILABLE: 'newVersionAvailable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 548000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'False',
        }),
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.OTN_D_U_I_D: 'otnDUID'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 453000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'U7CNQWBWJM5U4',
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TARGET_MODULE: 'targetModule'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 548000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
          }),
        }),
      }),
      <Capability.SAMSUNG_CE_WASHER_BUBBLE_SOAK: 'samsungce.washerBubbleSoak'>: dict({
        <Attribute.STATUS: 'status'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WASHER_CYCLE: 'samsungce.washerCycle'>: dict({
        <Attribute.REFERENCE_TABLE: 'referenceTable'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2021, 6, 1, 22, 52, 20, 68000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': dict({
            'id': 'Table_00',
          }),
        }),
        <Attribute.SPECIALIZED_FUNCTION_CLASSIFICATION: 'specializedFunctionClassification'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 152000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 4,
        }),
        <Attribute.SUPPORTED_CYCLES: 'supportedCycles'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2024, 12, 25, 22, 13, 27, 760000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "[{'cycle': '01', 'cycleType': 'washingOnly', 'supportedOptions': {'soilLevel': {'raw': 'C33E', 'default': 'normal', 'options': ['extraLight', 'light', 'normal', 'heavy', 'extraHeavy']}, 'spinLevel': {'raw': 'A43B', 'default': 'high', 'options': ['rinseHold', 'noSpin', 'medium', 'high', 'extraHigh']}, 'rinseCycle': {'raw': '923F', 'default': '2', 'options': ['0', '1', '2', '3', '4', '5']}, 'waterTemperature': {'raw': '833E', 'default': 'warm', 'options': ['tapCold', 'cold', 'warm', 'hot', 'extraHot']}}}, {'cycle': '70', 'cycleType': 'washingOnly', 'supportedOptions': {'soilLevel': {'raw': 'C53E', 'default': 'extraHeavy', 'options': ['extraLight', 'light', 'normal', 'heavy', 'extraHeavy']}, 'spinLevel': {'raw': 'A53F', 'default': 'extraHigh', 'options': ['rinseHold', 'noSpin', 'low', 'medium', 'high', 'extraHigh']}, 'rinseCycle': {'raw': '923F', 'default': '2', 'options': ['0', '1', '2', '3', '4', '5']}, 'waterTemperature': {'raw': '843E', 'default': 'hot', 'options': ['tapCold', 'cold', 'warm', 'hot', 'extraHot']}}}, {'cycle': '55', 'cycleType': 'washingOnly', 'supportedOptions': {'soilLevel': {'raw': 'C33E', 'default': 'normal', 'options': ['extraLight', 'light', 'normal', 'heavy', 'extraHeavy']}, 'spinLevel': {'raw': 'A43F', 'default': 'high', 'options': ['rinseHold', 'noSpin', 'low', 'medium', 'high', 'extraHigh']}, 'rinseCycle': {'raw': '923F', 'default': '2', 'options': ['0', '1', '2', '3', '4', '5']}, 'waterTemperature': {'raw': '831E', 'default': 'warm', 'options': ['tapCold', 'cold', 'warm', 'hot']}}}, {'cycle': '71', 'cycleType': 'washingOnly', 'supportedOptions': {'soilLevel': {'raw': 'C33E', 'default': 'normal', 'options': ['extraLight', 'light', 'normal', 'heavy', 'extraHeavy']}, 'spinLevel': {'raw': 'A20F', 'default': 'low', 'options': ['rinseHold', 'noSpin', 'low', 'medium']}, 'rinseCycle': {'raw': '923F', 'default': '2', 'options': ['0', '1', '2', '3', '4', '5']}, 'waterTemperature': {'raw': '830E', 'default': 'warm', 'options': ['tapCold', 'cold', 'warm']}}}, {'cycle': '72', 'cycleType': 'washingOnly', 'supportedOptions': {'soilLevel': {'raw': 'C33E', 'default': 'normal', 'options': ['extraLight', 'light', 'normal', 'heavy', 'extraHeavy']}, 'spinLevel': {'raw': 'A43F', 'default': 'high', 'options': ['rinseHold', 'noSpin', 'low', 'medium', 'high', 'extraHigh']}, 'rinseCycle': {'raw': '923F', 'default': '2', 'options': ['0', '1', '2', '3', '4', '5']}, 'waterTemperature': {'raw': '8520', 'default': 'extraHot', 'options': ['extraHot']}}}, {'cycle': '77', 'cycleType': 'washingOnly', 'supportedOptions': {'soilLevel': {'raw': 'C33E', 'default': 'normal', 'options': ['extraLight', 'light', 'normal', 'heavy', 'extraHeavy']}, 'spinLevel': {'raw': 'A21F', 'default': 'low', 'options': ['rinseHold', 'noSpin', 'low', 'medium', 'high']}, 'rinseCycle': {'raw': '923F', 'default': '2', 'options': ['0', '1', '2', '3', '4', '5']}, 'waterTemperature': {'raw': '830E', 'default': 'warm', 'options': ['tapCold', 'cold', 'warm']}}}, {'cycle': 'E5', 'cycleType': 'washingOnly', 'supportedOptions': {'soilLevel': {'raw': 'C53E', 'default': 'extraHeavy', 'options': ['extraLight', 'light', 'normal', 'heavy', 'extraHeavy']}, 'spinLevel': {'raw': 'A43F', 'default': 'high', 'options': ['rinseHold', 'noSpin', 'low', 'medium', 'high', 'extraHigh']}, 'rinseCycle': {'raw': '923F', 'default': '2', 'options': ['0', '1', '2', '3', '4', '5']}, 'waterTemperature': {'raw': '831E', 'default': 'warm', 'options': ['tapCold', 'cold', 'warm', 'hot']}}}, {'cycle': '57', 'cycleType': 'washingOnly', 'supportedOptions': {'soilLevel': {'raw': 'C000', 'default': 'none', 'options': []}, 'spinLevel': {'raw': 'A520', 'default': 'extraHigh', 'options': ['extraHigh']}, 'rinseCycle': {'raw': '9204', 'default': '2', 'options': ['2']}, 'waterTemperature': {'raw': '8520', 'default': 'extraHot', 'options': ['extraHot']}}}, {'cycle': '73', 'cycleType': 'washingOnly', 'supportedOptions': {'soilLevel': {'raw': 'C000', 'default': 'none', 'options': []}, 'spinLevel': {'raw': 'A43F', 'default': 'high', 'options': ['rinseHold', 'noSpin', 'low', 'medium', 'high', 'extraHigh']}, 'rinseCycle': {'raw': '913F', 'default': '1', 'options': ['0', '1', '2', '3', '4', '5']}, 'waterTemperature': {'raw': '8000', 'default': 'none', 'options': []}}}, {'cycle': '74', 'cycleType': 'washingOnly', 'supportedOptions': {'soilLevel': {'raw': 'C33E', 'default': 'normal', 'options': ['extraLight', 'light', 'normal', 'heavy', 'extraHeavy']}, 'spinLevel': {'raw': 'A207', 'default': 'low', 'options': ['rinseHold', 'noSpin', 'low']}, 'rinseCycle': {'raw': '923F', 'default': '2', 'options': ['0', '1', '2', '3', '4', '5']}, 'waterTemperature': {'raw': '830E', 'default': 'warm', 'options': ['tapCold', 'cold', 'warm']}}}, {'cycle': '75', 'cycleType': 'washingOnly', 'supportedOptions': {'soilLevel': {'raw': 'C33E', 'default': 'normal', 'options': ['extraLight', 'light', 'normal', 'heavy', 'extraHeavy']}, 'spinLevel': {'raw': 'A30F', 'default': 'medium', 'options': ['rinseHold', 'noSpin', 'low', 'medium']}, 'rinseCycle': {'raw': '920F', 'default': '2', 'options': ['0', '1', '2', '3']}, 'waterTemperature': {'raw': '810E', 'default': 'tapCold', 'options': ['tapCold', 'cold', 'warm']}}}, {'cycle': '78', 'cycleType': 'washingOnly', 'supportedOptions': {'soilLevel': {'raw': 'C13E', 'default': 'extraLight', 'options': ['extraLight', 'light', 'normal', 'heavy', 'extraHeavy']}, 'spinLevel': {'raw': 'A53F', 'default': 'extraHigh', 'options': ['rinseHold', 'noSpin', 'low', 'medium', 'high', 'extraHigh']}, 'rinseCycle': {'raw': '913F', 'default': '1', 'options': ['0', '1', '2', '3', '4', '5']}, 'waterTemperature': {'raw': '831E', 'default': 'warm', 'options': ['tapCold', 'cold', 'warm', 'hot']}}}]",
        }),
        <Attribute.WASHER_CYCLE: 'washerCycle'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 623000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'Table_00_Course_01',
        }),
      }),
      <Capability.SAMSUNG_CE_WASHER_CYCLE_PRESET: 'samsungce.washerCyclePreset'>: dict({
        <Attribute.MAX_NUMBER_OF_PRESETS: 'maxNumberOfPresets'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 805000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 10,
        }),
        <Attribute.PRESETS: 'presets'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WASHER_DELAY_END: 'samsungce.washerDelayEnd'>: dict({
        <Attribute.MINIMUM_RESERVABLE_TIME: 'minimumReservableTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 9, 45, 594000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 45,
        }),
        <Attribute.REMAINING_TIME: 'remainingTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 546000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 0,
        }),
      }),
      <Capability.SAMSUNG_CE_WASHER_FREEZE_PREVENT: 'samsungce.washerFreezePrevent'>: dict({
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WASHER_OPERATING_STATE: 'samsungce.washerOperatingState'>: dict({
        <Attribute.OPERATING_STATE: 'operatingState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 9, 45, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'ready',
        }),
        <Attribute.OPERATION_TIME: 'operationTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 9, 45, 594000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 45,
        }),
        <Attribute.PROGRESS: 'progress'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 9, 45, 534000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 1,
        }),
        <Attribute.REMAINING_TIME: 'remainingTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 9, 45, 534000, tzinfo=datetime.timezone.utc),
          'unit': 'min',
          'value': 45,
        }),
        <Attribute.REMAINING_TIME_STR: 'remainingTimeStr'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 9, 45, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '00:45',
        }),
        <Attribute.SCHEDULED_JOBS: 'scheduledJobs'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 30, 43, 851000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "[{'jobName': 'wash', 'timeInMin': 23}, {'jobName': 'rinse', 'timeInMin': 10}, {'jobName': 'spin', 'timeInMin': 9}]",
        }),
        <Attribute.SCHEDULED_PHASES: 'scheduledPhases'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 30, 43, 851000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "[{'phaseName': 'wash', 'timeInMin': 23}, {'phaseName': 'rinse', 'timeInMin': 10}, {'phaseName': 'spin', 'timeInMin': 9}]",
        }),
        <Attribute.SUPPORTED_OPERATING_STATES: 'supportedOperatingStates'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2022, 11, 4, 14, 21, 57, 546000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['ready', 'running', 'paused']",
        }),
        <Attribute.WASHER_JOB_PHASE: 'washerJobPhase'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 9, 45, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
        <Attribute.WASHER_JOB_STATE: 'washerJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 9, 45, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
      }),
      <Capability.SAMSUNG_CE_WASHER_WASHING_TIME: 'samsungce.washerWashingTime'>: dict({
        <Attribute.SUPPORTED_WASHING_TIMES: 'supportedWashingTimes'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WASHING_TIME: 'washingTime'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WASHER_WATER_LEVEL: 'samsungce.washerWaterLevel'>: dict({
        <Attribute.SUPPORTED_WATER_LEVEL: 'supportedWaterLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WATER_LEVEL: 'waterLevel'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WASHER_WATER_VALVE: 'samsungce.washerWaterValve'>: dict({
        <Attribute.SUPPORTED_WATER_VALVE: 'supportedWaterValve'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.WATER_VALVE: 'waterValve'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WATER_CONSUMPTION_REPORT: 'samsungce.waterConsumptionReport'>: dict({
        <Attribute.WATER_CONSUMPTION: 'waterConsumption'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SAMSUNG_CE_WELCOME_MESSAGE: 'samsungce.welcomeMessage'>: dict({
        <Attribute.WELCOME_MESSAGE: 'welcomeMessage'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SEC_DIAGNOSTICS_INFORMATION: 'sec.diagnosticsInformation'>: dict({
        <Attribute.DUMP_TYPE: 'dumpType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 453000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'file',
        }),
        <Attribute.ENDPOINT: 'endpoint'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 453000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'SSM',
        }),
        <Attribute.LOG_TYPE: 'logType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 453000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['errCode', 'dump']",
        }),
        <Attribute.MIN_VERSION: 'minVersion'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 453000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '1.0',
        }),
        <Attribute.MN_ID: 'mnId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 453000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '0AJT',
        }),
        <Attribute.PROTOCOL_TYPE: 'protocolType'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 453000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'wifi_https',
        }),
        <Attribute.SETUP_ID: 'setupId'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 453000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '210',
        }),
        <Attribute.SIGNIN_PERMISSION: 'signinPermission'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.TS_ID: 'tsId'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SEC_WIFI_CONFIGURATION: 'sec.wifiConfiguration'>: dict({
        <Attribute.AUTO_RECONNECTION: 'autoReconnection'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.MIN_VERSION: 'minVersion'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.PROTOCOL_TYPE: 'protocolType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_AUTH_TYPE: 'supportedAuthType'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.SUPPORTED_WI_FI_FREQ: 'supportedWiFiFreq'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 9, 45, 456000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.WASHER_OPERATING_STATE: 'washerOperatingState'>: dict({
        <Attribute.COMPLETION_TIME: 'completionTime'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 9, 45, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': '2025-02-07T03:54:45Z',
        }),
        <Attribute.MACHINE_STATE: 'machineState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 9, 45, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'stop',
        }),
        <Attribute.SUPPORTED_MACHINE_STATES: 'supportedMachineStates'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 2, 29, 55, 546000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': "['stop', 'run', 'pause']",
        }),
        <Attribute.WASHER_JOB_STATE: 'washerJobState'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 3, 9, 45, 534000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'none',
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[hub]
  dict({
  })
# ---
# name: test_fetching_status_of_single_device[hue_color_temperature_bulb]
  dict({
    'main': dict({
      <Capability.COLOR_TEMPERATURE: 'colorTemperature'>: dict({
        <Attribute.COLOR_TEMPERATURE: 'colorTemperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 21, 56, 4, 127000, tzinfo=datetime.timezone.utc),
          'unit': 'K',
          'value': 3000,
        }),
        <Attribute.COLOR_TEMPERATURE_RANGE: 'colorTemperatureRange'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 15, 14, 53, 823000, tzinfo=datetime.timezone.utc),
          'unit': 'K',
          'value': dict({
            'maximum': 6535,
            'minimum': 2000,
          }),
        }),
      }),
      <Capability.HEALTH_CHECK: 'healthCheck'>: dict({
        <Attribute.DEVICE_WATCH_DEVICE_STATUS: 'DeviceWatch-DeviceStatus'>: dict({
          'data': dict({
          }),
          'timestamp': datetime.datetime(2025, 2, 7, 15, 14, 53, 823000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'online',
        }),
        <Attribute.DEVICE_WATCH_ENROLL: 'DeviceWatch-Enroll'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.CHECK_INTERVAL: 'checkInterval'>: dict({
          'data': dict({
            'deviceScheme': 'UNTRACKED',
            'protocol': 'cloud',
          }),
          'timestamp': datetime.datetime(2023, 12, 17, 18, 11, 41, 671000, tzinfo=datetime.timezone.utc),
          'unit': 's',
          'value': 60,
        }),
        <Attribute.HEALTH_STATUS: 'healthStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 21, 56, 4, 127000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'on',
        }),
      }),
      <Capability.SWITCH_LEVEL: 'switchLevel'>: dict({
        <Attribute.LEVEL: 'level'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 21, 56, 4, 127000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 70,
        }),
        <Attribute.LEVEL_RANGE: 'levelRange'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 15, 14, 53, 823000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': dict({
            'maximum': 100,
            'minimum': 1,
          }),
        }),
      }),
      <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>: dict({
        <Attribute.CIRCADIAN: 'circadian'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>: dict({
        <Attribute.FADE: 'fade'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
# name: test_fetching_status_of_single_device[hue_rgbw_color_bulb]
  dict({
    'main': dict({
      <Capability.COLOR_CONTROL: 'colorControl'>: dict({
        <Attribute.COLOR: 'color'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.HUE: 'hue'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 15, 14, 53, 812000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 60.8072,
        }),
        <Attribute.SATURATION: 'saturation'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 15, 14, 53, 812000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 60,
        }),
      }),
      <Capability.COLOR_TEMPERATURE: 'colorTemperature'>: dict({
        <Attribute.COLOR_TEMPERATURE: 'colorTemperature'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 21, 56, 2, 381000, tzinfo=datetime.timezone.utc),
          'unit': 'K',
          'value': 3000,
        }),
        <Attribute.COLOR_TEMPERATURE_RANGE: 'colorTemperatureRange'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 6, 15, 14, 52, 807000, tzinfo=datetime.timezone.utc),
          'unit': 'K',
          'value': dict({
            'maximum': 6535,
            'minimum': 2000,
          }),
        }),
      }),
      <Capability.HEALTH_CHECK: 'healthCheck'>: dict({
        <Attribute.DEVICE_WATCH_DEVICE_STATUS: 'DeviceWatch-DeviceStatus'>: dict({
          'data': dict({
          }),
          'timestamp': datetime.datetime(2025, 2, 7, 15, 14, 53, 812000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'online',
        }),
        <Attribute.DEVICE_WATCH_ENROLL: 'DeviceWatch-Enroll'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
        <Attribute.CHECK_INTERVAL: 'checkInterval'>: dict({
          'data': dict({
            'deviceScheme': 'UNTRACKED',
            'protocol': 'cloud',
          }),
          'timestamp': datetime.datetime(2023, 12, 17, 18, 11, 41, 678000, tzinfo=datetime.timezone.utc),
          'unit': 's',
          'value': 60,
        }),
        <Attribute.HEALTH_STATUS: 'healthStatus'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.REFRESH: 'refresh'>: dict({
      }),
      <Capability.SAMSUNG_IM_HUE_SYNC_MODE: 'samsungim.hueSyncMode'>: dict({
        <Attribute.MODE: 'mode'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 15, 14, 53, 812000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'normal',
        }),
      }),
      <Capability.SWITCH: 'switch'>: dict({
        <Attribute.SWITCH: 'switch'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 8, 7, 8, 19, 519000, tzinfo=datetime.timezone.utc),
          'unit': None,
          'value': 'off',
        }),
      }),
      <Capability.SWITCH_LEVEL: 'switchLevel'>: dict({
        <Attribute.LEVEL: 'level'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 21, 56, 2, 381000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': 70,
        }),
        <Attribute.LEVEL_RANGE: 'levelRange'>: dict({
          'data': None,
          'timestamp': datetime.datetime(2025, 2, 7, 15, 14, 53, 812000, tzinfo=datetime.timezone.utc),
          'unit': '%',
          'value': dict({
            'maximum': 100,
            'minimum': 1,
          }),
        }),
      }),
      <Capability.SYNTHETIC_CIRCADIAN_LIGHTING_EFFECT: 'synthetic.lightingEffectCircadian'>: dict({
        <Attribute.CIRCADIAN: 'circadian'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
      <Capability.SYNTHETIC_FADE_LIGHTNING_EFFECT: 'synthetic.lightingEffectFade'>: dict({
        <Attribute.FADE: 'fade'>: dict({
          'data': None,
          'timestamp': None,
          'unit': None,
          'value': None,
        }),
      }),
    }),
  })
# ---
